//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace WCFAsyncQueryableServices.SerializableExpressions
{
    [DataContract(Namespace = "http://WCFAsyncQueryableServices/QuerySerialization", IsReference = true)]
    public class SerializableType
    {
        public SerializableType()
        {
        }
        
        [DataMember]
        public string TypeName { get; set; }
        [DataMember]
        public string NamespaceName { get; set; }
        [DataMember]
        public string WCFNamespaceName { get; set; }
        [DataMember]
        public List<SerializableType> GenericArguments { get; set; }
        [DataMember]
        public SerializableType ArrayOf { get; set; }
        [DataMember]
        public bool IsKnownByServer { get; set; }
        [DataMember]
        public List<SerializablePropertyExpression> Properties { get; set; }
        
        public override int GetHashCode()
        {
            unchecked
            {
                return (Properties == null || Properties.Count == 0) ? string.Format("{0}.{1}", NamespaceName, TypeName).GetHashCode() : Properties.Select((p, i) => (p.Name.GetHashCode() ^ p.Type.GetHashCode()) * (i + 1)).Aggregate((p1, p2) => p1 ^ p2);
            }
        }
    }
}
