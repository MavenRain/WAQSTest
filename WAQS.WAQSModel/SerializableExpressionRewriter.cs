//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System.Collections.Generic;

namespace WCFAsyncQueryableServices.ClientContext.Interfaces.ExpressionSerialization
{
    public abstract class SerializableExpressionRewriter
    {
        public virtual SerializableExpression Visit(SerializableExpression expression)
        {
            if (expression == null)
                return null;
            return expression.Visit(this);
        }
    
        protected internal virtual SerializableExpression VisitTypeBinary(SerializableTypeBinaryExpression expression)
        {
            var exp = Visit(expression.Expression);
            return new SerializableTypeBinaryExpression(exp, expression.NodeType, expression.TypeOperand);
        }
    
        protected internal virtual SerializableExpression VisitBinary(SerializableBinaryExpression expression)
        {
            var left = Visit(expression.Left);
            var right = Visit(expression.Right);
            return new SerializableBinaryExpression(left, right, expression.NodeType);
        }
    
        protected internal virtual SerializableExpression VisitConstant(SerializableConstantExpression expression)
        {
            return expression;
        }
    
        protected internal virtual SerializableExpression VisitConstructor(SerializableConstructorExpression expression)
        {
            var arguments = new List<SerializableExpression>();
            foreach (var arg in expression.Arguments)
                arguments.Add(Visit(arg));
            return new SerializableConstructorExpression(expression.Type, expression.ArgumentTypes, arguments);
        }
    
        protected internal virtual SerializableExpression VisitEntitySet(SerializableEntitySetExpression expression)
        {
            return expression;
        }
    
        protected internal virtual SerializableExpression VisitLambda(SerializableLambdaExpression expression)
        {
            var parameters = new List<SerializableParameterExpression>();
            foreach (var parameter in expression.Parameters)
                parameters.Add((SerializableParameterExpression)Visit(parameter));
            SerializableExpression body = Visit(expression.Body);
            return new SerializableLambdaExpression(parameters, expression.ReturnType, body);
        }
    
        protected internal virtual SerializableExpression VisitMethodCall(SerializableMethodCallExpression expression)
        {
            var source = Visit(expression.Source);
            var parameters = new List<SerializableExpression>();
            foreach (var parameter in expression.Parameters)
                parameters.Add(Visit(parameter));
            return new SerializableMethodCallExpression(source, parameters, expression.Method);
        }
    
        protected internal virtual SerializableExpression VisitPropertyGetter(SerializablePropertyGetterExpression expression)
        {
            return new SerializablePropertyGetterExpression(Visit(expression.Source), expression.Property);
        }
    
        protected internal virtual SerializableExpression VisitPropertySetter(SerializablePropertySetterExpression expression)
        {
            var source = Visit(expression.Source);
            var value = Visit(expression.Value);
            return new SerializablePropertySetterExpression(source, expression.Property, value);
        }
    
        protected internal virtual SerializableExpression VisitMemberInit(SerializableMemberInitExpression expression)
        {
            var ctor = (SerializableConstructorExpression)Visit(expression.Constructor);
            var setters = new List<SerializablePropertySetterExpression>();
            foreach (var setter in expression.Setters)
                setters.Add((SerializablePropertySetterExpression)Visit(setter));
            return new SerializableMemberInitExpression(ctor, setters);
        }
    
        protected internal virtual SerializableExpression VisitParameter(SerializableParameterExpression expression)
        {
            return expression;
        }
    
        protected internal virtual SerializableExpression VisitUnary(SerializableUnaryExpression expression)
        {
            var operand = Visit(expression.Operand);
            return new SerializableUnaryExpression(operand, expression.NodeType, expression.Type);
        }
    
        protected internal virtual SerializableExpression VisitConditional(SerializableConditionalExpression expression)
        {
            var test = Visit(expression.TestExpression);
            var ifTrue = Visit(expression.IfTrueExpression);
            var ifFalse = Visit(expression.IfFalseExpression);
            return new SerializableConditionalExpression(test, ifTrue, ifFalse, expression.Type);
        }
    }
}
