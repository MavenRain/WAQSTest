
<#@import namespace="System.Text.RegularExpressions"#><#@ assembly name="System.Core" #><#@ assembly name="System.Data" #><#@ assembly name="System.Data.Entity" #><#@ assembly name="System.Data.Entity.Design" #><#@ assembly name="System.Xml" #><#@ assembly name="System.Xml.Linq"#><#@ assembly name="EnvDTE"#><#@ import namespace="System" #><#@ import namespace="System.Linq" #><#@ import namespace="System.IO" #><#@ import namespace="System.Collections.Generic" #><#@ import namespace="System.Data.Objects" #><#@ import namespace="System.Data.Objects.DataClasses" #><#@ import namespace="System.Xml" #><#@ import namespace="System.Xml.Linq" #><#@ import namespace="System.Globalization" #><#@ import namespace="System.Reflection" #><#@ import namespace="System.Data.Metadata.Edm" #><#@ import namespace="System.Data.Mapping" #><#@ import namespace="System.Data.Entity.Design" #><#@ import namespace="System.CodeDom" #><#@ import namespace="System.CodeDom.Compiler" #><#@ import namespace="Microsoft.CSharp"#><#@ import namespace="System.Text"#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"#><#@ template language="C#" debug="false" hostspecific="true"#><#@ output extension=".txt"#>
<#+// Copyright (c) Microsoft Corporation.  All rights reserved.
// Copyright (c) Matthieu MEZIL.  All rights reserved.

public class EdmxElements
{
    private EdmxElements(ITextTemplatingEngineHost host, string edmxPath, string namespaceName)
    {
        EdmxPath = edmxPath;
        Code = new CodeGenerationTools(this);
        NamespaceName = namespaceName ?? Code.VsNamespaceSuggestion();
        MetadataTools = new MetadataTools(this);
        Loader = new MetadataLoader(this);
        ItemCollection = Loader.CreateEdmItemCollection(EdmxPath);
        EdmxName = Path.GetFileNameWithoutExtension(EdmxPath);
        Container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
        EntityTypes = ItemCollection.GetItems<EntityType>().ToList();
        ComplexTypes = ItemCollection.GetItems<ComplexType>().ToList();
        EdmTypes = EntityTypes.Cast<StructuralType>().Union(ComplexTypes).ToList();
        EntitySets = Container.BaseEntitySets.OfType<EntitySet>().ToList();
        FunctionImports = Container.FunctionImports.ToList();
    }

    private EdmxElements()
    {
    }

    public static EdmxElements Get(ITextTemplatingEngineHost host, string edmxPath, string namespaceName = null)
    {
        return Get(host, ref edmxPath, namespaceName);
    }

    public static EdmxElements Get(ITextTemplatingEngineHost host, ref string edmxPath, string namespaceName = null)
    {
        edmxPath = Path.GetFullPath(host.ResolvePath(edmxPath));
        return new EdmxElements(host, edmxPath, namespaceName);
    }

    public string EdmxPath { get; private set; }
    public string NamespaceName { get; private set; }
    public string EdmxName { get; private set; }
    public MetadataTools MetadataTools { get; private set; }
    public CodeGenerationTools Code { get; private set; }
    public MetadataLoader Loader { get; private set; }
    public EdmItemCollection ItemCollection { get; private set; }
    public List<EntityType> EntityTypes { get; private set; }
    public List<ComplexType> ComplexTypes { get; private set; }
    public List<StructuralType> EdmTypes { get; private set; }
    public List<EntitySet> EntitySets { get; private set; }
    public List<EdmFunction> FunctionImports { get; private set; }
    public EntityContainer Container { get; private set; }

    private StoreItemCollection _storeItemCollection;
    public StoreItemCollection StoreItemCollection
    {
        get 
        {
            if (_storeItemCollection == null)
                Loader.TryCreateStoreItemCollection(EdmxPath, out _storeItemCollection);
            return _storeItemCollection; 
        }
    }

    private EntityContainer _storeContainer;
    public EntityContainer StoreContainer
    {
        get { return _storeContainer ?? (_storeContainer = StoreItemCollection.GetItems<EntityContainer>().First()); }
    }

    private string _storeContainerName;
    public string StoreContainerName 
    {
        get { return _storeContainerName ?? (_storeContainerName = StoreContainer.Name); }
    }

    private StorageMappingItemCollection _mappingCollection;
    public StorageMappingItemCollection MappingCollection
    {
        get 
        { 
            if (_mappingCollection == null)
                Loader.TryCreateStorageMappingItemCollection(EdmxPath, ItemCollection, StoreItemCollection, out _mappingCollection);
            return _mappingCollection;
        }
    }
}


partial class WritingFunctions
{
    private Action<string> _write;

    public WritingFunctions(Action<string> write)
    {
        _write = write;
    }

    public void Write(string text)
    {
        _write(text);
    }
}

public static class EdmFunctionExtensions
{
    public static string GetParameters(EdmFunction edmFunction, EdmxElements edmxElements)
    {
        FunctionImportParameter[] parameters;
        return GetParameters(edmFunction, edmxElements, out parameters);
    }
    public static string GetParameters(EdmFunction edmFunction, EdmxElements edmxElements, out FunctionImportParameter[] parameters)
    {
        parameters = FunctionImportParameter.Create(edmFunction.Parameters, edmxElements.Code, edmxElements.MetadataTools).ToArray();
        return String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName));
    }

    public static string GetReturnTypeName(EdmFunction edmFunction, EdmxElements edmxElements)
    {
        TypeUsage returnType;
        return GetReturnTypeName(edmFunction, edmxElements, out returnType);
    }
    public static string GetReturnTypeName(EdmFunction edmFunction, EdmxElements edmxElements, out TypeUsage returnType)
    {
        returnType = edmxElements.MetadataTools.GetElementType(edmFunction.ReturnParameter.TypeUsage);
        if (returnType == null)
            return null;
        return edmxElements.Code.Escape(returnType);
    }
}

public static string GetPlurial(string entityTypeName)
{
    return entityTypeName.EndsWith("y") ? entityTypeName.Substring(0, entityTypeName.Length - 1) + "ies" : entityTypeName.EndsWith("s") ? entityTypeName + "es" : entityTypeName + "s";
}

public static string GetPlurial(CodeGenerationTools code, EntityContainer container, EdmType edmType)
{
    var entityType = edmType as EntityType;

    EntitySet entitySet;
    if (entityType != null && (entitySet = GetEntitySet(container, entityType)) != null && entitySet.ElementType == entityType)
        return code.Escape(entitySet);
    return GetPlurial(code.Escape(edmType));
}

public static string GetContainerNameWithoutEntitiesName(EntityContainer container)
{
    string containerName = container.Name;
    string containerWithoutEntitiesName = containerName;
    if (containerWithoutEntitiesName.EndsWith("Entities") && containerWithoutEntitiesName.Length > 8)
        containerWithoutEntitiesName = containerWithoutEntitiesName.Substring(0, containerWithoutEntitiesName.Length - 8);
    return containerWithoutEntitiesName;
}

public static string PropertyAccessibilityAndVirtual(EdmMember member)
{
    string accessibility = Accessibility.ForProperty(member);
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}

public static bool IsConcurrencyFixed(EdmMember edmMember)
{
    return edmMember.TypeUsage.Facets.Any(f => f.Name == "ConcurrencyMode" && f.Value.ToString() == "Fixed");
}

public static int? MaxLength(EdmMember edmMember)
{
    var maxLengthFacet = edmMember.TypeUsage.Facets.FirstOrDefault(f => f.Name == "MaxLength");
    if (maxLengthFacet != null && maxLengthFacet.Value != null && maxLengthFacet.Value.ToString() != "Max")
        return (int)maxLengthFacet.Value;
    return null;
}

public static bool FixedLength(EdmMember edmMember)
{
    return edmMember.TypeUsage.Facets.Any(f => f.Name == "FixedLength" && f.Value!=null && (bool)f.Value);
}

public static string ReadOnlyPropertyAccessibilityAndVirtual(EdmMember member)
{
    string accessibility = Accessibility.ForReadOnlyProperty(member);
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}

public static string AccessibilityAndVirtual(string accessibility)
{
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}

public static EntitySet GetEntitySet(EntityContainer container, EntityType entityType)
{
    EntitySet value = container.BaseEntitySets.OfType<EntitySet>().FirstOrDefault(es => es.ElementType == entityType);
    if (value != null)
        return value;
    if (entityType.BaseType != null)
        return GetEntitySet(container, (EntityType)entityType.BaseType);
    return null;
}

public static EntitySet GetEntitySet(EntityContainer container, EdmItemCollection itemCollection, string entityTypeName)
{
    return GetEntitySet(container, itemCollection.GetItems<EntityType>().First(et => et.Name == entityTypeName));
}

public static NavigationProperty GetNavigationPropertyFromFK(EdmProperty property)
{
    var entityType = (EntityType)property.DeclaringType;
    foreach (NavigationProperty navigationProperty in entityType.NavigationProperties.Where(n => Accessibility.ForReadOnlyProperty(n) == "public"))
    {
        var association = (AssociationType)navigationProperty.RelationshipType;
        var associationEndMembers = association.AssociationEndMembers.Where(aem => aem.GetEntityType() == entityType);
        var referentialConstraint = association.ReferentialConstraints.FirstOrDefault();
        if (referentialConstraint == null)
            return null;
        if (referentialConstraint != null && associationEndMembers.Contains(referentialConstraint.ToRole) && referentialConstraint.ToProperties.Contains(property) && navigationProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
        {
            return navigationProperty;
        }
    }
    return null;
}

public static NavigationProperty GetOtherNavigationProperty(NavigationProperty navigationProperty)
{
    var association = (AssociationType)navigationProperty.RelationshipType;
    return navigationProperty.ToEndMember.GetEntityType().NavigationProperties.FirstOrDefault(np => np.RelationshipType == association && np != navigationProperty);
}

public static IEnumerable<EdmProperty> GetFKsFromNavigationProperty(NavigationProperty navigationProperty)
{
    var association = (AssociationType)navigationProperty.RelationshipType;
    var referentialConstraint = association.ReferentialConstraints.FirstOrDefault();
    if (referentialConstraint != null)
    {
        if (navigationProperty.FromEndMember == referentialConstraint.FromRole)
            return referentialConstraint.ToProperties; 
        else
            return referentialConstraint.FromProperties; 
    }
    return new EdmProperty[0];
}

public static IEnumerable<EntityType> GetSubEntityTypes(EdmItemCollection itemCollection, EntityType entityType, string accessibility = "public")
{
    return GetSubEntityTypes(itemCollection, entityType.Name, accessibility);
}

public static IEnumerable<EntityType> GetSubEntityTypes(EdmItemCollection itemCollection, string entityTypeName, string accessibility = "public")
{
    IEnumerable<EntityType> subEntityTypes = itemCollection.GetItems<EntityType>().OrderBy(e => e.Name).Where(e => e.BaseType != null && e.BaseType.Name == entityTypeName);
    if (accessibility != null)
        subEntityTypes = subEntityTypes.Where(e => Accessibility.ForType(e) == accessibility);
    foreach (EntityType et in subEntityTypes)
    {
        foreach (EntityType subEntityType in GetSubEntityTypes(itemCollection, et, accessibility))
            yield return subEntityType;
        yield return et;
    }
}

public EntityType GetEntityType(EdmItemCollection itemCollection, string entityTypeName)
{
    return itemCollection.GetItems<EntityType>().FirstOrDefault(et => et.Name == entityTypeName);
}

public static IEnumerable<EntityType> GetEntityTypes(EdmItemCollection itemCollection, EntitySet entitySet)
{
    var entityType = (EntityType)entitySet.ElementType;
    foreach (var subEntityType in GetSubEntityTypes(itemCollection, entityType))
        yield return subEntityType;
    yield return entityType;
}

public static IEnumerable<EntityType> GetDescendantsThenAscendantsEntityTypes(EdmItemCollection itemCollection, EntityType entityType)
{
    foreach (var subEntityType in GetSubEntityTypes(itemCollection, entityType))
        yield return subEntityType;
    yield return entityType;
    while ((entityType = (EntityType)entityType.BaseType) != null)
        yield return entityType;
}

public static void DefineMetadata()
{
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_NAME] = "CSharpSelfTracking.Types";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_VERSION] = "5.0";
    TemplateMetadata[MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION] = "4.0";
}

void WriteHeader(string namespaceName, CodeGenerationTools code, params string[] usings)
{
    new WritingFunctions(Write).WriteHeader(PushIndent, namespaceName, code, usings);
}
partial class WritingFunctions
{
public void WriteHeader(Action<string> pushIndent, string namespaceName, CodeGenerationTools code, params string[] usings)
{
    WriteHeaderWithExternAliases(pushIndent, namespaceName, code, new string[0], usings);
}
}

void WriteCopyright()
{
    new WritingFunctions(Write).WriteCopyright();
}
partial class WritingFunctions
{
public void WriteCopyright()
{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

<#+
}
}

void WriteHeaderWithExternAliases(string namespaceName, CodeGenerationTools code, string[] aliases, string[] usings)
{
    new WritingFunctions(Write).WriteHeaderWithExternAliases(PushIndent, namespaceName, code, aliases, usings);
}
partial class WritingFunctions
{
public void WriteHeaderWithExternAliases(Action<string> pushIndent, string namespaceName, CodeGenerationTools code, string[] aliases, string[] usings)
{
    CodeRegion region = new CodeRegion(this);
    WriteCopyright();
    foreach (var a in aliases.Where(al => al != null).Distinct())
    {
#>
extern alias <#=a#>;
<#+
    }	
#>
 
<#+
    foreach (var u in usings.Where(us => ! string.IsNullOrEmpty(us)).Distinct())
    {
#>
using <#=u#>;
<#+
    }	
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>

namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        pushIndent(CodeRegion.GetIndent(1));
    }
}
}

void WriteFooter(string namespaceName)
{
    new WritingFunctions(Write).WriteFooter(PopIndent, namespaceName);
}
partial class WritingFunctions
{
public void WriteFooter(Func<string> popIndent, string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        popIndent();
#>
}
<#+
    }
}
}

public partial class OriginalValueMembers
{
    private readonly HashSet<EdmProperty> _concurrencyMembers;

    public OriginalValueMembers(bool recordRequiredOriginalValuesOnly, MetadataWorkspace metadataWorkspace, MetadataTools metadataTools)
    {
        if (recordRequiredOriginalValuesOnly)
            try
            {
                _concurrencyMembers = new HashSet<EdmProperty>();
                foreach (EntityContainer container in metadataWorkspace.GetItems<EntityContainer>(DataSpace.CSpace))
                {
                    ILookup<EntityType, EntityType> directSubTypeLookup = metadataWorkspace.GetItems<EntityType>(DataSpace.CSpace).ToLookup(e => (EntityType)e.BaseType);
                    foreach (EntitySetBase eSet in container.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet))
                    {
                        List<EntityType> subTypes = new List<EntityType>();
                        GetSubtypes(directSubTypeLookup, (EntityType)eSet.ElementType, subTypes);
                        foreach (EntityType eType in subTypes)
                            foreach (EdmProperty member in GetRelevantMembersForUpdate(metadataWorkspace, eSet, eType, true))
                                _concurrencyMembers.Add(member);
                    }
                }

                foreach (AssociationType assoc in metadataWorkspace.GetItems<AssociationType>(DataSpace.CSpace).Where(a => a.IsForeignKey))
                    foreach (EdmProperty toProperty in assoc.ReferentialConstraints[0].ToProperties)
                        _concurrencyMembers.Add(toProperty);
            }
            catch (Exception)
            {
                _concurrencyMembers = null;
            }
    }

    public bool IsOriginalValueMember(EdmProperty edmProperty)
    {
        return _concurrencyMembers == null || _concurrencyMembers.Contains(edmProperty);
    }

    private static void GetSubtypes(ILookup<EntityType, EntityType> lookup, EntityType eType, List<EntityType> subTypes)
    {
        subTypes.Add(eType);
        foreach (EntityType subType in lookup[eType])
            GetSubtypes(lookup, subType, subTypes);
    }
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
            continue;

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
            alreadySeen.Add(type.FullName, true);
    }

    return true;
}

// True if the association for the specified navigation property is an identifying relationship or a foreign key relationship.
public static bool IsForeignKeyOrIdentifyingRelationship(MetadataTools tools, NavigationProperty navProperty)
{
    if (tools == null)
        throw new ArgumentNullException("tools");

    if (navProperty == null)
        throw new ArgumentNullException("navProperty");

    return IsForeignKeyOrIdentifyingRelationship(tools, (AssociationType)navProperty.RelationshipType);
}

// True if the specified association is an identifying relationship or a foreign key relationship.
public static bool IsForeignKeyOrIdentifyingRelationship(MetadataTools tools, AssociationType association)
{
    if (tools == null)
        throw new ArgumentNullException("tools");

    if (association == null)
        throw new ArgumentNullException("association");

    return association.IsForeignKey || tools.IsIdentifyingRelationship(association);
}

public static bool IsPublic(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter == "public" && setter == "public" && (member.TypeUsage.EdmType is ComplexType ? Accessibility.ForType(member.TypeUsage.EdmType) == "public" : true);
}
public static bool IsPublicOrInternal(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);
    string typeAccessibility;
    return (getter == "public" || getter == "internal") && (setter == "public" || setter == "internal") && (member.TypeUsage.EdmType is ComplexType ? ((typeAccessibility = Accessibility.ForType(member.TypeUsage.EdmType)) == "public" || typeAccessibility == "internal") : true);
}

public static bool IsPublic(EdmFunction method)
{
    return Accessibility.ForMethod(method) == "public";
}
public static bool IsPublicOrInternal(EdmFunction method)
{
    string methodAccessibility = Accessibility.ForMethod(method);
    return methodAccessibility == "public" || methodAccessibility == "internal";
}

public static bool IsPublic(NavigationProperty np)
{
    if (np == null || np.ToEndMember == null)
        return false;
    return IsPublic((EdmMember)np) && Accessibility.ForType(np.ToEndMember.GetEntityType()) == "public";
}
public static bool IsPublicOrInternal(NavigationProperty np)
{
    if (np == null || np.ToEndMember == null)
        return false;
    string typeAccessibility;
    return IsPublicOrInternal((EdmMember)np) && ((typeAccessibility = Accessibility.ForType(np.ToEndMember.GetEntityType())) == "public" || typeAccessibility == "internal");
}

public static bool IsPublic(EdmType type)
{
    return Accessibility.ForType(type) == "public";
}

public static IEnumerable<EdmProperty> GetCSDLIdentityProperties(EntityType entityType)
{
    return entityType.Properties.Where(p => p.MetadataProperties.Select(mp => mp.Value).OfType<string>().Any(sgp => sgp == "Identity"));
}

public static IEnumerable<EdmProperty> GetCSDLComputedProperties(EntityType entityType)
{
    return entityType.Properties.Where(p => p.MetadataProperties.Select(mp => mp.Value).OfType<string>().Any(sgp => sgp == "Computed"));
}

public IEnumerable<string> GetIdentityProperties(string inputFile, EntityType entityType)
{
    return GetIdentityProperties(inputFile, entityType, HostResolvePath);
}
public static IEnumerable<string> GetIdentityProperties(string inputFile, EntityType entityType, Func<string, string> hostResolvePath)
{
    return GetStoreGeneratedPropertiesPrivate(inputFile, entityType, "Identity", hostResolvePath).Distinct();
}

public bool HasTemporaryKeys(string inputFile, EntityType entityType)
{
    return HasTemporaryKeys(inputFile, entityType, HostResolvePath);
}
public static bool HasTemporaryKeys(string inputFile, EntityType entityType, Func<string, string> hostResolvePath)
{
    return GetStoreGeneratedPropertiesPrivate(inputFile, entityType, "Identity", hostResolvePath).Any() || entityType.NavigationProperties.Any(np => np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && HasTemporaryKeys(inputFile, np.ToEndMember.GetEntityType(), hostResolvePath));
}

public string HostResolvePath(string path)
{
    return Host.ResolvePath(path);
}

public bool CouldHaveCSDLTemporaryKeys(EntityType entityType)
{
    return CouldHaveCSDLTemporaryKeys(entityType, HostResolvePath);
}
public static bool CouldHaveCSDLTemporaryKeys(EntityType entityType, Func<string, string> hostResolvePath, List<NavigationProperty> navigationProperties = null)
{
    if (navigationProperties == null)
        navigationProperties = new List<NavigationProperty>();
    return HasCSDLTemporaryKeys(entityType, hostResolvePath) || CouldHaveCSDLTemporaryKeysNps(entityType, hostResolvePath, navigationProperties).Any();
}

public IEnumerable<NavigationProperty> CouldHaveCSDLTemporaryKeysNps(EntityType entityType)
{
    return CouldHaveCSDLTemporaryKeysNps(entityType, HostResolvePath);
}
public static IEnumerable<NavigationProperty> CouldHaveCSDLTemporaryKeysNps(EntityType entityType, Func<string, string> hostResolvePath, List<NavigationProperty> navigationProperties = null)
{
    if (navigationProperties == null)
        navigationProperties = new List<NavigationProperty>();
    return entityType.NavigationProperties.Where(np => 
        {
            if (navigationProperties.Contains(np) || !np.GetDependentProperties().Any())
                return false;
            navigationProperties.Add(np);
            IEnumerable<EdmProperty> fromProperties, toProperties;
            GetNavigationPropertyReferentialConstraintsEnumerables(np, out fromProperties, out toProperties);
            return np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many && fromProperties.Any(f => entityType.KeyMembers.Contains(f)) && CouldHaveCSDLTemporaryKeys(np.ToEndMember.GetEntityType(), hostResolvePath, navigationProperties);
        });
}

public IEnumerable<EdmMember> TemporaryKeys(EntityType entityType)
{
    return TemporaryKeys(entityType, HostResolvePath);
}
public static IEnumerable<EdmMember> TemporaryKeys(EntityType entityType, Func<string, string> hostResolvePath, List<NavigationProperty> navigationProperties = null)
{
    if (navigationProperties == null)
        navigationProperties = new List<NavigationProperty>();
    return GetCSDLIdentityProperties(entityType).Cast<EdmMember>().Intersect(entityType.KeyMembers).Union(CouldHaveCSDLTemporaryKeysNps(entityType, hostResolvePath).SelectMany<NavigationProperty, EdmMember>(np => 
        {
            if (navigationProperties.Contains(np))
                return new EdmMember[0];
            navigationProperties.Add(np);
            IEnumerable<EdmProperty> fromProperties, toProperties;
            GetNavigationPropertyReferentialConstraintsEnumerables(np, out fromProperties, out toProperties);
            var toTemporaryKeys = TemporaryKeys(np.ToEndMember.GetEntityType(), hostResolvePath, navigationProperties).Intersect(toProperties);
            IEnumerator<EdmProperty> fromPropertiesEnumerator = fromProperties.GetEnumerator(), toPropertiesEnumerator = toProperties.GetEnumerator();
            var result = new List<EdmMember>();
            while (fromPropertiesEnumerator.MoveNext() && toPropertiesEnumerator.MoveNext())
                if (toTemporaryKeys.Contains(toPropertiesEnumerator.Current))
                    result.Add(fromPropertiesEnumerator.Current);
            return result;
        })).Distinct();
}

public bool HasCSDLTemporaryKeys(EntityType entityType)
{
    return HasCSDLTemporaryKeys(entityType, HostResolvePath);
}
public static bool HasCSDLTemporaryKeys(EntityType entityType, Func<string, string> hostResolvePath)
{
    return GetCSDLIdentityProperties(entityType).Any() || entityType.NavigationProperties.Any(np => np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && HasCSDLTemporaryKeys(np.ToEndMember.GetEntityType(), hostResolvePath));
}

public IEnumerable<string> GetComputedProperties(string inputFile, EntityType entityType)
{
    return GetComputedProperties(inputFile, entityType, HostResolvePath);
}
public static IEnumerable<string> GetComputedProperties(string inputFile, EntityType entityType, Func<string, string> hostResolvePath)
{
    return GetStoreGeneratedPropertiesPrivate(inputFile, entityType, "Computed", hostResolvePath).Distinct();
}

public IEnumerable<string> GetStoreGeneratedPropertiesPrivate(string inputFile, EntityType entityType, string storeGeneratedPattern)
{
    return GetStoreGeneratedPropertiesPrivate(inputFile, entityType, storeGeneratedPattern, HostResolvePath);
}
public static IEnumerable<string> GetStoreGeneratedPropertiesPrivate(string inputFile, EntityType entityType, string storeGeneratedPattern, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string msl_ns = GetMSL_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    for (var entityTypeLoop = entityType ; entityTypeLoop != null ; entityTypeLoop = (EntityType)entityTypeLoop.BaseType)
    {
        var entityTypeMapping = runtime.Element(XName.Get("Mappings", edm_ns)).Element(XName.Get("Mapping", msl_ns)).Descendants(XName.Get("EntityTypeMapping", msl_ns)).FirstOrDefault(etm => Regex.IsMatch(etm.Attribute("TypeName").Value, string.Concat(@"^(?:IsTypeOf\()?", entityTypeLoop.NamespaceName, ".", entityTypeLoop.Name, @"(?:\))?$")));
        if (entityTypeMapping != null) 
            foreach (var mappingFragment in entityTypeMapping.Elements(XName.Get("MappingFragment", msl_ns)))
            {
                foreach (var storeGeneratedProp in GetStoreGeneratedPropertiesPrivate(runtime, mappingFragment, mappingFragment.Attribute("StoreEntitySet").Value, storeGeneratedPattern, edm_ns, msl_ns, ssdl_ns))
                    yield return storeGeneratedProp;
            }
    }
}

public static IEnumerable<string> GetStoreGeneratedPropertiesPrivate(XElement runtime, XElement mappingParent, string table, string storeGeneratedPattern, string edm_ns, string msl_ns, string ssdl_ns, string prefix = "")
{
    foreach (var scalarProperty in mappingParent.Elements(XName.Get("ScalarProperty", msl_ns)))
    {
        var column = scalarProperty.Attribute("ColumnName").Value;
        XAttribute storeGeneratedPatternAttribute;
        if ((storeGeneratedPatternAttribute = runtime.Element(XName.Get("StorageModels", edm_ns)).Element(XName.Get("Schema", ssdl_ns)).Elements(XName.Get("EntityType", ssdl_ns)).First(et => et.Attribute("Name").Value == table).Elements(XName.Get("Property", ssdl_ns)).First(p => p.Attribute("Name").Value == column).Attribute("StoreGeneratedPattern")) != null && storeGeneratedPatternAttribute.Value == storeGeneratedPattern)
            yield return prefix + scalarProperty.Attribute("Name").Value;
    }
    foreach (var complexProperty in mappingParent.Elements(XName.Get("ComplexProperty", msl_ns)))
        foreach (var storeGeneratedProp in GetStoreGeneratedPropertiesPrivate(runtime, complexProperty, table, storeGeneratedPattern, edm_ns, msl_ns, ssdl_ns, prefix = complexProperty.Attribute("Name").Value + "."))
            yield return storeGeneratedProp;
}

public static string InitializedTrackingField(EdmProperty property, CodeGenerationTools code)
{
    string namePart = property.Name + "Initialized";
    if (code.CamelCaseFields)
        namePart = code.CamelCase(namePart);
    return "_" + namePart;
}

public static bool IsSaveReference(MetadataTools tools, NavigationProperty navProperty)
{
    return !IsForeignKeyOrIdentifyingRelationship(tools, navProperty) && navProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many && navProperty.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.One;
}

public static string CreateFixupMethodName(RelationshipEndMember endMember)
{
    return String.Format(CultureInfo.InvariantCulture, "Fixup{0}_{1}_{2}Keys", endMember.DeclaringType.NamespaceName.Replace(".", "_"), endMember.DeclaringType.Name, endMember.Name);
}

public static string CreateKeyNameVariable(string keyName)
{
    return String.Format(CultureInfo.InvariantCulture, "{0}KeyName", keyName);
}

public static string CreateReferenceValueLookupKey(AssociationEndMember endMember, string keyName)
{
    return String.Format(CultureInfo.InvariantCulture, "Navigate({0}.{1}).{2}", endMember.DeclaringType.FullName, endMember.Name, keyName);
}

public static string CreateReferenceValueLookupKey(NavigationProperty navProp, string keyName)
{
    return String.Format(CultureInfo.InvariantCulture, "{0}.{1}", navProp.Name, keyName);
}

public IEnumerable<string> GetTablesMappedTo(string inputFile, EntityType entityType)
{
    return GetTablesMappedTo(inputFile, entityType, HostResolvePath);
}
public static IEnumerable<string> GetTablesMappedTo(string inputFile, EntityType entityType, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string msl_ns = GetMSL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    for (var entityTypeLoop = entityType ; entityTypeLoop != null ; entityTypeLoop = (EntityType)entityTypeLoop.BaseType)
    {
        var entityTypeMapping = runtime.Element(XName.Get("Mappings", edm_ns)).Element(XName.Get("Mapping", msl_ns)).Descendants(XName.Get("EntityTypeMapping", msl_ns)).FirstOrDefault(etm => Regex.IsMatch(etm.Attribute("TypeName").Value, string.Concat(@"^(?:IsTypeOf\()?", entityTypeLoop.NamespaceName, ".", entityTypeLoop.Name, @"(?:\))?$")));
        if (entityTypeMapping != null)
            foreach (var mappingFragment in entityTypeMapping.Elements(XName.Get("MappingFragment", msl_ns)))
                yield return mappingFragment.Attribute("StoreEntitySet").Value;
    }	
}

public IEnumerable<XElement> GetDependentTablesAssociation(string inputFile, string table)
{
    return GetDependentTablesAssociation(inputFile, table, HostResolvePath);
}
public static IEnumerable<XElement> GetDependentTablesAssociation(string inputFile, string table, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    foreach (var association in runtime.Element(XName.Get("StorageModels", edm_ns)).Element(XName.Get("Schema", ssdl_ns)).Elements(XName.Get("Association", ssdl_ns)))
    {
        XElement end;
        if ((end = association.Elements(XName.Get("End", ssdl_ns)).FirstOrDefault(r => r.Attribute("Type").Value.EndsWith("." + table))) != null && end.Attribute("Role").Value == association.Element(XName.Get("ReferentialConstraint", ssdl_ns)).Element(XName.Get("Principal", ssdl_ns)).Attribute("Role").Value)
            yield return association;
    }
}

public IEnumerable<XElement> GetDependentTablesAssociation(string inputFile, List<string> tables, string table)
{
    return GetDependentTablesAssociation(inputFile, tables, table, HostResolvePath);
}
public static IEnumerable<XElement> GetDependentTablesAssociation(string inputFile, List<string> tables, string table, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    foreach (var association in runtime.Element(XName.Get("StorageModels", edm_ns)).Element(XName.Get("Schema", ssdl_ns)).Elements(XName.Get("Association", ssdl_ns)))
    {
        XElement end;
        if ((end = association.Elements(XName.Get("End", ssdl_ns)).FirstOrDefault(e => e.Attribute("Type").Value.EndsWith("." + table))) != null && end.Attribute("Role").Value == association.Element(XName.Get("ReferentialConstraint", ssdl_ns)).Element(XName.Get("Principal", ssdl_ns)).Attribute("Role").Value && tables.Contains(Regex.Match(association.Elements(XName.Get("End", ssdl_ns)).First(e => e != end).Attribute("Type").Value, "[^.]+$").Value))
            yield return association;
    }
}

public IEnumerable<string> TableWithoutPrincipal(string inputFile, List<string> tables)
{
    return TableWithoutPrincipal(inputFile, tables, HostResolvePath);
}
public static IEnumerable<string> TableWithoutPrincipal(string inputFile, List<string> tables, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    return tables.Where(table => ! runtime.Element(XName.Get("StorageModels", edm_ns)).Element(XName.Get("Schema", ssdl_ns)).Elements(XName.Get("Association", ssdl_ns)).Any(association => 
    {
        XElement end;
        return (end = association.Elements(XName.Get("End", ssdl_ns)).FirstOrDefault(e => e.Attribute("Type").Value.EndsWith("." + table))) != null && end.Attribute("Role").Value == association.Element(XName.Get("ReferentialConstraint", ssdl_ns)).Element(XName.Get("Dependent", ssdl_ns)).Attribute("Role").Value && tables.Contains(Regex.Match(association.Elements(XName.Get("End", ssdl_ns)).First(e => e != end).Attribute("Type").Value, "[^.]+$").Value);
    }));
}

public string GetMappedColumn(string inputFile, EntityType entityType, string table, EdmMember prop)
{
    return GetMappedColumn(inputFile, entityType, table, prop, HostResolvePath);
}
public static string GetMappedColumn(string inputFile, EntityType entityType, string table, EdmMember prop, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string msl_ns = GetMSL_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    if (entityType != null)
    {
        var entityTypeMapping = runtime.Element(XName.Get("Mappings", edm_ns)).Element(XName.Get("Mapping", msl_ns)).Descendants(XName.Get("EntityTypeMapping", msl_ns)).FirstOrDefault(etm => Regex.IsMatch(etm.Attribute("TypeName").Value, string.Concat(@"^(?:IsTypeOf\()?", entityType.NamespaceName, ".", entityType.Name, @"(?:\))?$")));
        if (entityTypeMapping == null)
            return null;
        var storeEntitySetMapping = entityTypeMapping.Elements(XName.Get("MappingFragment", msl_ns)).FirstOrDefault(mf => mf.Attribute("StoreEntitySet").Value == table);
        if (storeEntitySetMapping == null)
        { 
            if (entityType.BaseType == null)
                return null;
            return GetMappedColumn(inputFile, (EntityType)entityType.BaseType, table, prop, hostResolvePath);
        }
        return storeEntitySetMapping.Elements(XName.Get("ScalarProperty", msl_ns)).First(sp => sp.Attribute("Name").Value == prop.Name).Attribute("ColumnName").Value;
    }
    return null;
}

public bool IsHorizontalEntitySplittingCondition(string inputFile, EntityType entityType, EdmMember prop)
{
    return IsHorizontalEntitySplittingCondition(inputFile, entityType, prop, HostResolvePath);
}
public void GetEdmxRuntimeAndEDMAndMSLNamespaces(string inputFile, out string edm_ns, out string msl_ns, out XElement runtime)
{
    GetEdmxRuntimeAndEDMAndMSLNamespaces(inputFile, HostResolvePath, out edm_ns, out msl_ns, out runtime);
}
public static void GetEdmxRuntimeAndEDMAndMSLNamespaces(string inputFile, Func<string, string> hostResolvePath, out string edm_ns, out string msl_ns, out XElement runtime)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    edm_ns = GetEDM_NS(root);
    msl_ns = GetMSL_NS(root);
    runtime = root.Element(XName.Get("Runtime", edm_ns));
}
public static bool IsHorizontalEntitySplittingCondition(string inputFile, EntityType entityType, EdmMember prop, Func<string, string> hostResolvePath)
{
    string edm_ns, msl_ns;
    XElement runtime;
    GetEdmxRuntimeAndEDMAndMSLNamespaces(inputFile, hostResolvePath, out edm_ns, out msl_ns, out runtime);
    return IsHorizontalEntitySplittingCondition(inputFile, entityType, prop, edm_ns, msl_ns, runtime);
}
public static bool IsHorizontalEntitySplittingCondition(string inputFile, EntityType entityType, EdmMember prop, string edm_ns, string msl_ns, XElement runtime)
{
    for (var entityTypeLoop = entityType ; entityTypeLoop != null ; entityTypeLoop = (EntityType)entityTypeLoop.BaseType)
    {
        var entityTypeMapping = runtime.Element(XName.Get("Mappings", edm_ns)).Element(XName.Get("Mapping", msl_ns)).Descendants(XName.Get("EntityTypeMapping", msl_ns)).FirstOrDefault(etm => Regex.IsMatch(etm.Attribute("TypeName").Value, string.Concat(@"^(?:IsTypeOf\()?", entityType.NamespaceName, ".", entityType.Name, @"(?:\))?$")));
        if (entityTypeMapping == null)
            return false;
        if (entityTypeMapping.Elements(XName.Get("MappingFragment", msl_ns)).Any(mf => mf.Elements(XName.Get("Condition", msl_ns)).Any(c => 
            {
                var nameAttribute = c.Attribute("Name");
                if (nameAttribute == null)
                    return false;
                if (nameAttribute.Value == prop.Name)
                    return true;
                return false;
            })))
            return true;
    }
    return false;
}

public static void GetNavigationPropertyReferentialConstraintsEnumerables(NavigationProperty navigationProperty, out IEnumerable<EdmProperty> fromEnumerable, out IEnumerable<EdmProperty> toEnumerable)
{
    ReferentialConstraint referentialConstraint;
    GetNavigationPropertyReferentialConstraintsEnumerables(navigationProperty, out referentialConstraint, out fromEnumerable, out toEnumerable);
}
public static void GetNavigationPropertyReferentialConstraintsEnumerables(NavigationProperty navigationProperty, out ReferentialConstraint referentialConstraint, out IEnumerable<EdmProperty> fromEnumerable, out IEnumerable<EdmProperty> toEnumerable)
{
    var association = (AssociationType)navigationProperty.RelationshipType;
    referentialConstraint = association.ReferentialConstraints.FirstOrDefault();
    if (referentialConstraint != null)
    {
        if (navigationProperty.FromEndMember == referentialConstraint.FromRole)
        {
            fromEnumerable = referentialConstraint.FromProperties;
            toEnumerable = referentialConstraint.ToProperties; 
        }
        else
        {
            fromEnumerable = referentialConstraint.ToProperties;
            toEnumerable = referentialConstraint.FromProperties; 
        }
        return;
    }
    fromEnumerable = new EdmProperty[0];
    toEnumerable = new EdmProperty[0];
}

public static void GetNavigationPropertyReferentialConstraintsEnumerators(NavigationProperty navigationProperty, out IEnumerator<EdmProperty> fromEnumerator, out IEnumerator<EdmProperty> toEnumerator)
{
    ReferentialConstraint referentialConstraint;
    GetNavigationPropertyReferentialConstraintsEnumerators(navigationProperty, out referentialConstraint, out fromEnumerator, out toEnumerator);
}
public static void GetNavigationPropertyReferentialConstraintsEnumerators(NavigationProperty navigationProperty, out ReferentialConstraint referentialConstraint, out IEnumerator<EdmProperty> fromEnumerator, out IEnumerator<EdmProperty> toEnumerator)
{
    IEnumerable<EdmProperty> fromEnumerable, toEnumerable;
    GetNavigationPropertyReferentialConstraintsEnumerables(navigationProperty, out referentialConstraint, out fromEnumerable, out toEnumerable);
    fromEnumerator = fromEnumerable.GetEnumerator();
    toEnumerator = toEnumerable.GetEnumerator();
}

public static  bool IsStruct(EdmProperty property)
{
    return IsStruct(property.TypeUsage);
}
public static bool IsStruct(TypeUsage type)
{
    switch (type.ToString())
    {
        case "Edm.Byte":
        case "Edm.DateTime":
        case "Edm.DateTimeOffset":
        case "Edm.Time":
        case "Edm.Decimal":
        case "Edm.Double":
        case "Edm.Single":
        case "Edm.Int16":
        case "Edm.Int32":
        case "Edm.Int64":
        case "Edm.SByte":
            return true;
    }
    return false;
}

public static IEnumerable<Tuple<string, string>> GetKeysProperties(CodeGenerationTools code, EntityType entityType, int? index = null)
{
    foreach (var km in entityType.KeyMembers)
    {
        string typeName = code.Escape(km.TypeUsage);
        string key = string.Concat(code.Escape(entityType), index, code.Escape(km));
        yield return new Tuple<string, string>(typeName, key);
    }
} 

public bool HasPublicManyToManyRelationship(EdmxElements edmxElements)
{
    return edmxElements.EntityTypes.Any(e => IsPublic(e) && e.NavigationProperties.Any(np => IsPublic(np) && IsPublic(np) && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many));
}

public IEnumerable<string> WriteKeysTypes(EdmxElements edmxElements, EntityFrameworkTemplateFileManager fileManager, string entitiesNamespace, string edmxName, string relativePath)
{
    fileManager.StartNewFile("Includes.tt");
    string beginTag = "<" + "#";
    string endTag = "#" + ">";
    var edmxUtilityTTIncludeNameValue = edmxUtilityTTIncludeName;
    if (! string.IsNullOrEmpty(relativePath))
        edmxUtilityTTIncludeNameValue = Regex.Replace(edmxUtilityTTIncludeName, @"^((.?)*)\.ttinclude$", m => string.Concat(relativePath, m.Groups[1].Value, ".merge.ttinclude"));
#>
<#="<" + "#@"#> template language="C#" hostspecific="true"<#=endTag#>
<#="<" + "#@"#> include file="<#=edmxUtilityTTIncludeNameValue#>"<#=endTag#>
<#="<" + "#@"#> output extension=".txt"<#=endTag#>
<#=beginTag#>var fileManager = EntityFrameworkTemplateFileManager.Create(this);<#=endTag#>
<#+
    var code = edmxElements.Code;
    var typeNames = new List<string>();
    string @namespace = edmxElements.NamespaceName + ".Query.Include";
    foreach (EntityType entityType in edmxElements.EntityTypes.Where(e => IsPublic(e)))
    {
        string entityTypeName = code.Escape(entityType);
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np) && IsPublic(np) && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
        {
            var typeNameSB = new StringBuilder();
            var properties = new List<Tuple<string, string>>();
            typeNameSB.Append("Include");
            foreach (var p in GetKeysProperties(code, entityType, 1).Union(GetKeysProperties(code, (EntityType)navigationProperty.ToEndMember.GetEntityType(), 2)))
            {
                typeNameSB.Append(p.Item2);
                properties.Add(p);
            }
            string typeName = typeNameSB.ToString();
            if (typeNames.Contains(typeName))
                continue;
            typeNames.Add(typeName);
#>
<#=beginTag#>fileManager.StartNewFile("<#=typeName#>.cs");<#=endTag#>
<#+
            WriteHeader(@namespace, code, "System", "System.Runtime.Serialization");
#>
[DataContract(Namespace = "http://<#=edmxName#>/QueryInclude")]
public class <#=typeName#>
{
<#+
            foreach (var p in properties)
            {
#>
    [DataMember]
    public <#=p.Item1#> <#=p.Item2#> { get; set; }

<#+
            }
#>
}
<#+
            WriteFooter(@namespace);
            yield return typeName;

            var fromProperties = GetKeysProperties(code, entityType).ToList();
            typeNameSB = new StringBuilder();
            typeNameSB.Append("Include");
            foreach (var p in fromProperties)
                typeNameSB.Append(p.Item2);
            typeNameSB.Append("To");
            var toTypeName = code.Escape(navigationProperty.ToEndMember.GetEntityType());
            typeNameSB.Append(toTypeName);
            typeName = typeNameSB.ToString();

#>
<#=beginTag#>fileManager.StartNewFile("<#=typeName + ".cs"#>");<#=endTag#>
<#+
            WriteHeader(@namespace, code, "System", "System.Runtime.Serialization");
#>
[DataContract(Namespace = "http://<#=edmxName#>/QueryInclude")]
public class <#=typeName#>
{
<#+
            foreach (var p in fromProperties)
            {
#>
    [DataMember]
    public <#=p.Item1#> <#=p.Item2#> { get; set; }

<#+
            }
#>
    [DataMember]
    public <#=entitiesNamespace#>.<#=toTypeName#> To { get; set; }
}
<#+
            WriteFooter(@namespace);
            yield return typeName;
        }
    }
#>
<#=beginTag#>fileManager.Process();<#=endTag#>
<#+
}

public static IEnumerable<string> GetKeysTypes(EdmxElements edmxElements)
{
    var code = edmxElements.Code;
    var typeNames = new List<string>();
    foreach (EntityType entityType in edmxElements.EntityTypes.Where(e => IsPublic(e)))
    {
        string entityTypeName = code.Escape(entityType);
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np) && IsPublic(np) && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
        {
            var typeNameSB = new StringBuilder();
            typeNameSB.Append("Include");
            foreach (var p in GetKeysProperties(code, entityType, 1).Union(GetKeysProperties(code, (EntityType)navigationProperty.ToEndMember.GetEntityType(), 2)))
                typeNameSB.Append(p.Item2);
            string typeName = typeNameSB.ToString();
            if (typeNames.Contains(typeName))
                continue;
            typeNames.Add(typeName);
            yield return typeName;

            var fromProperties = GetKeysProperties(code, entityType).ToList();
            typeNameSB = new StringBuilder();
            typeNameSB.Append("Include");
            foreach (var p in fromProperties)
                typeNameSB.Append(p.Item2);
            typeNameSB.Append("To");
            var toTypeName = code.Escape(navigationProperty.ToEndMember.GetEntityType());
            typeNameSB.Append(toTypeName);
            yield return typeNameSB.ToString();
        }
    }
}

public static class EdmxChanges
{
    public static bool EdmxApplyChanges(string edmxPath, XElement edmx)
    {
        if (File.Exists(edmxPath + ".changes.xml"))
        {
            var changes = XElement.Load(edmxPath + ".changes.xml");
            ApplyChanges(edmx, changes);
            return true;
        }
        return false;
    }

    private static void ApplyChanges(XElement original, XElement change)
    {
        if (original.Name != change.Name || original.Attribute("Name") != null && original.Attribute("Name").Value != change.Attribute("Name").Value)
            throw new NotImplementedException();
        foreach (var addedAttribute in change.Attributes())
        {
            XAttribute originalAttribute = original.Attribute(addedAttribute.Name);
            if (originalAttribute == null)
                original.Add(addedAttribute);
            else
                originalAttribute.Value = addedAttribute.Value;
        }
        foreach (var changesChild in change.Elements())
        {
            var originalChild = original.Elements().FirstOrDefault(o => o.Name == changesChild.Name && (o.Attribute("Name") == null || o.Attribute("Name").Value == changesChild.Attribute("Name").Value));
            if (originalChild == null)
            {
                switch (changesChild.Name.LocalName)
                {
                    case "add":
                        foreach (var changesSubChild in changesChild.Elements())
                            original.Add(changesSubChild);
                        break;
                    case "remove":
                        foreach (var changesSubChild in changesChild.Elements())
                        {
                            originalChild = original.Elements().First(o => o.Name == changesSubChild.Name && (o.Attribute("Name") == null || o.Attribute("Name").Value == changesSubChild.Attribute("Name").Value));
                            originalChild.Remove();
                        }
                        break;
                    case "replace":
                        foreach (var changesSubChild in changesChild.Elements())
                        {
                            originalChild = original.Elements().First(o => o.Name == changesSubChild.Name && (o.Attribute("Name") == null || o.Attribute("Name").Value == changesSubChild.Attribute("Name").Value));
                            originalChild.Remove();
                            original.Add(changesSubChild);
                        }
                        break;
                    default:
                        throw new NotImplementedException();
                }
            }
            else
            {
                ApplyChanges(originalChild, changesChild);
            }
        }
    }
}

void TestKeys(CodeGenerationTools code, EntityType entityType, string e1, string e2, string prefix1 = null, string prefix2 = null)
{
    var keysEnumerator = entityType.KeyMembers.GetEnumerator();
    keysEnumerator.MoveNext();
    for(;;)
    {
        string key = code.Escape(keysEnumerator.Current);
#><#=e1#>.<#=prefix1 ?? ""#><#=key#> == <#=e2#>.<#=prefix2 ?? ""#><#=key#><#+
        if (keysEnumerator.MoveNext())
        {
#> && <#+
        }
        else
            break;		
    }
}


void WriteIncludeTypeKeys(CodeGenerationTools code, EntityType entityType, NavigationProperty navigationProperty)
{
    var entityTypeName = code.Escape(entityType);
    foreach (var km in entityType.KeyMembers)
    {
#><#=entityTypeName#>1<#=code.Escape(km)#><#+
    }
    var toEntityType = navigationProperty.ToEndMember.GetEntityType();
    var toEntityTypeName = code.Escape(toEntityType);
    foreach (var km in toEntityType.KeyMembers)
    {
#><#=toEntityTypeName#>2<#=code.Escape(km)#><#+
    }
}

void WriteIncludeTo(CodeGenerationTools code, EntityType entityType, NavigationProperty navigationProperty)
{
    var entityTypeName = code.Escape(entityType);
    foreach (var km in entityType.KeyMembers)
    {
#><#=entityTypeName#><#=code.Escape(km)#><#+
    }
#>To<#=code.Escape(navigationProperty.ToEndMember.GetEntityType())#><#+
}

void InitKeys(CodeGenerationTools code, EntityType entityType, string e, int? index = null, string prefixName = null)
{
    var keysEnumerator = entityType.KeyMembers.GetEnumerator();
    keysEnumerator.MoveNext();
    for(;;)
    {
        string key = code.Escape(keysEnumerator.Current);
#><#=prefixName ?? ""#><#=index == null ? "" : index.Value.ToString()#><#=key#> = <#=e#>.<#=key#><#+
        if (keysEnumerator.MoveNext())
        {
#>, <#+
        }
        else
            break;		
    }
}

void TestNavigationKeys(CodeGenerationTools code, NavigationProperty navigationProperty, string e1 = "e1", string e2 = "e2")
{
    IEnumerator<EdmProperty> fromEnumerator, toEnumerator;
    ReferentialConstraint referentialConstraint;
    GetNavigationPropertyReferentialConstraintsEnumerators(navigationProperty, out referentialConstraint, out fromEnumerator, out toEnumerator);
    if (referentialConstraint != null)
    {
        bool hasNext = fromEnumerator.MoveNext() & toEnumerator.MoveNext(); 
        while (hasNext)
        {
#><#=e1#>.<#=fromEnumerator.Current#> == <#=e2#>.<#=toEnumerator.Current#><#+
            hasNext = fromEnumerator.MoveNext() & toEnumerator.MoveNext(); 
            if (! hasNext)
                break;
#> && <#+
        }
    }
}
#>
<#+// Copyright (c) Microsoft Corporation.  All rights reserved.

public static Dictionary<string, string> TemplateMetadata = new Dictionary<string, string>();

/// <summary>
/// Responsible for helping to create source code that is
/// correctly formated and functional
/// </summary>
public class CodeGenerationTools
{
	private readonly DynamicTextTransformation _textTransformation;
	private readonly CSharpCodeProvider _code;
	private readonly MetadataTools _ef;

	private CodeGenerationTools()
	{
	}

	/// <summary>
	/// Initializes a new CodeGenerationTools object with the TextTransformation (T4 generated class)
	/// that is currently running
	/// </summary>
	public CodeGenerationTools(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
		_code = new CSharpCodeProvider();
		_ef = new MetadataTools(_textTransformation);
		FullyQualifySystemTypes = false;
		CamelCaseFields = true;
	}

	/// <summary>
	/// When true, all types that are not being generated
	/// are fully qualified to keep them from conflicting with
	/// types that are being generated. Useful when you have
	/// something like a type being generated named System.
	///
	/// Default is false.
	/// </summary>
	public bool FullyQualifySystemTypes { get; set; }

	/// <summary>
	/// When true, the field names are Camel Cased,
	/// otherwise they will preserve the case they
	/// start with.
	///
	/// Default is true.
	/// </summary>
	public bool CamelCaseFields { get; set; }

	/// <summary>
	/// Returns the NamespaceName suggested by VS if running inside VS.  Otherwise, returns
	/// null.
	/// </summary>
	public string VsNamespaceSuggestion()
	{
		string suggestion = _textTransformation.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
		if (String.IsNullOrEmpty(suggestion))
		{
			return null;
		}

		return suggestion;
	}

	/// <summary>
	/// Returns a string that is safe for use as an identifier in C#.
	/// Keywords are escaped.
	/// </summary>
	public string Escape(string name)
	{
		if (name == null)
		{
			return null;
		}

		return _code.CreateEscapedIdentifier(name);
	}

	/// <summary>
	/// Returns the name of the TypeUsage's EdmType that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(TypeUsage typeUsage)
	{
		if (typeUsage == null)
		{
			return null;
		}

		if (typeUsage.EdmType is ComplexType ||
			typeUsage.EdmType is EntityType)
		{
			return Escape(typeUsage.EdmType.Name);
		}
		else if (typeUsage.EdmType is SimpleType)
		{
			Type clrType = _ef.UnderlyingClrType(typeUsage.EdmType);
			string typeName = typeUsage.EdmType is EnumType ? Escape(typeUsage.EdmType.Name) : Escape(clrType);
			if (clrType.IsValueType && _ef.IsNullable(typeUsage))
			{
				return String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName);
			}

			return typeName;
		}
		else if (typeUsage.EdmType is CollectionType)
		{
			return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", Escape(((CollectionType)typeUsage.EdmType).TypeUsage));
		}

		throw new ArgumentException("typeUsage");
	}

	/// <summary>
	/// Returns the name of the EdmMember that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		return Escape(member.Name);
	}

	/// <summary>
	/// Returns the name of the EdmType that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EdmType type)
	{
		if (type == null)
		{
			return null;
		}

		return Escape(type.Name);
	}

	/// <summary>
	/// Returns the name of the EdmFunction that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EdmFunction function)
	{
		if (function == null)
		{
			return null;
		}

		return Escape(function.Name);
	}

	/// <summary>
	/// Returns the name of the EnumMember that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EnumMember member)
	{
		if (member == null)
		{
			return null;
		}

		return Escape(member.Name);
	}

	/// <summary>
	/// Returns the name of the EntityContainer that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EntityContainer container)
	{
		if (container == null)
		{
			return null;
		}

		return Escape(container.Name);
	}

	/// <summary>
	/// Returns the name of the EntitySet that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EntitySet set)
	{
		if (set == null)
		{
			return null;
		}

		return Escape(set.Name);
	}

	/// <summary>
	/// Returns the name of the StructuralType that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(StructuralType type)
	{
		if (type == null)
		{
			return null;
		}

		return Escape(type.Name);
	}

	/// <summary>
	/// Returns the NamespaceName with each segment safe to
	/// use as an identifier.
	/// </summary>
	public string EscapeNamespace(string namespaceName)
	{
		if (String.IsNullOrEmpty(namespaceName))
		{
			return namespaceName;
		}

		string[] parts = namespaceName.Split('.');
		namespaceName = String.Empty;
		foreach (string part in parts)
		{
			if (namespaceName != String.Empty)
			{
				namespaceName += ".";
			}

			namespaceName += Escape(part);
		}

		return namespaceName;
	}

	/// <summary>
	/// Returns the name of the EdmMember formatted for
	/// use as a field identifier.
	///
	/// This method changes behavior based on the CamelCaseFields
	/// setting.
	/// </summary>
	public string FieldName(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		return FieldName(member.Name);
	}

	/// <summary>
	/// Returns the name of the EntitySet formatted for
	/// use as a field identifier.
	///
	/// This method changes behavior based on the CamelCaseFields
	/// setting.
	/// </summary>
	public string FieldName(EntitySet set)
	{
		if (set == null)
		{
			return null;
		}

		return FieldName(set.Name);

	}

	private string FieldName(string name)
	{
		if (CamelCaseFields)
		{
			return "_" + CamelCase(name);
		}
		else
		{
			return "_" + name;
		}
	}

	/// <summary>
	/// Returns the name of the Type object formatted for
	/// use in source code.
	///
	/// This method changes behavior based on the FullyQualifySystemTypes
	/// setting.
	/// </summary>
	public string Escape(Type clrType)
	{
		return Escape(clrType, FullyQualifySystemTypes);
	}

	/// <summary>
	/// Returns the name of the Type object formatted for
	/// use in source code.
	/// </summary>
	public string Escape(Type clrType, bool fullyQualifySystemTypes)
	{
		if(clrType == null)
		{
			return null;
		}

		string typeName;
		if (fullyQualifySystemTypes)
		{
			typeName = "global::" + clrType.FullName;
		}
		else
		{
			typeName = _code.GetTypeOutput(new CodeTypeReference(clrType));
		}
		return typeName;
	}

	/// <summary>
	/// Returns the abstract option if the entity is Abstract, otherwise returns String.Empty
	/// </summary>
	public string AbstractOption(EntityType entity)
	{
		if (entity.Abstract)
		{
			return "abstract";
		}
		return String.Empty;
	}

	/// <summary>
	/// Returns the passed in identifier with the first letter changed to lowercase
	/// </summary>
	public string CamelCase(string identifier)
	{
		if (String.IsNullOrEmpty(identifier))
		{
			return identifier;
		}

		if (identifier.Length == 1)
		{
			return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant();
		}

		return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1);
	}

	/// <summary>
	/// If the value parameter is null or empty an empty string is returned,
	/// otherwise it retuns value with a single space concatenated on the end.
	/// </summary>
	public string SpaceAfter(string value)
	{
		return StringAfter(value, " ");
	}

	/// <summary>
	/// If the value parameter is null or empty an empty string is returned,
	/// otherwise it retuns value with a single space concatenated on the end.
	/// </summary>
	public string SpaceBefore(string value)
	{
		return StringBefore(" ", value);
	}

	/// <summary>
	/// If the value parameter is null or empty an empty string is returned,
	/// otherwise it retuns value with append concatenated on the end.
	/// </summary>
	public string StringAfter(string value, string append)
	{
		if (String.IsNullOrEmpty(value))
		{
			return String.Empty;
		}

			return value + append;
	}

	/// <summary>
	/// If the value parameter is null or empty an empty string is returned,
	/// otherwise it retuns value with prepend concatenated on the front.
	/// </summary>
	public string StringBefore(string prepend, string value)
	{
		if (String.IsNullOrEmpty(value))
		{
			return String.Empty;
		}

		return prepend + value;
	}

	/// <summary>
	/// Returns false and shows an error if the supplied type names aren't case-insensitively unique,
	/// otherwise returns true.
	/// </summary>
	public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
	{
		return VerifyCaseInsensitiveUniqueness(types, t => string.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"), t), sourceFile);
	}

	/// <summary>
	/// Returns false and shows an error if the supplied strings aren't case-insensitively unique,
	/// otherwise returns true.
	/// </summary>
	private bool VerifyCaseInsensitiveUniqueness(IEnumerable<string> items, Func<string, string> formatMessage, string sourceFile)
	{
		HashSet<string> hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
		foreach (string item in items)
		{
			if (!hash.Add(item))
			{
				_textTransformation.Errors.Add(new System.CodeDom.Compiler.CompilerError(sourceFile, -1, -1, "6023", formatMessage(item)));
				return false;
			}
		}
		return true;
	}

	/// <summary>
	/// Returns the names of the items in the supplied collection that correspond to O-Space types.
	/// </summary>
	public IEnumerable<string> GetAllGlobalItems(EdmItemCollection itemCollection)
	{
		return itemCollection.GetItems<GlobalItem>().Where(i => i is EntityType || i is ComplexType || i is EnumType || i is EntityContainer).Select(g => GetGlobalItemName(g));
	}

	/// <summary>
	/// Returns the name of the supplied GlobalItem.
	/// </summary>
	public string GetGlobalItemName(GlobalItem item)
	{
		if (item is EdmType)
		{
			return ((EdmType)item).Name;
		}
		else
		{
			return ((EntityContainer)item).Name;
		}
	}

	/// <summary>
	/// Retuns as full of a name as possible, if a namespace is provided
	/// the namespace and name are combined with a period, otherwise just
	/// the name is returned.
	/// </summary>
	public string CreateFullName(string namespaceName, string name)
	{
		if (String.IsNullOrEmpty(namespaceName))
		{
			return name;
		}

		return namespaceName + "." + name;
	}

	/// <summary>
	/// Retuns a literal representing the supplied value.
	/// </summary>
	public string CreateLiteral(object value)
	{
		if (value == null)
		{
			return string.Empty;
		}

		Type type = value.GetType();
		if (type.IsEnum)
		{
			return type.FullName + "." + value.ToString();
		}
		if (type == typeof(Guid))
		{
			return string.Format(CultureInfo.InvariantCulture, "new Guid(\"{0}\")",
								 ((Guid)value).ToString("D", CultureInfo.InvariantCulture));
		}
		else if (type == typeof(DateTime))
		{
			return string.Format(CultureInfo.InvariantCulture, "new DateTime({0}, DateTimeKind.Unspecified)",
								 ((DateTime)value).Ticks);
		}
		else if (type == typeof(byte[]))
		{
			var arrayInit = string.Join(", ", ((byte[])value).Select(b => b.ToString(CultureInfo.InvariantCulture)).ToArray());
			return string.Format(CultureInfo.InvariantCulture, "new Byte[] {{{0}}}", arrayInit);
		}
		else if (type == typeof(DateTimeOffset))
		{
			var dto = (DateTimeOffset)value;
			return string.Format(CultureInfo.InvariantCulture, "new DateTimeOffset({0}, new TimeSpan({1}))",
								 dto.Ticks, dto.Offset.Ticks);
		}
		else if (type == typeof(TimeSpan))
		{
			return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})",
								 ((TimeSpan)value).Ticks);
		}

		var expression = new CodePrimitiveExpression(value);
		var writer = new StringWriter();
		CSharpCodeProvider code = new CSharpCodeProvider();
		code.GenerateCodeFromExpression(expression, writer, new CodeGeneratorOptions());
		return writer.ToString();
	}

	/// <summary>
	/// Returns a resource string from the System.Data.Entity.Design assembly.
	/// </summary>
	public static string GetResourceString(string resourceName, CultureInfo culture = null)
	{
		if(_resourceManager == null)
		{
			_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design",
				typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
		}

		return _resourceManager.GetString(resourceName, culture);
	}
	static System.Resources.ResourceManager _resourceManager;

	private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

	/// <summary>
	/// Gets the entity, complex, or enum types for which code should be generated from the given item collection.
	/// Any types for which an ExternalTypeName annotation has been applied in the conceptual model
	/// metadata (CSDL) are filtered out of the returned list.
	/// </summary>
	/// <typeparam name="T">The type of item to return.</typeparam>
	/// <param name="itemCollection">The item collection to look in.</param>
	/// <returns>The items to generate.</returns>
	public IEnumerable<T> GetItemsToGenerate<T>(ItemCollection itemCollection) where T: GlobalItem
	{
		return itemCollection.GetItems<T>().Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName));
	}

	/// <summary>
	/// Returns the escaped type name to use for the given usage of a c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="typeUsage">The c-space type usage to get a name for.</param>
	/// <returns>The type name to use.</returns>
	public string GetTypeName(TypeUsage typeUsage)
	{
		return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
	}

	/// <summary>
	/// Returns the escaped type name to use for the given c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="edmType">The c-space type to get a name for.</param>
	/// <returns>The type name to use.</returns>
	public string GetTypeName(EdmType edmType)
	{
		return GetTypeName(edmType, isNullable: null, modelNamespace: null);
	}

	/// <summary>
	/// Returns the escaped type name to use for the given usage of an c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="typeUsage">The c-space type usage to get a name for.</param>
	/// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
	/// fully qualified name will be returned.</param>
	/// <returns>The type name to use.</returns>
	public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
	{
		return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
	}

	/// <summary>
	/// Returns the escaped type name to use for the given c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="edmType">The c-space type to get a name for.</param>
	/// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
	/// fully qualified name will be returned.</param>
	/// <returns>The type name to use.</returns>
	public string GetTypeName(EdmType edmType, string modelNamespace)
	{
		return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
	}

	/// <summary>
	/// Returns the escaped type name to use for the given c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="edmType">The c-space type to get a name for.</param>
	/// <param name="isNullable">Set this to true for nullable usage of this type.</param>
	/// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
	/// fully qualified name will be returned.</param>
	/// <returns>The type name to use.</returns>
	private string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
	{
		if (edmType == null)
		{
			return null;
		}

		var collectionType = edmType as CollectionType;
		if (collectionType != null)
		{
			return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
		}

		// Try to get an external type name, and if that is null, then try to get escape the name from metadata,
		// possibly namespace-qualifying it.
		var typeName = Escape(edmType.MetadataProperties
							  .Where(p => p.Name == ExternalTypeNameAttributeName)
							  .Select(p => (string)p.Value)
							  .FirstOrDefault())
			??
			(modelNamespace != null && edmType.NamespaceName != modelNamespace ?
			 CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)) :
			 Escape(edmType));

		if (edmType is StructuralType)
		{
			return typeName;
		}

		if (edmType is SimpleType)
		{
			var clrType = _ef.UnderlyingClrType(edmType);
			if (!(edmType is EnumType))
			{
				typeName = Escape(clrType);
			}

			return clrType.IsValueType && isNullable == true ?
				String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
				typeName;
		}

		throw new ArgumentException("typeUsage");
	}
}

/// <summary>
/// Responsible for making the Entity Framework Metadata more
/// accessible for code generation.
/// </summary>
public class MetadataTools
{
	private readonly DynamicTextTransformation _textTransformation;

	private MetadataTools()
	{
	}

	/// <summary>
	/// Initializes an MetadataTools Instance  with the
	/// TextTransformation (T4 generated class) that is currently running
	/// </summary>
	public MetadataTools(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
	}

	/// <summary>
	/// This method returns the underlying CLR type of the o-space type corresponding to the supplied <paramref name="typeUsage"/>
	/// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
	/// </summary>
	public Type ClrType(TypeUsage typeUsage)
	{
		return UnderlyingClrType(typeUsage.EdmType);
	}

	/// <summary>
	/// This method returns the underlying CLR type given the c-space type.
	/// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
	/// </summary>
	public Type UnderlyingClrType(EdmType edmType)
	{
		var primitiveType = edmType as PrimitiveType;
		if (primitiveType != null)
		{
			return primitiveType.ClrEquivalentType;
		}

		var enumType = edmType as EnumType;
		if (enumType != null)
		{
			return enumType.UnderlyingType.ClrEquivalentType;
		}

		return typeof(object);
	}

	/// <summary>
	/// True if the EdmProperty is a key of its DeclaringType, False otherwise.
	/// </summary>
	public bool IsKey(EdmProperty property)
	{
		if (property != null && property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
		{
			return ((EntityType)property.DeclaringType).KeyMembers.Contains(property);
		}

		return false;
	}

	/// <summary>
	/// True if the EdmProperty TypeUsage is Nullable, False otherwise.
	/// </summary>
	public bool IsNullable(EdmProperty property)
	{
		return property != null && IsNullable(property.TypeUsage);
	}

	/// <summary>
	/// True if the TypeUsage is Nullable, False otherwise.
	/// </summary>
	public bool IsNullable(TypeUsage typeUsage)
	{
		Facet nullableFacet = null;
		if (typeUsage != null &&
			typeUsage.Facets.TryGetValue("Nullable", true, out nullableFacet))
		{
			return (bool)nullableFacet.Value;
		}

		return false;
	}

	/// <summary>
	/// If the passed in TypeUsage represents a collection this method returns final element
	/// type of the collection, otherwise it returns the value passed in.
	/// </summary>
	public TypeUsage GetElementType(TypeUsage typeUsage)
	{
		if (typeUsage == null)
		{
			return null;
		}

		if (typeUsage.EdmType is CollectionType)
		{
			return GetElementType(((CollectionType)typeUsage.EdmType).TypeUsage);
		}
		else
		{
			return typeUsage;
		}
	}

	/// <summary>
	/// Returns the NavigationProperty that is the other end of the same association set if it is
	/// available, otherwise it returns null.
	/// </summary>
	public NavigationProperty Inverse(NavigationProperty navProperty)
	{
		if(navProperty == null)
		{
			return null;
		}

		EntityType toEntity = navProperty.ToEndMember.GetEntityType();
		return toEntity.NavigationProperties
			.SingleOrDefault(n => Object.ReferenceEquals(n.RelationshipType, navProperty.RelationshipType) && !Object.ReferenceEquals(n, navProperty));
	}

	/// <summary>
	/// Given a property on the dependent end of a referential constraint, returns the corresponding property on the principal end.
	/// Requires: The association has a referential constraint, and the specified dependentProperty is one of the properties on the dependent end.
	/// </summary>
	public EdmProperty GetCorrespondingPrincipalProperty(NavigationProperty navProperty, EdmProperty dependentProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		if (dependentProperty == null)
		{
			throw new ArgumentNullException("dependentProperty");
		}

		ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
		ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
		return fromProperties[toProperties.IndexOf(dependentProperty)];
	}

	/// <summary>
	/// Given a property on the principal end of a referential constraint, returns the corresponding property on the dependent end.
	/// Requires: The association has a referential constraint, and the specified principalProperty is one of the properties on the principal end.
	/// </summary>
	public EdmProperty GetCorrespondingDependentProperty(NavigationProperty navProperty, EdmProperty principalProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		if (principalProperty == null)
		{
			throw new ArgumentNullException("principalProperty");
		}

		ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
		ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
		return toProperties[fromProperties.IndexOf(principalProperty)];
	}

	/// <summary>
	/// Gets the collection of properties that are on the principal end of a referential constraint for the specified navigation property.
	/// Requires: The association has a referential constraint.
	/// </summary>
	public ReadOnlyMetadataCollection<EdmProperty> GetPrincipalProperties(NavigationProperty navProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].FromProperties;
	}

	/// <summary>
	/// Gets the collection of properties that are on the dependent end of a referential constraint for the specified navigation property.
	/// Requires: The association has a referential constraint.
	/// </summary>
	public ReadOnlyMetadataCollection<EdmProperty> GetDependentProperties(NavigationProperty navProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].ToProperties;
	}

	/// <summary>
	/// True if this entity type requires the HandleCascadeDelete method defined and the method has
	/// not been defined on any base type
	/// </summary>
	public bool NeedsHandleCascadeDeleteMethod(ItemCollection itemCollection, EntityType entity)
	{
		bool needsMethod = ContainsCascadeDeleteAssociation(itemCollection, entity);
		// Check to make sure no base types have already declared this method
		EntityType baseType = entity.BaseType as EntityType;
		while(needsMethod && baseType != null)
		{
			needsMethod = !ContainsCascadeDeleteAssociation(itemCollection, baseType);
			baseType = baseType.BaseType as EntityType;
		}
		return needsMethod;
	}

	/// <summary>
	/// True if this entity type participates in any relationships where the other end has an OnDelete
	/// cascade delete defined, or if it is the dependent in any identifying relationships
	/// </summary>
	private bool ContainsCascadeDeleteAssociation(ItemCollection itemCollection, EntityType entity)
	{
		return itemCollection.GetItems<AssociationType>().Where(a =>
				((RefType)a.AssociationEndMembers[0].TypeUsage.EdmType).ElementType.Name == entity.Name && IsCascadeDeletePrincipal(a.AssociationEndMembers[1]) ||
				((RefType)a.AssociationEndMembers[1].TypeUsage.EdmType).ElementType.Name == entity.Name && IsCascadeDeletePrincipal(a.AssociationEndMembers[0])).Any();
	}

	/// <summary>
	/// True if the source end of the specified navigation property is the principal in an identifying relationship.
	/// or if the source end has cascade delete defined.
	/// </summary>
	public bool IsCascadeDeletePrincipal(NavigationProperty navProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		return IsCascadeDeletePrincipal((AssociationEndMember)navProperty.FromEndMember);
	}

	/// <summary>
	/// True if the specified association end is the principal in an identifying relationship.
	/// or if the association end has cascade delete defined.
	/// </summary>
	public bool IsCascadeDeletePrincipal(AssociationEndMember associationEnd)
	{
		if (associationEnd == null)
		{
			throw new ArgumentNullException("associationEnd");
		}

		return associationEnd.DeleteBehavior == OperationAction.Cascade || IsPrincipalEndOfIdentifyingRelationship(associationEnd);
	}

	/// <summary>
	/// True if the specified association end is the principal end in an identifying relationship.
	/// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
	/// </summary>
	public bool IsPrincipalEndOfIdentifyingRelationship(AssociationEndMember associationEnd)
	{
		if (associationEnd == null)
		{
			throw new ArgumentNullException("associationEnd");
		}

		ReferentialConstraint refConstraint = ((AssociationType)associationEnd.DeclaringType).ReferentialConstraints.Where(rc => rc.FromRole == associationEnd).SingleOrDefault();
		if (refConstraint != null)
		{
			EntityType entity = refConstraint.ToRole.GetEntityType();
			return !refConstraint.ToProperties.Where(tp => !entity.KeyMembers.Contains(tp)).Any();
		}
		return false;
	}

	/// <summary>
	/// True if the specified association type is an identifying relationship.
	/// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
	/// </summary>
	public bool IsIdentifyingRelationship(AssociationType association)
	{
		if (association == null)
		{
			throw new ArgumentNullException("association");
		}

		return IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[0]) || IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[1]);
	}

	/// <summary>
	/// requires: firstType is not null
	/// effects: if secondType is among the base types of the firstType, return true,
	/// otherwise returns false.
	/// when firstType is same as the secondType, return false.
	/// </summary>
	public bool IsSubtypeOf(EdmType firstType, EdmType secondType)
	{
		if (secondType == null)
		{
			return false;
		}

		// walk up firstType hierarchy list
		for (EdmType t = firstType.BaseType; t != null; t = t.BaseType)
		{
			if (t == secondType)
				return true;
		}
		return false;
	}

	/// <summary>
	/// Returns the subtype of the EntityType in the current itemCollection
	/// </summary>
	public IEnumerable<EntityType> GetSubtypesOf(EntityType type, ItemCollection itemCollection, bool includeAbstractTypes)
	{
		if (type != null)
		{
			IEnumerable<EntityType> typesInCollection = itemCollection.GetItems<EntityType>();
			foreach (EntityType typeInCollection in typesInCollection)
			{
				if (type.Equals(typeInCollection) == false && this.IsSubtypeOf(typeInCollection, type))
				{
					if ( includeAbstractTypes || !typeInCollection.Abstract)
					{
						yield return typeInCollection;
					}
			   }
			}
		}
	}

	public static bool TryGetStringMetadataPropertySetting(MetadataItem item, string propertyName, out string value)
	{
		value = null;
		MetadataProperty property = item.MetadataProperties.FirstOrDefault(p => p.Name == propertyName);
		if (property != null)
		{
			value = (string)property.Value;
		}
		return value != null;
	}
}

/// <summary>
/// Responsible for loading an EdmItemCollection from a .edmx file or .csdl files
/// </summary>
public class MetadataLoader
{
	private readonly DynamicTextTransformation _textTransformation;

	private MetadataLoader()
	{
	}

	/// <summary>
	/// Initializes an MetadataLoader Instance  with the
	/// TextTransformation (T4 generated class) that is currently running
	/// </summary>
	public MetadataLoader(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
	}

	/// <summary>
	/// Load the metadata for Edm, Store, and Mapping collections and register them
	/// with a new MetadataWorkspace, returns false if any of the parts can't be
	/// created, some of the ItemCollections may be registered and usable even if false is
	/// returned
	/// </summary>
	public bool TryLoadAllMetadata(string inputFile, out MetadataWorkspace metadataWorkspace)
	{
		metadataWorkspace = new MetadataWorkspace();

		EdmItemCollection edmItemCollection = CreateEdmItemCollection(inputFile);
		metadataWorkspace.RegisterItemCollection(edmItemCollection);

		StoreItemCollection storeItemCollection = null;
		if (TryCreateStoreItemCollection(inputFile, out storeItemCollection))
		{
			StorageMappingItemCollection storageMappingItemCollection = null;
			if (TryCreateStorageMappingItemCollection(inputFile, edmItemCollection, storeItemCollection, out storageMappingItemCollection))
			{
				metadataWorkspace.RegisterItemCollection(storeItemCollection);
				metadataWorkspace.RegisterItemCollection(storageMappingItemCollection);
				return true;
			}
		}

		return false;
	}

	/// <summary>
	/// Create an EdmItemCollection loaded with the metadata provided
	/// </summary>
	public EdmItemCollection CreateEdmItemCollection(string sourcePath, params string[] referenceSchemas)
	{
		EdmItemCollection edmItemCollection;
		if(TryCreateEdmItemCollection(sourcePath, referenceSchemas, out edmItemCollection))
		{
			return edmItemCollection;
		}

		return new EdmItemCollection();
	}

	/// <summary>
	/// Attempts to create a EdmItemCollection from the specified metadata file
	/// </summary>
	public bool TryCreateEdmItemCollection(string sourcePath, out EdmItemCollection edmItemCollection)
	{
		return TryCreateEdmItemCollection(sourcePath, null, out edmItemCollection);
	}

	/// <summary>
	/// Attempts to create a EdmItemCollection from the specified metadata file
	/// </summary>
	public bool TryCreateEdmItemCollection(string sourcePath, string[] referenceSchemas, out EdmItemCollection edmItemCollection)
	{
		edmItemCollection = null;

		if (!ValidateInputPath(sourcePath, _textTransformation))
		{
			return false;
		}

		if (referenceSchemas == null)
		{
			referenceSchemas = new string[0];
		}

		ItemCollection itemCollection = null;
		sourcePath = _textTransformation.Host.ResolvePath(sourcePath);
		EdmItemCollectionBuilder collectionBuilder = new EdmItemCollectionBuilder(_textTransformation, referenceSchemas.Select(s => _textTransformation.Host.ResolvePath(s)).Where(s => s != sourcePath));
		if (collectionBuilder.TryCreateItemCollection(sourcePath, out itemCollection))
		{
			edmItemCollection = (EdmItemCollection)itemCollection;
		}

		return edmItemCollection != null;
	}

	/// <summary>
	/// Attempts to create a StoreItemCollection from the specified metadata file
	/// </summary>
	public bool TryCreateStoreItemCollection(string sourcePath, out StoreItemCollection storeItemCollection)
	{
		storeItemCollection = null;

		if (!ValidateInputPath(sourcePath, _textTransformation))
		{
			return false;
		}

		ItemCollection itemCollection = null;
		StoreItemCollectionBuilder collectionBuilder = new StoreItemCollectionBuilder(_textTransformation);
		if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
		{
			storeItemCollection = (StoreItemCollection)itemCollection;
		}
		return storeItemCollection != null;
	}

	/// <summary>
	/// Attempts to create a StorageMappingItemCollection from the specified metadata file, EdmItemCollection, and StoreItemCollection
	/// </summary>
	public bool TryCreateStorageMappingItemCollection(string sourcePath, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection, out StorageMappingItemCollection storageMappingItemCollection)
	{
		storageMappingItemCollection = null;

		if (!ValidateInputPath(sourcePath, _textTransformation))
		{
			return false;
		}

		if (edmItemCollection == null)
		{
			throw new ArgumentNullException("edmItemCollection");
		}

		if (storeItemCollection == null)
		{
			throw new ArgumentNullException("storeItemCollection");
		}

		ItemCollection itemCollection = null;
		StorageMappingItemCollectionBuilder collectionBuilder = new StorageMappingItemCollectionBuilder(_textTransformation, edmItemCollection, storeItemCollection);
		if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
		{
			storageMappingItemCollection = (StorageMappingItemCollection)itemCollection;
		}
		return storageMappingItemCollection != null;
	}

	/// <summary>
	/// Gets the Model Namespace from the provided schema file.
	/// </summary>
	public string GetModelNamespace(string sourcePath)
	{
		if (!ValidateInputPath(sourcePath, _textTransformation))
		{
			return String.Empty;
		}

		EdmItemCollectionBuilder builder = new EdmItemCollectionBuilder(_textTransformation);
		XElement model;
		if(builder.TryLoadRootElement(_textTransformation.Host.ResolvePath(sourcePath), out model))
		{
			XAttribute attribute = model.Attribute("Namespace");
			if (attribute != null)
			{
				return attribute.Value;
			}
		}

		return String.Empty;
	}

	/// <summary>
	/// Returns true if the specified file path is valid
	/// </summary>
	private static bool ValidateInputPath(string sourcePath, DynamicTextTransformation textTransformation)
	{
		if (String.IsNullOrEmpty(sourcePath))
		{
			throw new ArgumentException("sourcePath");
		}

		if(sourcePath == "$edmxInputFile$")
		{
			textTransformation.Errors.Add(new CompilerError(textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), 0, 0, string.Empty,
				CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")));
			return false;
		}

		return true;
	}

	/// <summary>
	/// Base class for ItemCollectionBuilder classes that
	/// loads the specific types of metadata
	/// </summary>
	private abstract class ItemCollectionBuilder
	{
		private readonly DynamicTextTransformation _textTransformation;
		private readonly string _fileExtension;
		private readonly string _edmxSectionName;
		private readonly string  _rootElementName;

		/// <summary>
		/// FileExtension for individual (non-edmx) metadata file for this
		/// specific ItemCollection type
		/// </summary>
		public string FileExtension
		{
			get { return _fileExtension; }
		}

		/// <summary>
		/// The name of the XmlElement in the .edmx <Runtime> element
		/// to find this ItemCollection's metadata
		/// </summary>
		public string EdmxSectionName
		{
			get { return _edmxSectionName; }
		}

		/// <summary>
		/// The name of the root element of this ItemCollection's metadata
		/// </summary>
		public string RootElementName
		{
			get { return _rootElementName; }
		}

		/// <summary>
		/// Method to build the appropriate ItemCollection
		/// </summary>
		protected abstract ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors);

		/// <summary>
		/// Ctor to setup the ItemCollectionBuilder members
		/// </summary>
		protected ItemCollectionBuilder(DynamicTextTransformation textTransformation, string fileExtension, string edmxSectionName, string rootElementName)
		{
			_textTransformation = textTransformation;
			_fileExtension = fileExtension;
			_edmxSectionName = edmxSectionName;
			_rootElementName = rootElementName;
		}

		/// <summary>
		/// Selects a namespace from the supplied constants.
		/// </summary>
		protected abstract string GetNamespace(SchemaConstants constants);

		/// <summary>
		/// Try to create an ItemCollection loaded with the metadata provided
		/// </summary>
		public bool TryCreateItemCollection(string sourcePath, out ItemCollection itemCollection)
		{
			itemCollection = null;

			if (!ValidateInputPath(sourcePath, _textTransformation))
			{
				return false;
			}

			XElement schemaElement = null;
			if (TryLoadRootElement(sourcePath, out schemaElement))
			{
				List<XmlReader> readers = new List<XmlReader>();
				try
				{
					var providerManifestToken = schemaElement.Attribute("ProviderManifestToken");
					int providerManifestTokenValue;
					if (providerManifestToken != null && int.TryParse(providerManifestToken.Value, out providerManifestTokenValue) && providerManifestTokenValue > 2008)
						providerManifestToken.Value = "2008";
					readers.Add(schemaElement.CreateReader());
					IList<EdmSchemaError> errors = null;

					ItemCollection tempItemCollection = CreateItemCollection(readers, out errors);
					if (ProcessErrors(errors, sourcePath))
					{
						return false;
					}

					itemCollection = tempItemCollection;
					return true;
				}
				finally
				{
					foreach (XmlReader reader in readers)
					{
						((IDisposable)reader).Dispose();
					}
				}
			}

			return false;
		}

		/// <summary>
		/// Tries to load the root element from the metadata file provided
		/// </summary>
		public bool TryLoadRootElement(string sourcePath, out XElement schemaElement)
		{
			schemaElement = null;
			string extension = Path.GetExtension(sourcePath);
			if (extension.Equals(".edmx", StringComparison.InvariantCultureIgnoreCase))
			{
				return TryLoadRootElementFromEdmx(sourcePath, out schemaElement);
			}
			else if(extension.Equals(FileExtension, StringComparison.InvariantCultureIgnoreCase))
			{
				// load from single metadata file (.csdl, .ssdl, or .msl)
				schemaElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
				return true;
			}

			return false;
		}

		/// <summary>
		/// Tries to load the root element from the provided edmxDocument
		/// </summary>
		private bool TryLoadRootElementFromEdmx(XElement edmxDocument, SchemaConstants schemaConstants, string sectionName, string rootElementName, out XElement rootElement)
		{
			rootElement = null;

			XNamespace edmxNs = schemaConstants.EdmxNamespace;
			XNamespace sectionNs = GetNamespace(schemaConstants);

			XElement runtime = edmxDocument.Element(edmxNs  + "Runtime");
			if (runtime == null)
			{
				return false;
			}

			XElement section = runtime.Element(edmxNs + sectionName);
			if (section == null)
			{
				return false;
			}

			string templateVersion;

			if (!TemplateMetadata.TryGetValue(MetadataConstants.TT_TEMPLATE_VERSION, out templateVersion))
			{
				templateVersion = MetadataConstants.DEFAULT_TEMPLATE_VERSION;
			}

			if (schemaConstants.MinimumTemplateVersion > new Version(templateVersion))
			{
				_textTransformation.Errors.Add(new CompilerError(
					_textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), 0, 0, string.Empty,
						CodeGenerationTools.GetResourceString("Template_UnsupportedSchema"))
				{IsWarning = true});
			}

			rootElement = section.Element(sectionNs + rootElementName);
			return rootElement != null;
		}

		/// <summary>
		/// Tries to load the root element from the provided .edmx metadata file
		/// </summary>
		private bool TryLoadRootElementFromEdmx(string edmxPath, out XElement rootElement)
		{
			rootElement = null;

			XElement element = XElement.Load(edmxPath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);

			EdmxChanges.EdmxApplyChanges(edmxPath, element);

			return TryLoadRootElementFromEdmx(element, MetadataConstants.V3_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
				|| TryLoadRootElementFromEdmx(element, MetadataConstants.V2_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
				|| TryLoadRootElementFromEdmx(element, MetadataConstants.V1_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement);
		}

		/// <summary>
		/// Takes an Enumerable of EdmSchemaErrors, and adds them
		/// to the errors collection of the template class
		/// </summary>
		private bool ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
		{
			bool foundErrors = false;
			foreach (EdmSchemaError error in errors)
			{
				CompilerError newError = new CompilerError(error.SchemaLocation, error.Line, error.Column,
												 error.ErrorCode.ToString(CultureInfo.InvariantCulture),
												 error.Message);
				newError.IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning;
				foundErrors |= error.Severity == EdmSchemaErrorSeverity.Error;
				if (error.SchemaLocation == null)
				{
					newError.FileName = sourceFilePath;
				}
				_textTransformation.Errors.Add(newError);
			}

			return foundErrors;
		}
	}

	/// <summary>
	/// Builder class for creating a StorageMappingItemCollection
	/// </summary>
	private class StorageMappingItemCollectionBuilder : ItemCollectionBuilder
	{
		private readonly EdmItemCollection _edmItemCollection;
		private readonly StoreItemCollection _storeItemCollection;

		public StorageMappingItemCollectionBuilder(DynamicTextTransformation textTransformation, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection)
			: base(textTransformation, MetadataConstants.MSL_EXTENSION, MetadataConstants.MSL_EDMX_SECTION_NAME, MetadataConstants.MSL_ROOT_ELEMENT_NAME)
		{
			_edmItemCollection = edmItemCollection;
			_storeItemCollection = storeItemCollection;
		}

		protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
		{
			return MetadataItemCollectionFactory.CreateStorageMappingItemCollection(_edmItemCollection, _storeItemCollection, readers, out errors);
		}

		/// <summary>
		/// Selects a namespace from the supplied constants.
		/// </summary>
		protected override string GetNamespace(SchemaConstants constants)
		{
			return constants.MslNamespace;
		}
	}

	/// <summary>
	/// Builder class for creating a StoreItemCollection
	/// </summary>
	private class StoreItemCollectionBuilder : ItemCollectionBuilder
	{
		public StoreItemCollectionBuilder(DynamicTextTransformation textTransformation)
			: base(textTransformation, MetadataConstants.SSDL_EXTENSION, MetadataConstants.SSDL_EDMX_SECTION_NAME, MetadataConstants.SSDL_ROOT_ELEMENT_NAME)
		{
		}

		protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
		{
			return MetadataItemCollectionFactory.CreateStoreItemCollection(readers, out errors);
		}

		/// <summary>
		/// Selects a namespace from the supplied constants.
		/// </summary>
		protected override string GetNamespace(SchemaConstants constants)
		{
			return constants.SsdlNamespace;
		}
	}

	/// <summary>
	/// Builder class for creating a EdmItemCollection
	/// </summary>
	private class EdmItemCollectionBuilder : ItemCollectionBuilder
	{
		private List<string> _referenceSchemas = new List<string>();

		public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation)
			: base(textTransformation, MetadataConstants.CSDL_EXTENSION, MetadataConstants.CSDL_EDMX_SECTION_NAME, MetadataConstants.CSDL_ROOT_ELEMENT_NAME)
		{
		}

		public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation, IEnumerable<string> referenceSchemas)
			: this(textTransformation)
		{
			_referenceSchemas.AddRange(referenceSchemas);
		}

		protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
		{
			List<XmlReader> ownedReaders = new List<XmlReader>();
			List<XmlReader> allReaders = new List<XmlReader>();
			try
			{
				allReaders.AddRange(readers);
				foreach (string path in _referenceSchemas.Distinct())
				{
					XElement reference;
					if(TryLoadRootElement(path, out reference))
					{
						XmlReader reader = reference.CreateReader();
						allReaders.Add(reader);
						ownedReaders.Add(reader);
					}
				}

				return MetadataItemCollectionFactory.CreateEdmItemCollection(allReaders, out errors);
			}
			finally
			{
				foreach (XmlReader reader in ownedReaders)
				{
					((IDisposable)reader).Dispose();
				}
			}
		}

		/// <summary>
		/// Selects a namespace from the supplied constants.
		/// </summary>
		protected override string GetNamespace(SchemaConstants constants)
		{
			return constants.CsdlNamespace;
		}
	}
}

/// <summary>
/// Responsible for encapsulating the retrieval and translation of the CodeGeneration
/// annotations in the EntityFramework Metadata to a form that is useful in code generation.
/// </summary>
public static class Accessibility
{
	private const string GETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:GetterAccess";
	private const string SETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:SetterAccess";
	private const string TYPE_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:TypeAccess";
	private const string METHOD_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:MethodAccess";
	private const string ACCESS_PROTECTED = "Protected";
	private const string ACCESS_INTERNAL = "Internal";
	private const string ACCESS_PRIVATE = "Private";
	private static readonly Dictionary<string, int> AccessibilityRankIdLookup = new Dictionary<string, int>
		{
			{ "private", 1},
			{ "internal", 2},
			{ "protected", 3},
			{ "public", 4},
		};

	/// <summary>
	/// Gets the accessibility that should be applied to a type being generated from the provided GlobalItem.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForType(GlobalItem item)
	{
		if (item == null)
		{
			return null;
		}

		return GetAccessibility(item, TYPE_ACCESS);
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the property level for a property being
	/// generated from the provided EdmMember.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForProperty(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		string getterAccess, setterAccess, propertyAccess;
		CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
		return propertyAccess;
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the property level for a Read-Only property being
	/// generated from the provided EdmMember.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForReadOnlyProperty(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		return GetAccessibility(member, GETTER_ACCESS);
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the property level for a property being
	/// generated from the provided EntitySet.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForReadOnlyProperty(EntitySet set)
	{
		if (set == null)
		{
			return null;
		}

		return GetAccessibility(set, GETTER_ACCESS);
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the property level for a Write-Only property being
	/// generated from the provided EdmMember.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForWriteOnlyProperty(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		return GetAccessibility(member, SETTER_ACCESS);
	}


	/// <summary>
	/// Gets the accessibility that should be applied at the get level for a property being
	/// generated from the provided EdmMember.
	///
	/// defaults to empty if no annotation is found or the accessibility is the same as the property level.
	/// </summary>
	public static string ForGetter(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		string getterAccess, setterAccess, propertyAccess;
		CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
		return getterAccess;
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the set level for a property being
	/// generated from the provided EdmMember.
	///
	/// defaults to empty if no annotation is found or the accessibility is the same as the property level.
	/// </summary>
	public static string ForSetter(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		string getterAccess, setterAccess, propertyAccess;
		CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
		return setterAccess;
	}

	/// <summary>
	/// Gets the accessibility that should be applied to a method being generated from the provided EdmFunction.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForMethod(EdmFunction function)
	{
		if (function == null)
		{
			return null;
		}

		return GetAccessibility(function, METHOD_ACCESS);
	}

	private static void CalculatePropertyAccessibility(MetadataItem item,
		out string propertyAccessibility,
		out string getterAccessibility,
		out string setterAccessibility)
	{
		getterAccessibility = GetAccessibility(item, GETTER_ACCESS);
		int getterRank = AccessibilityRankIdLookup[getterAccessibility];

		setterAccessibility = GetAccessibility(item, SETTER_ACCESS);
		int setterRank = AccessibilityRankIdLookup[setterAccessibility];

		int propertyRank = Math.Max(getterRank, setterRank);
		if (setterRank == propertyRank)
		{
			setterAccessibility = String.Empty;
		}

		if (getterRank == propertyRank)
		{
			getterAccessibility = String.Empty;
		}

		propertyAccessibility = AccessibilityRankIdLookup.Where(v => v.Value == propertyRank).Select(v => v.Key).Single();
	}

	private static string GetAccessibility(MetadataItem item, string name)
	{
		string accessibility;
		if (MetadataTools.TryGetStringMetadataPropertySetting(item, name, out accessibility))
		{
			return TranslateUserAccessibilityToCSharpAccessibility(accessibility);
		}

		return "public";
	}

	private static string TranslateUserAccessibilityToCSharpAccessibility(string userAccessibility)
	{
		if (userAccessibility == ACCESS_PROTECTED)
		{
			return "protected";
		}
		else if (userAccessibility == ACCESS_INTERNAL)
		{
			return "internal";
		}
		else if (userAccessibility == ACCESS_PRIVATE)
		{
			return "private";
		}
		else
		{
			// default to public
			return "public";
		}
	}
}

/// <summary>
/// Responsible for creating source code regions in code when the loop inside
/// actually produces something.
/// </summary>
public class CodeRegion
{
	private const int STANDARD_INDENT_LENGTH = 4;

	private readonly DynamicTextTransformation _textTransformation;
	private int _beforeRegionLength;
	private int _emptyRegionLength;
	private int _regionIndentLevel = -1;

	/// <summary>
	/// Initializes an CodeRegion instance with the
	/// TextTransformation (T4 generated class) that is currently running
	/// </summary>
	public CodeRegion(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
	}

	/// <summary>
	/// Initializes an CodeRegion instance with the
	/// TextTransformation (T4 generated class) that is currently running,
	/// and the indent level to start the first region at.
	/// </summary>
	public CodeRegion(object textTransformation, int firstIndentLevel)
		: this(textTransformation)
	{
		if (firstIndentLevel < 0)
		{
			throw new ArgumentException("firstIndentLevel");
		}

		_regionIndentLevel = firstIndentLevel - 1;
	}

	/// <summary>
	/// Starts the begining of a region
	/// </summary>
	public void Begin(string regionName)
	{
		if (regionName == null)
		{
			throw new ArgumentNullException("regionName");
		}

		Begin(regionName, 1);
	}

	/// <summary>
	/// Start the begining of a region, indented
	/// the numbers of levels specified
	/// </summary>
	public void Begin(string regionName, int levelsToIncreaseIndent)
	{
		if (regionName == null)
		{
			throw new ArgumentNullException("regionName");
		}

		_beforeRegionLength = _textTransformation.GenerationEnvironment.Length;
		_regionIndentLevel += levelsToIncreaseIndent;
		_textTransformation.Write(GetIndent(_regionIndentLevel));
		_textTransformation.WriteLine("#region " + regionName);
		_emptyRegionLength = _textTransformation.GenerationEnvironment.Length;
	}

	/// <summary>
	/// Ends a region, or totaly removes it if nothing
	/// was generted since the begining of the region.
	/// </summary>
	public void End()
	{
		End(1);
	}

	/// <summary>
	/// Ends a region, or totaly removes it if nothing
	/// was generted since the begining of the region, also outdents
	/// the number of levels specified.
	/// </summary>
	public void End(int levelsToDecrease)
	{
		int indentLevel = _regionIndentLevel;
		_regionIndentLevel -= levelsToDecrease;

		if (_emptyRegionLength == _textTransformation.GenerationEnvironment.Length)
			_textTransformation.GenerationEnvironment.Length = _beforeRegionLength;
		else
		{
			_textTransformation.WriteLine(String.Empty);
			_textTransformation.Write(GetIndent(indentLevel));
			_textTransformation.WriteLine("#endregion");
			_textTransformation.WriteLine(String.Empty);
		}
	}

	/// <summary>
	/// Gets the current indent level that the next end region statement will be written
	/// at
	/// </summary>
	public int CurrentIndentLevel { get { return _regionIndentLevel; } }

	/// <summary>
	/// Get a string of spaces equivelent to the number of indents
	/// desired.
	/// </summary>
	public static string GetIndent(int indentLevel)
	{
		if (indentLevel < 0)
		{
			throw new ArgumentException("indentLevel");
		}

		return String.Empty.PadLeft(indentLevel * STANDARD_INDENT_LENGTH);
	}
}


/// <summary>
/// Responsible for collecting together the actual method parameters
/// and the parameters that need to be sent to the Execute method.
/// </summary>
public class FunctionImportParameter
{
	public FunctionParameter Source { get; set; }
	public string RawFunctionParameterName { get; set; }
	public string FunctionParameterName { get; set; }
	public string FunctionParameterType { get; set; }
	public string LocalVariableName { get; set; }
	public string RawClrTypeName { get; set; }
	public string ExecuteParameterName { get; set; }
	public string EsqlParameterName { get; set; }
	public bool NeedsLocalVariable { get; set; }
	public bool IsNullableOfT { get; set; }


	/// <summary>
	/// Creates a set of FunctionImportParameter objects from the parameters passed in.
	/// </summary>
	public static IEnumerable<FunctionImportParameter> Create(IEnumerable<FunctionParameter> parameters, CodeGenerationTools code, MetadataTools ef)
	{
		if (parameters == null)
		{
			throw new ArgumentNullException("parameters");
		}

		if (code == null)
		{
			throw new ArgumentNullException("code");
		}

		if (ef == null)
		{
			throw new ArgumentNullException("ef");
		}

		UniqueIdentifierService unique = new UniqueIdentifierService();
		List<FunctionImportParameter> importParameters = new List<FunctionImportParameter>();
		foreach (FunctionParameter parameter in parameters)
		{
			FunctionImportParameter importParameter = new FunctionImportParameter();
			importParameter.Source = parameter;
			importParameter.RawFunctionParameterName = unique.AdjustIdentifier(code.CamelCase(parameter.Name));
			importParameter.FunctionParameterName = code.Escape(importParameter.RawFunctionParameterName);
			if (parameter.Mode == ParameterMode.In)
			{
				TypeUsage typeUsage = parameter.TypeUsage;
				importParameter.NeedsLocalVariable = true;
				importParameter.FunctionParameterType = code.GetTypeName(typeUsage);
				importParameter.EsqlParameterName = parameter.Name;
				Type clrType = ef.UnderlyingClrType(parameter.TypeUsage.EdmType);
				importParameter.RawClrTypeName = typeUsage.EdmType is EnumType ? code.GetTypeName(typeUsage.EdmType) : code.Escape(clrType);
				importParameter.IsNullableOfT = clrType.IsValueType;
			}
			else
			{
				importParameter.NeedsLocalVariable = false;
				importParameter.FunctionParameterType = "ObjectParameter";
				importParameter.ExecuteParameterName = importParameter.FunctionParameterName;
			}
			importParameters.Add(importParameter);
		}

		// we save the local parameter uniquification for a second pass to make the visible parameters
		// as pretty and sensible as possible
		for (int i = 0; i < importParameters.Count; i++)
		{
			FunctionImportParameter importParameter = importParameters[i];
			if (importParameter.NeedsLocalVariable)
			{
				importParameter.LocalVariableName = unique.AdjustIdentifier(importParameter.RawFunctionParameterName + "Parameter");
				importParameter.ExecuteParameterName = importParameter.LocalVariableName;
			}
		}

		return importParameters;
	}

	//
	// Class to create unique variables within the same scope
	//
	private sealed class UniqueIdentifierService
	{
		private readonly HashSet<string> _knownIdentifiers;

		public UniqueIdentifierService()
		{
			_knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
		}

		/// <summary>
		/// Given an identifier, makes it unique within the scope by adding
		/// a suffix (1, 2, 3, ...), and returns the adjusted identifier.
		/// </summary>
		public string AdjustIdentifier(string identifier)
		{
			// find a unique name by adding suffix as necessary
			int numberOfConflicts = 0;
			string adjustedIdentifier = identifier;

			while (!_knownIdentifiers.Add(adjustedIdentifier))
			{
				++numberOfConflicts;
				adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
			}

			return adjustedIdentifier;
		}
	}
}

/// <summary>
/// Responsible for marking the various sections of the generation,
/// so they can be split up into separate files
/// </summary>
public class EntityFrameworkTemplateFileManager
{
	/// <summary>
	/// Creates the VsEntityFrameworkTemplateFileManager if VS is detected, otherwise
	/// creates the file system version.
	/// </summary>
	public static EntityFrameworkTemplateFileManager Create(object textTransformation)
	{
		DynamicTextTransformation transformation = DynamicTextTransformation.Create(textTransformation);
		IDynamicHost host = transformation.Host;

#if !PREPROCESSED_TEMPLATE
		var hostServiceProvider = host.AsIServiceProvider();

		if (hostServiceProvider != null)
		{
			EnvDTE.DTE dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));

			if (dte != null)
			{
				return new VsEntityFrameworkTemplateFileManager(transformation);
			}
		}
#endif
		return new EntityFrameworkTemplateFileManager(transformation);
	}

	private sealed class Block
	{
		public String Name;
		public int Start, Length;
	}

	private readonly List<Block> files = new List<Block>();
	private readonly Block footer = new Block();
	private readonly Block header = new Block();
	private readonly DynamicTextTransformation _textTransformation;

	// reference to the GenerationEnvironment StringBuilder on the
	// TextTransformation object
	private readonly StringBuilder _generationEnvironment;

	private Block currentBlock;

	/// <summary>
	/// Initializes an EntityFrameworkTemplateFileManager Instance  with the
	/// TextTransformation (T4 generated class) that is currently running
	/// </summary>
	private EntityFrameworkTemplateFileManager(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
		_generationEnvironment = _textTransformation.GenerationEnvironment;
	}

	/// <summary>
	/// Marks the end of the last file if there was one, and starts a new
	/// and marks this point in generation as a new file.
	/// </summary>
	public void StartNewFile(string name)
	{
		if (name == null)
		{
			throw new ArgumentNullException("name");
		}

		CurrentBlock = new Block { Name = name };
	}

	public void StartFooter()
	{
		CurrentBlock = footer;
	}

	public void StartHeader()
	{
		CurrentBlock = header;
	}

	public void EndBlock()
	{
		if (CurrentBlock == null)
		{
			return;
		}

		CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start;

		if (CurrentBlock != header && CurrentBlock != footer)
		{
			files.Add(CurrentBlock);
		}

		currentBlock = null;
	}

	/// <summary>
	/// Produce the template output files.
	/// </summary>
	public virtual IEnumerable<string> Process(bool split = true)
	{
		var generatedFileNames = new List<string>();

		if (split)
		{
			EndBlock();

			var headerText = _generationEnvironment.ToString(header.Start, header.Length);
			var footerText = _generationEnvironment.ToString(footer.Start, footer.Length);
			var outputPath = Path.GetDirectoryName(_textTransformation.Host.TemplateFile);

			files.Reverse();

			foreach (var block in files)
			{
				var fileName = Path.Combine(outputPath, block.Name);
				var content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText;

				generatedFileNames.Add(fileName);
				CreateFile(fileName, content);
				_generationEnvironment.Remove(block.Start, block.Length);
			}
		}

		return generatedFileNames;
	}

	protected virtual void CreateFile(string fileName, string content)
	{
		if (IsFileContentDifferent(fileName, content))
		{
			File.WriteAllText(fileName, content);
		}
	}

	protected bool IsFileContentDifferent(String fileName, string newContent)
	{
		return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
	}

	private Block CurrentBlock
	{
		get { return currentBlock; }
		set
		{
			if (CurrentBlock != null)
			{
				EndBlock();
			}

			if (value != null)
			{
				value.Start = _generationEnvironment.Length;
			}

			currentBlock = value;
		}
	}

#if !PREPROCESSED_TEMPLATE
	private sealed class VsEntityFrameworkTemplateFileManager : EntityFrameworkTemplateFileManager
	{
		private EnvDTE.ProjectItem templateProjectItem;
		private EnvDTE.DTE dte;
		private Action<string> checkOutAction;
		private Action<IEnumerable<string>> projectSyncAction;

		/// <summary>
		/// Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance
		/// </summary>
		public VsEntityFrameworkTemplateFileManager(object textTemplating)
			: base(textTemplating)
		{
			var hostServiceProvider = _textTransformation.Host.AsIServiceProvider();
			if (hostServiceProvider == null)
			{
				throw new ArgumentNullException("Could not obtain hostServiceProvider");
			}

			dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
			if (dte == null)
			{
				throw new ArgumentNullException("Could not obtain DTE from host");
			}

			templateProjectItem = dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile);

			checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
			projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
		}

		public override IEnumerable<string> Process(bool split)
		{
			if (templateProjectItem.ProjectItems == null)
			{
				return new List<string>();
			}

			var generatedFileNames = base.Process(split);

			projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));

			return generatedFileNames;
		}

		protected override void CreateFile(string fileName, string content)
		{
			if (IsFileContentDifferent(fileName, content))
			{
				CheckoutFileIfRequired(fileName);
				File.WriteAllText(fileName, content);
			}
		}

		private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<string> keepFileNames)
		{
			var keepFileNameSet = new HashSet<string>(keepFileNames);
			var projectFiles = new Dictionary<string, EnvDTE.ProjectItem>();
			var originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]);

			foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
			{
				projectFiles.Add(projectItem.FileNames[0], projectItem);
			}

			// Remove unused items from the project
			foreach (var pair in projectFiles)
			{
				if (!keepFileNames.Contains(pair.Key)
					&& !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + "."))
				{
					pair.Value.Delete();
				}
			}

			// Add missing files to the project
			foreach (string fileName in keepFileNameSet)
			{
				if (!projectFiles.ContainsKey(fileName))
				{
					templateProjectItem.ProjectItems.AddFromFile(fileName);
				}
			}
		}

		private void CheckoutFileIfRequired(string fileName)
		{
			if (dte.SourceControl == null
				|| !dte.SourceControl.IsItemUnderSCC(fileName)
					|| dte.SourceControl.IsItemCheckedOut(fileName))
			{
				return;
			}

			// run on worker thread to prevent T4 calling back into VS
			checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
		}
	}
#endif
}

/// <summary>
/// Responsible creating an instance that can be passed
/// to helper classes that need to access the TextTransformation
/// members.  It accesses member by name and signature rather than
/// by type.  This is necessary when the
/// template is being used in Preprocessed mode
/// and there is no common known type that can be
/// passed instead
/// </summary>
public class DynamicTextTransformation
{
	private object _instance;
	IDynamicHost _dynamicHost;

	private readonly MethodInfo _write;
	private readonly MethodInfo _writeLine;
	private readonly PropertyInfo _generationEnvironment;
	private readonly PropertyInfo _errors;
	private readonly PropertyInfo _host;

	private DynamicTextTransformation()
	{
	}

	/// <summary>
	/// Creates an instance of the DynamicTextTransformation class around the passed in
	/// TextTransformation shapped instance passed in, or if the passed in instance
	/// already is a DynamicTextTransformation, it casts it and sends it back.
	/// </summary>
	public static DynamicTextTransformation Create(object instance)
	{
		if (instance == null)
		{
			throw new ArgumentNullException("instance");
		}

		DynamicTextTransformation textTransformation = instance as DynamicTextTransformation;
		if (textTransformation != null)
		{
			return textTransformation;
		}

		return new DynamicTextTransformation(instance);
	}

	private DynamicTextTransformation(object instance)
	{
		_instance = instance;
		Type type = _instance.GetType();
		_write = type.GetMethod("Write", new Type[] { typeof(string) });
		_writeLine = type.GetMethod("WriteLine", new Type[] { typeof(string) });
		_generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance | BindingFlags.NonPublic);
		_host = type.GetProperty("Host");
		_errors = type.GetProperty("Errors");
	}

	/// <summary>
	/// Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
	/// </summary>
	public StringBuilder GenerationEnvironment { get { return (StringBuilder)_generationEnvironment.GetValue(_instance, null); } }

	/// <summary>
	/// Gets the value of the wrapped TextTranformation instance's Errors property
	/// </summary>
	public System.CodeDom.Compiler.CompilerErrorCollection Errors { get { return (System.CodeDom.Compiler.CompilerErrorCollection)_errors.GetValue(_instance, null); } }

	/// <summary>
	/// Calls the wrapped TextTranformation instance's Write method.
	/// </summary>
	public void Write(string text)
	{
		_write.Invoke(_instance, new object[] { text });
	}

	/// <summary>
	/// Calls the wrapped TextTranformation instance's WriteLine method.
	/// </summary>
	public void WriteLine(string text)
	{
		_writeLine.Invoke(_instance, new object[] { text });
	}

	/// <summary>
	/// Gets the value of the wrapped TextTranformation instance's Host property
	/// if available (shows up when hostspecific is set to true in the template directive) and returns
	/// the appropriate implementation of IDynamicHost
	/// </summary>
	public IDynamicHost Host
	{
		get
		{
			if (_dynamicHost == null)
			{
				if(_host == null)
				{
					_dynamicHost = new NullHost();
				}
				else
				{
					_dynamicHost = new DynamicHost(_host.GetValue(_instance, null));
				}
			}
			return _dynamicHost;
		}
	}
}


/// <summary>
/// Reponsible for abstracting the use of Host between times
/// when it is available and not
/// </summary>
public interface IDynamicHost
{
	/// <summary>
	/// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
	/// </summary>
	string ResolveParameterValue(string id, string name, string otherName);

	/// <summary>
	/// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
	/// </summary>
	string ResolvePath(string path);

	/// <summary>
	/// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
	/// </summary>
	string TemplateFile { get; }

	/// <summary>
	/// Returns the Host instance cast as an IServiceProvider
	/// </summary>
	IServiceProvider AsIServiceProvider();
}

/// <summary>
/// Reponsible for implementing the IDynamicHost as a dynamic
/// shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
/// rather than type dependent wrapper.  We don't use the
/// interface type so that the code can be run in preprocessed mode
/// on a .net framework only installed machine.
/// </summary>
public class DynamicHost : IDynamicHost
{
	private readonly object _instance;
	private readonly MethodInfo _resolveParameterValue;
	private readonly MethodInfo _resolvePath;
	private readonly PropertyInfo _templateFile;

	private DynamicHost()
	{
	}

	/// <summary>
	/// Creates an instance of the DynamicHost class around the passed in
	/// Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shapped instance passed in.
	/// </summary>
	public DynamicHost(object instance)
	{
		_instance = instance;
		Type type = _instance.GetType();
		_resolveParameterValue = type.GetMethod("ResolveParameterValue", new Type[] { typeof(string), typeof(string), typeof(string) });
		_resolvePath = type.GetMethod("ResolvePath", new Type[] { typeof(string) });
		_templateFile = type.GetProperty("TemplateFile");

	}

	/// <summary>
	/// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
	/// </summary>
	public string ResolveParameterValue(string id, string name, string otherName)
	{
		return (string)_resolveParameterValue.Invoke(_instance, new object[] { id, name, otherName });
	}

	/// <summary>
	/// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
	/// </summary>
	public string ResolvePath(string path)
	{
		return (string)_resolvePath.Invoke(_instance, new object[] { path });
	}

	/// <summary>
	/// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
	/// </summary>
	public string TemplateFile
	{
		get
		{
			return (string)_templateFile.GetValue(_instance, null);
		}
	}

	/// <summary>
	/// Returns the Host instance cast as an IServiceProvider
	/// </summary>
	public IServiceProvider AsIServiceProvider()
	{
		return _instance as IServiceProvider;
	}
}

/// <summary>
/// Reponsible for implementing the IDynamicHost when the
/// Host property is not available on the TextTemplating type. The Host
/// property only exists when the hostspecific attribute of the template
/// directive is set to true.
/// </summary>
public class NullHost : IDynamicHost
{
	/// <summary>
	/// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
	/// that simply retuns null.
	/// </summary>
	public string ResolveParameterValue(string id, string name, string otherName)
	{
		return null;
	}

	/// <summary>
	/// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
	/// that simply retuns the path passed in.
	/// </summary>
	public string ResolvePath(string path)
	{
		return path;
	}

	/// <summary>
	/// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
	/// that returns null.
	/// </summary>
	public string TemplateFile
	{
		get
		{
			return null;
		}
	}

	/// <summary>
	/// Returns null.
	/// </summary>
	public IServiceProvider AsIServiceProvider()
	{
		return null;
	}
}

/// <summary>
/// Responsible for encapsulating the constants defined in Metadata
/// </summary>
public static class MetadataConstants
{
	public const string CSDL_EXTENSION = ".csdl";

	public const string CSDL_EDMX_SECTION_NAME = "ConceptualModels";
	public const string CSDL_ROOT_ELEMENT_NAME = "Schema";
	public const string EDM_ANNOTATION_09_02 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";

	public const string SSDL_EXTENSION = ".ssdl";

	public const string SSDL_EDMX_SECTION_NAME = "StorageModels";
	public const string SSDL_ROOT_ELEMENT_NAME = "Schema";

	public const string MSL_EXTENSION = ".msl";

	public const string MSL_EDMX_SECTION_NAME = "Mappings";
	public const string MSL_ROOT_ELEMENT_NAME = "Mapping";

	public const string TT_TEMPLATE_NAME = "TemplateName";
	public const string TT_TEMPLATE_VERSION = "TemplateVersion";
	public const string TT_MINIMUM_ENTITY_FRAMEWORK_VERSION = "MinimumEntityFrameworkVersion";

	public const string DEFAULT_TEMPLATE_VERSION = "5.0";

	public static readonly SchemaConstants V1_SCHEMA_CONSTANTS = new SchemaConstants(
		"http://schemas.microsoft.com/ado/2007/06/edmx",
		"http://schemas.microsoft.com/ado/2006/04/edm",
		"http://schemas.microsoft.com/ado/2006/04/edm/ssdl",
		"urn:schemas-microsoft-com:windows:storage:mapping:CS",
		new Version("3.5"));

	public static readonly SchemaConstants V2_SCHEMA_CONSTANTS = new SchemaConstants(
		"http://schemas.microsoft.com/ado/2008/10/edmx",
		"http://schemas.microsoft.com/ado/2008/09/edm",
		"http://schemas.microsoft.com/ado/2009/02/edm/ssdl",
		"http://schemas.microsoft.com/ado/2008/09/mapping/cs",
		new Version("4.0"));

	public static readonly SchemaConstants V3_SCHEMA_CONSTANTS = new SchemaConstants(
		"http://schemas.microsoft.com/ado/2009/11/edmx",
		"http://schemas.microsoft.com/ado/2009/11/edm",
		"http://schemas.microsoft.com/ado/2009/11/edm/ssdl",
		"http://schemas.microsoft.com/ado/2009/11/mapping/cs",
		new Version("4.5"));
}

public struct SchemaConstants
{
	public SchemaConstants(string edmxNamespace, string csdlNamespace, string ssdlNamespace, string mslNamespace, Version minimumTemplateVersion) : this()
	{
		EdmxNamespace = edmxNamespace;
		CsdlNamespace = csdlNamespace;
		SsdlNamespace = ssdlNamespace;
		MslNamespace = mslNamespace;
		MinimumTemplateVersion = minimumTemplateVersion;
	}

	public string EdmxNamespace { get; private set; }
	public string CsdlNamespace { get; private set; }
	public string SsdlNamespace { get; private set; }
	public string MslNamespace { get; private set; }
	public Version MinimumTemplateVersion { get; private set; }
}
#>
<#+// Copyright (c) Matthieu MEZIL.  All rights reserved.

string edmxUtilityTTIncludeName = "WCFAsyncQueryableServices.VS12.Edmx.Utility.ttinclude";

private static string EDM_NS4 = "http://schemas.microsoft.com/ado/2008/10/edmx";
private static string SSDL_NS4 = "http://schemas.microsoft.com/ado/2009/02/edm/ssdl";
private static string CSDL_NS4 = "http://schemas.microsoft.com/ado/2008/09/edm";
private static string MSL_NS4 = "http://schemas.microsoft.com/ado/2008/09/mapping/cs";
private static string annotation_NS4 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";

private static string EDM_NS5 = "http://schemas.microsoft.com/ado/2009/11/edmx";
private static string SSDL_NS5 = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl";
private static string CSDL_NS5 = "http://schemas.microsoft.com/ado/2009/11/edm";
private static string MSL_NS5 = "http://schemas.microsoft.com/ado/2009/11/mapping/cs";
private static string annotation_NS5 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";

public static string GetEDM_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? EDM_NS4 : EDM_NS5;
}

public static string GetSSDL_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? SSDL_NS4 : SSDL_NS5;
}

public static string GetCSDL_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? CSDL_NS4 : CSDL_NS5;
}

public static string GetMSL_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? MSL_NS4 : MSL_NS5;
}

public static string GetAnnotation_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? annotation_NS4 : annotation_NS5;
}

public static IEnumerable<EdmType> GetAllTypes(EdmItemCollection itemCollection)
{
	return itemCollection.GetItems<EntityType>().Cast<EdmType>().Union(itemCollection.GetItems<ComplexType>()).Union(itemCollection.GetItems<EnumType>());
}

partial class OriginalValueMembers
{
	IEnumerable<EdmMember> GetRelevantMembersForUpdate(MetadataWorkspace metadataWorkspace, EntitySetBase entitySet, EntityTypeBase entityType, bool partialUpdateSupported)
	{
		return metadataWorkspace.GetRelevantMembersForUpdate(entitySet, entityType, true);   
	}
}
#>
<#+// Copyright (c) Matthieu MEZIL.  All rights reserved.

void WriteServerFxDALInterfaces(string serverFxCommonNamespace, string serverFxEntitiesNamespace, string namespaceName = null)
{
    CodeGenerationTools code = new CodeGenerationTools(this);
    if (namespaceName == null)
        namespaceName = code.EscapeNamespace(code.VsNamespaceSuggestion());

    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

    fileManager.StartNewFile("IEntitySet.cs");
    WriteHeader(namespaceName, code, "System.Collections.Generic", "System.Linq", serverFxEntitiesNamespace);
#>
public interface IEntitySet<T> : IWAQSQuery<T>
    where T : class, IEntity
{
    void Add(T item);
    void Attach(T item);
    void AttachAsModified(T item);
    void AttachAsDeleted(T item);
    void Detach(T item);
    void Delete(T item);

    IEnumerable<T> Local { get; }

    WCFAsyncQueryableServices.DAL.Interfaces.MergeOption MergeOption { get; set; }
    IQueryable<T> WithMergeOption(MergeOption mergeOption);
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IDataContext.cs");
    List<string> idataContextUsings = new List<string>() { "System", "System.Collections.Generic", "System.Linq.Expressions", serverFxEntitiesNamespace };
    CompleteIDataContextUsings(idataContextUsings);
    WriteHeader(namespaceName, code, idataContextUsings.ToArray());
#>
public interface IDataContext : IDisposable
{
    void SaveChanges(bool acceptChanges = true);
    
    void ApplyChanges<TEntity>(IEntitySet<TEntity> entitySet, TEntity entity) where TEntity : class, IEntity;

    Expression GetExpression(Type type, string propertyName, ParameterExpression parameterExpression);

    Expression GetExpression(Type type, string methodName, List<Expression> arguments, ParameterExpression parameterExpression);

    void AttachRelationship<TEntity1, TEntity2>(TEntity1 entity1, TEntity2 entity2, string collectionName) where TEntity1 : class where TEntity2 : class;

    void LoadMetadata();
<#+ CompleteIDataContextUsings(); #>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("MergeOption.cs");
    WriteHeader(namespaceName, code);
#>
public enum MergeOption
{
    AppendOnly,
    OverwriteChanges,
    PreserveChanges,
    NoTracking
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IObjectContext.cs");
    WriteHeader(namespaceName + ".L2E", code, "System", "System.Linq.Expressions", namespaceName);
#>
public interface IObjectContext : IDataContext
{
    MergeOption DefaultMergeOption { get; set; }
    bool UseWAQSProvider { get; set; }
    Expression GetDbDateTimeExpression();
    Expression GetDateExpression(Expression dateTimeExpresion);
    Expression AddYearsExpression(Expression dateTimeExpresion, Expression yearsExpresion);
    Expression AddYearsOffsetExpression(Expression dateTimeOffsetExpresion, Expression yearsExpresion);
    Expression AddMonthsExpression(Expression dateTimeExpresion, Expression monthsExpresion);
    Expression AddMonthsOffsetExpression(Expression dateTimeOffsetExpresion, Expression monthsExpresion);
    Expression AddDaysExpression(Expression dateTimeExpresion, Expression daysExpresion);
    Expression AddDaysOffsetExpression(Expression dateTimeOffsetExpresion, Expression daysExpresion);
    Expression DiffDaysExpression(Expression dateTime1Expresion, Expression dateTime2Expresion);
    Expression DiffDaysOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion);
    Expression AddHoursExpression(Expression dateTimeExpresion, Expression hoursExpresion);
    Expression AddHoursOffsetExpression(Expression dateTimeOffsetExpresion, Expression hoursExpresion);
    Expression DiffHoursExpression(Expression dateTime1Expresion, Expression dateTime2Expresion);
    Expression DiffHoursOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion);
    Expression AddMinutesExpression(Expression dateTimeExpresion, Expression minutesExpresion);
    Expression AddMinutesOffsetExpression(Expression dateTimeOffsetExpresion, Expression minutesExpresion);
    Expression DiffMinutesExpression(Expression dateTime1Expresion, Expression dateTime2Expresion);
    Expression DiffMinutesOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion);
    Expression AddSecondsExpression(Expression dateTimeExpresion, Expression secondsExpresion);
    Expression AddSecondsOffsetExpression(Expression dateTimeOffsetExpresion, Expression secondsExpresion);
    Expression DiffSecondsExpression(Expression dateTime1Expresion, Expression dateTime2Expresion);
    Expression DiffSecondsOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion);
    Expression AddMillisecondsExpression(Expression dateTimeExpresion, Expression millisecondsExpresion);
    Expression AddMillisecondsOffsetExpression(Expression dateTimeOffsetExpresion, Expression millisecondsExpresion);
    Expression DiffMillisecondsExpression(Expression dateTime1Expresion, Expression dateTime2Expresion);
    Expression DiffMillisecondsOffsetExpression(Expression dateTimeOffset1Expresion, Expression dateTimeOffset2Expresion);
    Expression AbsInt16Expression(Expression value);
    Expression AbsInt32Expression(Expression value);
    Expression AbsInt64Expression(Expression value);
    Expression AbsSingleExpression(Expression value);
    Expression AbsDoubleExpression(Expression value);
    Expression AbsDecimalExpression(Expression value);
    Expression CeilingDoubleExpression(Expression value);
    Expression CeilingDecimalExpression(Expression value);
    Expression FloorDoubleExpression(Expression value);
    Expression FloorDecimalExpression(Expression value);
    Expression PowDoubleExpression(Expression value, Expression exponent);
    Expression RoundToEvenDoubleExpression(Expression value);
    Expression RoundToEvenDecimalExpression(Expression value);
    Expression RoundToEvenDoubleExpression(Expression value, Expression digits);
    Expression RoundToEvenDecimalExpression(Expression value, Expression digits);
    Expression RoundAwayFromZeroDoubleExpression(Expression value);
    Expression RoundAwayFromZeroDecimalExpression(Expression value);
    Expression RoundAwayFromZeroDoubleExpression(Expression value, Expression digits);
    Expression RoundAwayFromZeroDecimalExpression(Expression value, Expression digits);
    Expression TruncateDoubleExpression(Expression value);
    Expression TruncateDecimalExpression(Expression value);
    Expression LessThanString(Expression s1Expresion, Expression s2Expresion);
    Expression GreaterThanString(Expression s1Expresion, Expression s2Expresion);
    DateTime GetDbDateTime();
    DateTime DbDateTime { get; }
}
<#+
    WriteFooter(namespaceName + ".L2E");

    fileManager.StartNewFile("WAQSL2EExpressionTransformation.cs");
    WriteHeader(namespaceName + ".L2E", code, "System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Reflection");
#>
public static class WAQSL2EExpressionTransformation
{
    public static Expression TransformProperty(MemberExpression expression, IObjectContext objectContext, Func<Expression, Expression> transformExp)
    {
        var propertyInfo = expression.Member as PropertyInfo;
        if (propertyInfo == null)
            return expression;
        return TransformProperty(transformExp(expression.Expression), propertyInfo, objectContext) ?? expression;
    }

    public static Expression TransformProperty(Expression source, PropertyInfo property, IObjectContext objectContext)
    {
        if (property.Name == "Date" && source.Type == typeof(DateTime))
            return objectContext.GetDateExpression(source);
        BinaryExpression subtractExpression = source as BinaryExpression;
        if (subtractExpression != null && subtractExpression.NodeType == ExpressionType.Subtract && source.Type == typeof(TimeSpan))
        {
            if (subtractExpression.Left.Type == typeof(DateTime))
            {
                switch (property.Name)
                {
                    case "Days":
                        return objectContext.DiffDaysExpression(subtractExpression.Right, subtractExpression.Left);
                    case "Hours":
                        return objectContext.DiffHoursExpression(subtractExpression.Right, subtractExpression.Left);
                    case "Minutes":
                        return objectContext.DiffMinutesExpression(subtractExpression.Right, subtractExpression.Left);
                    case "Seconds":
                        return objectContext.DiffSecondsExpression(subtractExpression.Right, subtractExpression.Left);
                    case "Milliseconds":
                        return objectContext.DiffMillisecondsExpression(subtractExpression.Right, subtractExpression.Left);
                }
            }
            else if (subtractExpression.Left.Type == typeof(DateTimeOffset))
            {
                switch (property.Name)
                {
                    case "Days":
                        return objectContext.DiffDaysOffsetExpression(subtractExpression.Right, subtractExpression.Left);
                    case "Hours":
                        return objectContext.DiffHoursOffsetExpression(subtractExpression.Right, subtractExpression.Left);
                    case "Minutes":
                        return objectContext.DiffMinutesOffsetExpression(subtractExpression.Right, subtractExpression.Left);
                    case "Seconds":
                        return objectContext.DiffSecondsOffsetExpression(subtractExpression.Right, subtractExpression.Left);
                    case "Milliseconds":
                        return objectContext.DiffMillisecondsOffsetExpression(subtractExpression.Right, subtractExpression.Left);
                }
            }
        }
        return null;
    }

    public static Expression TransformMethodCall(MethodCallExpression expression, IObjectContext objectContext, Func<Expression, Expression> transformExp)
    {
        return TransformMethodCall(transformExp(expression.Object), expression.Method, expression.Arguments.Select(a => transformExp(a)).ToList(), objectContext) ?? expression;
    }

    public static Expression TransformMethodCall(Expression source, MethodInfo method, List<Expression> arguments, IObjectContext objectContext)
    {
        if (source != null && arguments.Count == 1)
        {
            if (source.Type == typeof(DateTime) && method.DeclaringType == typeof(DateTime))
            {
                switch (method.Name)
                {
                    case "AddYears":
                        return objectContext.AddYearsExpression(source, arguments[0]);
                    case "AddMonths":
                        return objectContext.AddMonthsExpression(source, arguments[0]);
                    case "AddDays":
                        return objectContext.AddDaysExpression(source, ConvertDoubleToInt(arguments[0]));
                    case "AddHours":
                        return objectContext.AddHoursExpression(source, ConvertDoubleToInt(arguments[0]));
                    case "AddMinutes":
                        return objectContext.AddMinutesExpression(source, ConvertDoubleToInt(arguments[0]));
                    case "AddSeconds":
                        return objectContext.AddSecondsExpression(source, ConvertDoubleToInt(arguments[0]));
                    case "AddMilliseconds":
                        return objectContext.AddMillisecondsExpression(source, ConvertDoubleToInt(arguments[0]));
                }
            }
            else if (source.Type == typeof(DateTimeOffset) && method.DeclaringType == typeof(DateTimeOffset))
            {
                switch (method.Name)
                {
                    case "AddYears":
                        return objectContext.AddYearsOffsetExpression(source, arguments[0]);
                    case "AddMonths":
                        return objectContext.AddMonthsOffsetExpression(source, arguments[0]);
                    case "AddDays":
                        return objectContext.AddDaysOffsetExpression(source, ConvertDoubleToInt(arguments[0]));
                    case "AddHours":
                        return objectContext.AddHoursOffsetExpression(source, ConvertDoubleToInt(arguments[0]));
                    case "AddMinutes":
                        return objectContext.AddMinutesOffsetExpression(source, ConvertDoubleToInt(arguments[0]));
                    case "AddSeconds":
                        return objectContext.AddSecondsOffsetExpression(source, ConvertDoubleToInt(arguments[0]));
                    case "AddMilliseconds":
                        return objectContext.AddMillisecondsOffsetExpression(source, ConvertDoubleToInt(arguments[0]));
                }
            }
        }
        if (source == null && method.DeclaringType == typeof(Math))
        {
            var parameters = method.GetParameters();
            switch (method.Name)
            {
                case "Abs":
                    if (parameters.Length == 1)
                    {
                        if (parameters[0].ParameterType == typeof(short))
                            return objectContext.AbsInt16Expression(arguments[0]);
                        if (parameters[0].ParameterType == typeof(int))
                            return objectContext.AbsInt32Expression(arguments[0]);
                        if (parameters[0].ParameterType == typeof(long))
                            return objectContext.AbsInt64Expression(arguments[0]);
                        if (parameters[0].ParameterType == typeof(float))
                            return objectContext.AbsSingleExpression(arguments[0]);
                        if (parameters[0].ParameterType == typeof(double))
                            return objectContext.AbsDoubleExpression(arguments[0]);
                        if (parameters[0].ParameterType == typeof(decimal))
                            return objectContext.AbsDecimalExpression(arguments[0]);
                    }
                    throw new NotImplementedException();
                case "Ceiling":
                    if (parameters.Length == 1)
                    {
                        if (parameters[0].ParameterType == typeof(double))
                            return objectContext.CeilingDoubleExpression(arguments[0]);
                        if (parameters[0].ParameterType == typeof(decimal))
                            return objectContext.CeilingDecimalExpression(arguments[0]);
                    }
                    throw new NotImplementedException();
                case "Floor":
                    if (parameters.Length == 1)
                    {
                        if (parameters[0].ParameterType == typeof(double))
                            return objectContext.FloorDoubleExpression(arguments[0]);
                        if (parameters[0].ParameterType == typeof(decimal))
                            return objectContext.FloorDecimalExpression(arguments[0]);
                    }
                    throw new NotImplementedException();
                case "Pow":
                    if (parameters.Length == 2)
                    {
                        if (parameters[0].ParameterType == typeof(double) && parameters[1].ParameterType == typeof(double))
                            return objectContext.PowDoubleExpression(arguments[0], arguments[1]);
                    }
                    break;
                case "Round":
                    switch (parameters.Length)
                    {
                        case 1: 
                            if (parameters[0].ParameterType == typeof(double))
                                return objectContext.RoundToEvenDoubleExpression(arguments[0]);
                            if (parameters[0].ParameterType == typeof(decimal))
                                return objectContext.RoundToEvenDecimalExpression(arguments[0]);
                            throw new NotImplementedException();
                        case 2:
                            if (parameters[0].ParameterType == typeof(double))
                            {
                                if (parameters[1].ParameterType == typeof(int))
                                    return objectContext.RoundToEvenDoubleExpression(arguments[0], arguments[1]);
                                if (parameters[1].ParameterType == typeof(MidpointRounding))
                                {
                                    MidpointRounding midpointRouting;
                                    var constantExp = arguments[1] as ConstantExpression;
                                    if (constantExp != null)
                                        midpointRouting = (MidpointRounding)constantExp.Value;
                                    else
                                        midpointRouting = Expression.Lambda<Func<MidpointRounding>>(arguments[1]).Compile()();
                                    if (midpointRouting == MidpointRounding.ToEven)
                                        return objectContext.RoundToEvenDoubleExpression(arguments[0]);
                                    if (midpointRouting == MidpointRounding.AwayFromZero)
                                        return objectContext.RoundAwayFromZeroDoubleExpression(arguments[0]);
                                }
                            }
                            else if (parameters[0].ParameterType == typeof(decimal))
                            {
                                if (parameters[1].ParameterType == typeof(int))
                                    return objectContext.RoundToEvenDecimalExpression(arguments[0], arguments[1]);
                                if (parameters[1].ParameterType == typeof(MidpointRounding))
                                {
                                    MidpointRounding midpointRouting;
                                    var constantExp = arguments[1] as ConstantExpression;
                                    if (constantExp != null)
                                        midpointRouting = (MidpointRounding)constantExp.Value;
                                    else
                                        midpointRouting = Expression.Lambda<Func<MidpointRounding>>(arguments[1]).Compile()();
                                    if (midpointRouting == MidpointRounding.ToEven)
                                        return objectContext.RoundToEvenDecimalExpression(arguments[0]);
                                    if (midpointRouting == MidpointRounding.AwayFromZero)
                                        return objectContext.RoundAwayFromZeroDecimalExpression(arguments[0]);
                                }
                            }
                            break;
                        case 3:
                            if (parameters[1].ParameterType == typeof(int) && parameters[2].ParameterType == typeof(MidpointRounding))
                            {
                                MidpointRounding midpointRouting;
                                var constantExp = arguments[2] as ConstantExpression;
                                if (constantExp != null)
                                    midpointRouting = (MidpointRounding)constantExp.Value;
                                else
                                    midpointRouting = Expression.Lambda<Func<MidpointRounding>>(arguments[2]).Compile()();
                                if (parameters[0].ParameterType == typeof(double))
                                {
                                    if (midpointRouting == MidpointRounding.ToEven)
                                        return objectContext.RoundToEvenDoubleExpression(arguments[0], arguments[1]);
                                    if (midpointRouting == MidpointRounding.AwayFromZero)
                                        return objectContext.RoundAwayFromZeroDoubleExpression(arguments[0], arguments[1]);
                                }
                                else if (parameters[0].ParameterType == typeof(decimal))
                                {
                                    if (midpointRouting == MidpointRounding.ToEven)
                                        return objectContext.RoundToEvenDecimalExpression(arguments[0], arguments[1]);
                                    if (midpointRouting == MidpointRounding.AwayFromZero)
                                        return objectContext.RoundAwayFromZeroDecimalExpression(arguments[0], arguments[1]);
                                }
                            }
                            break;
                    }
                    throw new NotImplementedException();
                case "Truncate":
                    if (parameters.Length == 1)
                    {
                        if (parameters[0].ParameterType == typeof(double))
                            return objectContext.TruncateDoubleExpression(arguments[0]);
                        if (parameters[0].ParameterType == typeof(decimal))
                            return objectContext.TruncateDecimalExpression(arguments[0]);
                    }
                    throw new NotImplementedException();
            }
        }
        return null;
    }

    private static Expression ConvertDoubleToInt(Expression exp)
    {
        MemberExpression me;
        if (! (exp is ConstantExpression) && ((me = exp as MemberExpression) == null || me.Expression.NodeType != ExpressionType.Constant))
            return Expression.Convert(exp, typeof(int));
        int value = (int)Expression.Lambda<Func<double>>(exp).Compile()();
        return Expression.Constant(value);
    }

    public static Expression TransformBinary(BinaryExpression expression, IObjectContext objectContext, Func<Expression, Expression> transformExp)
    {
        return TransformBinary(expression.NodeType.ToString(), transformExp(expression.Left), transformExp(expression.Right), objectContext) ?? expression;
    }

    public static Expression TransformBinary(string nodeType, Expression leftExpression, Expression rightExpression, IObjectContext objectContext)
    {
        bool dateTimeExp = leftExpression.Type == typeof(DateTime);
        if ((dateTimeExp || leftExpression.Type == typeof(DateTimeOffset)) && rightExpression.Type == typeof(TimeSpan))
        {
            bool subtract = false;
            switch (nodeType)
            {
                case "Add":
                    break;
                case "Subtract":
                    subtract = true;
                    break;
                default:
                    return null;
            }
        
            Expression daysExp, hoursExp, minutesExp, secondsExp, milliSecondsExp;
            var rightNew = rightExpression as NewExpression;
            MemberExpression rightMember = null;
            ConstantExpression constantExpression = null;
        
            bool argsCountValid = false;
            if (rightNew != null && (argsCountValid = (rightNew.Arguments.Count > 3)) && ((constantExpression = rightNew.Arguments[0] as ConstantExpression) != null || (rightMember = rightNew.Arguments[0] as MemberExpression) != null && rightMember.Expression is ConstantExpression))
            {
                var days = constantExpression == null ? Expression.Lambda<Func<int>>(rightMember).Compile()() : (int)constantExpression.Value;
                if (subtract)
                    days = -days;
                Expression<Func<int>> fieldConstant = () => days;
                daysExp = days == 0 ? null : fieldConstant.Body;
            }
            else if (argsCountValid)
            {
                daysExp = Expression.MakeMemberAccess(rightExpression, typeof(TimeSpan).GetProperty("Days"));
                if (subtract)
                    daysExp = Expression.MakeUnary(ExpressionType.Negate, daysExp, typeof(int));
            }
            else
                daysExp = null;
        
            argsCountValid = false;
            if (rightNew != null && (argsCountValid = (rightNew.Arguments.Count > 2)) && ((constantExpression = rightNew.Arguments[rightNew.Arguments.Count == 3 ? 0 : 1] as ConstantExpression) != null || (rightMember = rightNew.Arguments[rightNew.Arguments.Count == 3 ? 0 : 1] as MemberExpression) != null && rightMember.Expression is ConstantExpression))
            {
                var hours = constantExpression == null ? Expression.Lambda<Func<int>>(rightMember).Compile()() : (int)constantExpression.Value;
                if (subtract)
                    hours = -hours;
                Expression<Func<int>> fieldConstant = () => hours;
                hoursExp = hours == 0 ? null : fieldConstant.Body;
            }
            else if (argsCountValid)
            {
                hoursExp = Expression.MakeMemberAccess(rightExpression, typeof(TimeSpan).GetProperty("Hours"));
                if (subtract)
                    hoursExp = Expression.MakeUnary(ExpressionType.Negate, hoursExp, typeof(int));
            }
            else
                hoursExp = null;
        
            argsCountValid = false;
            if (rightNew != null && (argsCountValid = (rightNew.Arguments.Count > 2)) && ((constantExpression = rightNew.Arguments[rightNew.Arguments.Count == 3 ? 1 : 2] as ConstantExpression) != null || (rightMember = rightNew.Arguments[rightNew.Arguments.Count == 3 ? 1 : 2] as MemberExpression) != null && rightMember.Expression is ConstantExpression))
            {
                var minutes = constantExpression == null ? Expression.Lambda<Func<int>>(rightMember).Compile()() : (int)constantExpression.Value;
                if (subtract)
                    minutes = -minutes;
                Expression<Func<int>> fieldConstant = () => minutes;
                minutesExp = minutes == 0 ? null : fieldConstant.Body;
            }
            else if (argsCountValid)
            {
                minutesExp = Expression.MakeMemberAccess(rightExpression, typeof(TimeSpan).GetProperty("Minutes"));
                if (subtract)
                    minutesExp = Expression.MakeUnary(ExpressionType.Negate, minutesExp, typeof(int));
            }
            else
                minutesExp = null;
        
            argsCountValid = false;
            if (rightNew != null && (argsCountValid = (rightNew.Arguments.Count > 2)) && ((constantExpression = rightNew.Arguments[rightNew.Arguments.Count == 3 ? 2 : 3] as ConstantExpression) != null || (rightMember = rightNew.Arguments[rightNew.Arguments.Count == 3 ? 2 : 3] as MemberExpression) != null && rightMember.Expression is ConstantExpression))
            {
                var seconds = constantExpression == null ? Expression.Lambda<Func<int>>(rightMember).Compile()() : (int)constantExpression.Value;
                if (subtract)
                    seconds = -seconds;
                Expression<Func<int>> fieldConstant = () => seconds;
                secondsExp = seconds == 0 ? null : fieldConstant.Body;
            }
            else if (argsCountValid)
            {
                secondsExp = Expression.MakeMemberAccess(rightExpression, typeof(TimeSpan).GetProperty("Seconds"));
                if (subtract)
                    secondsExp = Expression.MakeUnary(ExpressionType.Negate, secondsExp, typeof(int));
            }
            else
                secondsExp = null;
        
            argsCountValid = false;
            if (rightNew != null && (argsCountValid = (rightNew.Arguments.Count > 4)) && ((constantExpression = rightNew.Arguments[4] as ConstantExpression) != null || (rightMember = rightNew.Arguments[4] as MemberExpression) != null && rightMember.Expression is ConstantExpression))
            {
                var milliseconds = constantExpression == null ? Expression.Lambda<Func<int>>(rightMember).Compile()() : (int)constantExpression.Value;
                if (subtract)
                    milliseconds = -milliseconds;
                Expression<Func<int>> fieldConstant = () => milliseconds;
                milliSecondsExp = milliseconds == 0 ? null : fieldConstant.Body;
            }
            else if (argsCountValid)
            {
                milliSecondsExp = Expression.MakeMemberAccess(rightExpression, typeof(TimeSpan).GetProperty("Milliseconds"));
                if (subtract)
                    milliSecondsExp = Expression.MakeUnary(ExpressionType.Negate, milliSecondsExp, typeof(int));
            }
            else
                milliSecondsExp = null;
        
            var value = leftExpression;
            if (daysExp != null)
            {
                if (dateTimeExp)
                    value = objectContext.AddDaysExpression(value, daysExp);
                else
                    value = objectContext.AddDaysOffsetExpression(value, daysExp);
            }
            if (hoursExp != null)
            {
                if (dateTimeExp)
                    value = objectContext.AddHoursExpression(value, hoursExp);
                else 
                    value = objectContext.AddHoursOffsetExpression(value, hoursExp);
            }
            if (minutesExp != null)
            {
                if (dateTimeExp)
                    value = objectContext.AddMinutesExpression(value, minutesExp);
                else
                    value = objectContext.AddMinutesOffsetExpression(value, minutesExp);
            }
            if (secondsExp != null)
            {
                if (dateTimeExp)
                    value = objectContext.AddSecondsExpression(value, secondsExp);
                else
                    value = objectContext.AddSecondsOffsetExpression(value, secondsExp);
            }
            if (milliSecondsExp != null)
            {
                if (dateTimeExp)
                    value = objectContext.AddMillisecondsExpression(value, milliSecondsExp);
                else
                    value = objectContext.AddMillisecondsOffsetExpression(value, milliSecondsExp);
            }
            return value;
        }
        return null;
    }
}
<#+
    WriteFooter(namespaceName + ".L2E");

    fileManager.StartNewFile("QueryableInclude.cs");
    WriteHeader(namespaceName, code, "System");
#>
public class QueryableInclude
{
    public IWAQSQueryBase[] Queries { get; set; }
    public Func<object, object[], object> Load { get; set; }
    public string Path { get; set; }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IWAQSQueryBase.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", "System.Linq.Expressions");
#>
public interface IWAQSQueryBase
{
    IDataContext DataContext { get; }
    IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> QueryableIncludes { get; set; }
    IEnumerable<string> WithSpecifications { get; set; }
    Func<Expression, Expression> ExpressionTransformation { get; }
    bool FromQuery { get; set; }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IWAQSQueryValue.cs");
    WriteHeader(namespaceName, code, "System.Linq.Expressions", "System.Threading", "System.Threading.Tasks");
#>
public interface IWAQSQueryValue : IWAQSQueryBase
{
    WAQSQueryProvider WAQSQueryProvider { get; }
    Expression Expression { get; }
    object Execute();
<#+
    CompleteIWAQSQueryValue();
#>
}
public interface IWAQSQueryValue<T> : IWAQSQueryValue
{
    new T Execute();
<#+
    CompleteIWAQSQueryValueOfT();
#>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IWAQSQuery.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading", "System.Threading.Tasks");
#>
public interface IWAQSQuery : IWAQSQueryBase, IQueryable, IOrderedQueryable
{
    IAsyncQueryProviderFactory AsyncQueryProviderFactory { get; }
<#+
    CompleteIWAQSQuery();
#>
}
public interface IWAQSQuery<out T> : IWAQSQuery, IQueryable<T>, IOrderedQueryable<T>
{
<#+
    CompleteIWAQSQueryOfT();
#>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("WAQSQueryValue.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", "System.Linq.Expressions", "System.Threading", "System.Threading.Tasks");
#>
public class WAQSQueryValue : IWAQSQueryValue
{
    public WAQSQueryValue(IWAQSQueryValue waqsQueryValue)
        : this(waqsQueryValue.WAQSQueryProvider, waqsQueryValue.DataContext, waqsQueryValue.Expression)
    {
    }	
    public WAQSQueryValue(WAQSQueryProvider waqsQueryProvider, IDataContext dataContext, Expression expression)
    {
        WAQSQueryProvider = waqsQueryProvider;
        DataContext = dataContext;
        Expression = expression;
    }
    
    private static Dictionary<Type, Type> _withTypes;
    protected internal static Dictionary<Type, Type> WithTypes
    {
        get { return _withTypes ?? (_withTypes = new Dictionary<Type, Type>()); }
    }

    public WAQSQueryProvider WAQSQueryProvider { get; private set; }
    public IDataContext DataContext { get; private set; }
    public Expression Expression { get; private set; }
    public IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> QueryableIncludes { get; set; }
    public IEnumerable<string> WithSpecifications { get; set; }
    public Func<Expression, Expression> ExpressionTransformation
    {
        get { return WAQSQueryProvider.ExpressionTransformation; }
    }
    public bool FromQuery { get; set; }

    public object Execute()
    {
        return WAQSQueryProvider.Execute(Expression);
    }
<#+
    CompleteWAQSQueryValue();
#>
}
public class WAQSQueryValue<T> : WAQSQueryValue, IWAQSQueryValue<T>
{
    public WAQSQueryValue(IWAQSQueryValue<T> waqsQueryValue)
        : this(waqsQueryValue.WAQSQueryProvider, waqsQueryValue.DataContext, waqsQueryValue.Expression)
    {
    }	
    public WAQSQueryValue(WAQSQueryProvider waqsQueryProvider, IDataContext dataContext, Expression expression)
        : base(waqsQueryProvider, dataContext, expression)
    {
    }

    public new T Execute()
    {
        return WAQSQueryProvider.Execute<T>(Expression);
    }
<#+
    CompleteWAQSQueryValueOfT();
#>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IncludeMethodAttribute.cs");
    WriteHeader(namespaceName, code, "System");
#>
public class IncludeMethodAttribute : Attribute
{
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("WAQSQuery.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading", "System.Threading.Tasks", serverFxCommonNamespace, serverFxEntitiesNamespace);
#>
public class WAQSQuery : IWAQSQuery
{
    private IQueryable _queryable;
                
    public WAQSQuery(IWAQSQuery source)
        : this(source.DataContext, source, source.AsyncQueryProviderFactory, source.ExpressionTransformation)
    {
    }
    public WAQSQuery(IDataContext dataContext, IQueryable queryable, IAsyncQueryProviderFactory asyncQueryProviderFactory, Func<Expression, Expression> expressionTransformation)
    {
        DataContext = dataContext;
        _queryable = queryable;
        AsyncQueryProviderFactory = asyncQueryProviderFactory;
        ExpressionTransformation = expressionTransformation;
    }
                
    private static Dictionary<Type, WithType> _withTypes;
    public static Dictionary<Type, WithType> WithTypes
    {
        get { return _withTypes ?? (_withTypes = new Dictionary<Type, WithType>()); }
    }
                
    public IDataContext DataContext { get; private set; }
    public IAsyncQueryProviderFactory AsyncQueryProviderFactory { get; private set; }
    public Func<Expression, Expression> ExpressionTransformation { get; private set; }
    public bool FromQuery { get; set; }
                
    public Type ElementType
    {
        get { return _queryable.ElementType; }
    }
                
    public Expression Expression
    {
        get { return _queryable.Expression; }
    }
                
    private IQueryProvider _provider;
    public IQueryProvider Provider
    {
        get { return _provider ?? (_provider = new WAQSQueryProvider(DataContext, _queryable.Provider, AsyncQueryProviderFactory, ExpressionTransformation)); }
    }
    
    private Expression InitWith()
    {
        return ApplyWith().Expression;
    }
    
    private IEnumerable<T> GetEnumerableWithoutInclude<T>(Func<IQueryProvider, Tuple<IEnumerator, Func<T>>> enumeratorFactory)
    {
        var enumerator = enumeratorFactory(((WAQSQueryProvider)Provider).SourceProvider);
        while (enumerator.Item1.MoveNext())
        {
            EntitiesInitializer.FromQuery = true;
            var o = enumerator.Item2();
            EntitiesInitializer.FromQuery = false;
            WithType withType;
            if (WAQSQuery.WithTypes.TryGetValue(typeof(T), out withType))
                o = (T)withType.TransformToOriginalType(o);
            yield return o;
        }
    }
    
    protected IEnumerable<T> GetEnumerable<T>()
    {
        var expression = InitWith();
        try
        {
            if (!(FromQuery || QueryableIncludes == null) && QueryableIncludes.Any())
            {
                var value = new List<T>(GetEnumerableWithoutInclude<T>(provider => GetQueryEnumerator<T>(provider, expression)));
                LoadIncludes(this, value: value, withValue: true);
                return value;
            }
            return GetEnumerableWithoutInclude<T>(provider => GetQueryEnumerator<T>(provider, expression));
        }
        finally
        {
            EntitiesInitializer.FromQuery = false;
        }
    }
            
    protected internal virtual IQueryable ApplyWith()
    {
        return this;
    }
    
    protected virtual Tuple<IEnumerator, Func<T>> GetQueryEnumerator<T>(IQueryProvider provider, Expression expression)
    {
        var q = provider.CreateQuery(expression);
        var enumerator = q.GetEnumerator();
        return new Tuple<IEnumerator, Func<T>>(enumerator, () => (T)enumerator.Current);
    }
                
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerable<object>().GetEnumerator();
    }
                
    public IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> QueryableIncludes { get; set; }
    public IEnumerable<string> WithSpecifications { get; set; }
                
    protected internal static object LoadIncludes(IWAQSQueryBase queryBase, Dictionary<string, object> addedIncludesPathes = null, object value = null, bool withValue = false, string path = null)
    {
        if (addedIncludesPathes == null)
            addedIncludesPathes = new Dictionary<string, object>();
        if (!withValue)
        {
            var query = queryBase as IWAQSQuery;
            IWAQSQueryValue queryValue;
            if (query != null)
            {
                var queryType = query.GetType();
                if (!queryType.IsGenericType)
                    throw new InvalidOperationException();
                query.FromQuery = true;
                value = typeof(Enumerable).GetMethod("ToList").MakeGenericMethod(queryType.GetGenericArguments()[0]).Invoke(null, new object[] { query });
            }
            else if ((queryValue = queryBase as IWAQSQueryValue) != null)
            {
                queryValue.FromQuery = true;
                value = queryValue.Execute();
            }
            else
                throw new InvalidOperationException();
        }
        if (queryBase.QueryableIncludes != null)
            foreach (var include in queryBase.QueryableIncludes)
            {
                var queryableInclude = include(queryBase);
                object includeValue = null;
                bool includeWithValue = false;
                if (queryableInclude.Path == null || !(includeWithValue = addedIncludesPathes.TryGetValue(queryableInclude.Path, out includeValue)))
                    queryableInclude.Load(value, queryableInclude.Queries.Select(q => LoadIncludes(q, addedIncludesPathes, includeValue, includeWithValue, queryableInclude.Path)).ToArray());
                else
                    foreach (var query in queryableInclude.Queries)
                        LoadIncludes(query, addedIncludesPathes, includeValue, includeWithValue, queryableInclude.Path);
            }
        return value;
    }
<#+
    CompleteWAQSQuery();
#>
}
                
public class WAQSQuery<T> : WAQSQuery, IWAQSQuery<T>
{
    public WAQSQuery(IWAQSQuery<T> source)
        : this(source.DataContext, source, source.AsyncQueryProviderFactory, source.ExpressionTransformation)
    {
    }
    public WAQSQuery(IDataContext dataContext, IQueryable<T> queryable, IAsyncQueryProviderFactory asyncQueryProviderFactory, Func<Expression, Expression> expressionTransformation)
        : base(dataContext, queryable, asyncQueryProviderFactory, expressionTransformation)
    {
    }
    
    protected override Tuple<IEnumerator, Func<T2>> GetQueryEnumerator<T2>(IQueryProvider provider, Expression expression)
    {
        if (typeof(T2) != typeof(T))
            return base.GetQueryEnumerator<T2>(provider, expression);
        var q = provider.CreateQuery<T2>(expression);
        var enumerator = q.GetEnumerator();
        return new Tuple<IEnumerator, Func<T2>>(enumerator, () => enumerator.Current);
    }
            
    protected internal override IQueryable ApplyWith()
    {
        if (WithSpecifications == null || !WithSpecifications.Any())
            return this;
            
        WithType withType;
        if (!WithTypes.TryGetValue(typeof(T), out withType))
            throw new InvalidOperationException();
        ParameterExpression lambdaParameter = Expression.Parameter(typeof(T));
        var bindings = new List<MemberAssignment>();
        bindings.Add(Expression.Bind(withType.Type.GetProperty(typeof(T).Name), lambdaParameter));
        foreach (var with in WithSpecifications)
            bindings.Add(Expression.Bind(withType.Type.GetProperty(with), DataContext.GetExpression(typeof(T), with, lambdaParameter)));
        var expression = Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Select" && m.GetParameters()[1].ParameterType.GetGenericArguments()[0].GetGenericArguments().Length == 2).MakeGenericMethod(typeof(T), withType.Type), Expression, Expression.Lambda(Expression.MemberInit(Expression.New(withType.Type.GetConstructor(new Type[0])), bindings), lambdaParameter));
        return Provider.CreateQuery<T>(expression);
    }
                
    public IEnumerator<T> GetEnumerator()
    {
        return GetEnumerable<T>().GetEnumerator();
    }
                
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
<#+
    CompleteWAQSQueryOfT();
#>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("WithType.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", "System.Linq.Expressions");
#>
public class WithType
{
    public Type Type { get; set; }
    public Func<object, object> TransformToOriginalType { get; set; }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("WAQSQueryProvider.cs");
    WriteHeader(namespaceName, code, "System", "System.Linq", "System.Linq.Expressions", "System.Threading", "System.Threading.Tasks", serverFxCommonNamespace, serverFxEntitiesNamespace);
#>
public class WAQSQueryProvider : IQueryProvider
{
    private IDataContext _dataContext;
    
    public WAQSQueryProvider(IDataContext dataContext, IQueryProvider sourceProvider, IAsyncQueryProviderFactory asyncQueryProviderFactory, Func<Expression, Expression> expressionTransformation)
    {
        _dataContext = dataContext;
        WAQSQueryProvider waqsQueryProvider;
        while ((waqsQueryProvider = sourceProvider as WAQSQueryProvider) != null)
            sourceProvider = waqsQueryProvider.SourceProvider;
        SourceProvider = sourceProvider;
        AsyncQueryProviderFactory = asyncQueryProviderFactory;
        ExpressionTransformation = expressionTransformation;
    }
                     
    internal IQueryProvider SourceProvider { get; private set; }
    public IAsyncQueryProviderFactory AsyncQueryProviderFactory { get; private set; }
    public Func<Expression, Expression> ExpressionTransformation { get; private set; }   
                            
    public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
    {
        return new WAQSQuery<TElement>(_dataContext, SourceProvider.CreateQuery<TElement>(expression), AsyncQueryProviderFactory, ExpressionTransformation);
    }
                            
    public IQueryable CreateQuery(Expression expression)
    {
        return new WAQSQuery(_dataContext, SourceProvider.CreateQuery(expression), AsyncQueryProviderFactory, ExpressionTransformation);
    }
                    
    private TResult Execute<TResult>(Expression expression, Func<Expression, TResult> execute, Func<TResult, TResult> fromWith = null)
    {
        bool fromQuery = EntitiesInitializer.FromQuery;
        if (! fromQuery)
            EntitiesInitializer.FromQuery = true;
        var result = execute(expression);
        if (fromWith != null)
            result = fromWith(result);
        if (!fromQuery)
        {
            if (!(CurrentQuery == null || CurrentQuery.QueryableIncludes == null))
                WAQSQuery.LoadIncludes(CurrentQuery, value: new TResult[] { result }, withValue: true);
            EntitiesInitializer.FromQuery = false;
        }
        return result;
    }
                        
    public TResult Execute<TResult>(Expression expression)
    {
        Func<TResult, TResult> fromWith = null;
        if (CurrentQuery != null && CurrentQuery.WithSpecifications != null && CurrentQuery.WithSpecifications.Any())
        {
            var query = ((WAQSQuery)CurrentQuery).ApplyWith();
            expression = Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == ((MethodCallExpression)expression).Method.Name && m.GetParameters().Length == 1).MakeGenericMethod(typeof(TResult)), query.Expression);
            fromWith = item =>
            {
                WithType withType;
                if (WAQSQuery.WithTypes.TryGetValue(typeof (TResult), out withType))
                    item = (TResult)withType.TransformToOriginalType(item);
                return item;
            };
        }
        return Execute<TResult>(expression, e => SourceProvider.Execute<TResult>(e), fromWith);
    }
                                
    public object Execute(Expression expression)
    {
        return Execute<object>(expression, e => SourceProvider.Execute(e));
    }
                    
    public IWAQSQuery CurrentQuery { get; set; }
<#+
    CompleteWAQSQueryProvider();
#>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("QueryableExtensions.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Reflection", "System.Threading", "System.Threading.Tasks", serverFxCommonNamespace, serverFxEntitiesNamespace);
#>
public static class QueryableExtensions
{
    private static Expression<Func<T1, TResult>> GetExpression<TSource, T1, TResult>(IWAQSQuery<TSource> source, Expression<Func<T1, TResult>> exp)
    {
        if (exp != null)
            exp = (Expression<Func<T1, TResult>>)source.ExpressionTransformation(exp);
        return exp;
    }

    private static Expression<Func<T1, T2, TResult>> GetExpression<TSource, T1, T2, TResult>(IWAQSQuery<TSource> source, Expression<Func<T1, T2, TResult>> exp)
    {
        if (exp != null)
            exp = (Expression<Func<T1, T2, TResult>>)source.ExpressionTransformation(exp);
        return exp;
    }

    public static bool All<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        return Queryable.All(source, GetExpression(source, predicate));
    }

    public static bool Any<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        return Queryable.Any(source, GetExpression(source, predicate));
    }

    public static decimal? Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, decimal?>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static decimal Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, decimal>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static double? Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, double?>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static double Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, double>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static float? Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, float?>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static float Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, float>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static double? Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, int?>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static double Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, int>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static double? Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, long?>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static double Average<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, long>> selector)
    {
        return Queryable.Average(source, GetExpression(source, selector));
    }

    public static IWAQSQuery<TResult> Cast<TResult>(this IWAQSQuery source)
    {
        return ApplyIncludesAndWiths(source, Queryable.Cast<TResult>(source));
    }

    public static int Count<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        return Queryable.Count(source, GetExpression(source, predicate));
    }
                                            
    public static IWAQSQuery<TSource> DefaultIfEmpty<TSource>(this IWAQSQuery<TSource> source)
    {
        return ApplyIncludesAndWiths(source, Queryable.DefaultIfEmpty(source));
    }
                                            
    public static IWAQSQuery<TSource> Distinct<TSource>(this IWAQSQuery<TSource> source)
    {
        return ApplyIncludesAndWiths(source, Queryable.Distinct(source));
    }
                                            
    public static IWAQSQuery<TSource> Except<TSource>(this IWAQSQuery<TSource> source1, IWAQSQuery<TSource> source2)
    {
        return (IWAQSQuery<TSource>)Queryable.Except(source1, source2);
    }
                    
    public static TSource First<TSource>(this IWAQSQuery<TSource> source)
    {
        ((WAQSQueryProvider)source.Provider).CurrentQuery = source.Take(1);
        return Queryable.First(source);
    }
                    
    public static TSource First<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        predicate = GetExpression(source, predicate);
        ((WAQSQueryProvider)source.Provider).CurrentQuery = source.Where(predicate).Take(1);
        return Queryable.First(source, predicate);
    }
                    
    public static TSource FirstOrDefault<TSource>(this IWAQSQuery<TSource> source)
    {
        ((WAQSQueryProvider)source.Provider).CurrentQuery = source.Take(1);
        return Queryable.FirstOrDefault(source);
    }
                    
    public static TSource FirstOrDefault<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        predicate = GetExpression(source, predicate);
        ((WAQSQueryProvider)source.Provider).CurrentQuery = source.Where(predicate).Take(1);
        return Queryable.FirstOrDefault(source, predicate);
    }
                                            
    public static IWAQSQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    {
        return CreateWAQSQuery<IGrouping<TKey, TSource>>(source.DataContext, Queryable.GroupBy(source, GetExpression(source, keySelector)), source.AsyncQueryProviderFactory, source.ExpressionTransformation);
    }

    public static IWAQSQuery<TResult> GroupBy<TSource, TKey, TResult>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector)
    {
        return CreateWAQSQuery<TResult>(source.DataContext, Queryable.GroupBy(source, GetExpression(source, keySelector), GetExpression(source, resultSelector)), source.AsyncQueryProviderFactory, source.ExpressionTransformation);
    }

    public static IWAQSQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector)
    {
        return CreateWAQSQuery<IGrouping<TKey, TElement>>(source.DataContext, Queryable.GroupBy(source, GetExpression(source, keySelector), GetExpression(source, elementSelector)), source.AsyncQueryProviderFactory, source.ExpressionTransformation);
    }

    public static IWAQSQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TSource, TElement>> elementSelector, Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector)
    {
        return CreateWAQSQuery<TResult>(source.DataContext, Queryable.GroupBy(source, GetExpression(source, keySelector), GetExpression(source, elementSelector), GetExpression(source, resultSelector)), source.AsyncQueryProviderFactory, source.ExpressionTransformation);
    }
                                            
    public static IWAQSQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IWAQSQuery<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector)
    {
        return CreateWAQSQuery<TResult>(outer.DataContext, Queryable.GroupJoin(outer, inner, GetExpression(outer, outerKeySelector), GetExpression(outer, innerKeySelector), GetExpression(outer, resultSelector)), outer.AsyncQueryProviderFactory, outer.ExpressionTransformation);
    }
                                                
    public static IWAQSQuery<TSource> Intersect<TSource>(this IWAQSQuery<TSource> source1, IWAQSQuery<TSource> source2)
    {
        return CreateWAQSQuery<TSource>(source1.DataContext, Queryable.Intersect(source1, source2), source1.AsyncQueryProviderFactory, source1.ExpressionTransformation);
    }
                                                
    public static IWAQSQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this IWAQSQuery<TOuter> outer, IWAQSQuery<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector)
    {
        return CreateWAQSQuery<TResult>(outer.DataContext, Queryable.Join(outer, inner, GetExpression(outer, outerKeySelector), GetExpression(inner, innerKeySelector), GetExpression(outer, resultSelector)), inner.AsyncQueryProviderFactory, inner.ExpressionTransformation);
    }

    public static long LongCount<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        return Queryable.LongCount(source, GetExpression(source, predicate));
    }

    public static TResult Max<TSource, TResult>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TResult>> selector)
    {
        return Queryable.Max(source, GetExpression(source, selector));
    }

    public static TResult Min<TSource, TResult>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TResult>> selector)
    {
        return Queryable.Min(source, GetExpression(source, selector));
    }

    public static IWAQSQuery<TResult> OfType<TResult>(this IWAQSQuery source)
    {
        if (source.ElementType == typeof(TResult))
            return (IWAQSQuery<TResult>)source;
        return ApplyIncludesAndWiths(source, Queryable.OfType<TResult>(source));
    }
                                                
    public static IWAQSQuery<TSource> OrderBy<TSource, TKey>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    {
        return ApplyIncludesAndWiths(source, Queryable.OrderBy(source, GetExpression(source, keySelector)));
    }
                                                
    public static IWAQSQuery<TSource> OrderByDescending<TSource, TKey>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    {
        return ApplyIncludesAndWiths(source, Queryable.OrderByDescending(source, GetExpression(source, keySelector)));
    }
                                                
    public static IWAQSQuery<TSource> Reverse<TSource>(this IWAQSQuery<TSource> source)
    {
        return ApplyIncludesAndWiths(source, Queryable.Reverse(source));
    }
                                                
    public static IWAQSQuery<TResult> Select<TSource, TResult>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TResult>> selector)
    {
        if (selector.Body == selector.Parameters[0])
            return (IWAQSQuery<TResult>)source;
        return CreateWAQSQuery<TResult>(source.DataContext, Queryable.Select(source, GetExpression(source, selector)), source.AsyncQueryProviderFactory, source.ExpressionTransformation);
    }
                                                
    public static IWAQSQuery<TResult> SelectMany<TSource, TResult>(this IWAQSQuery<TSource> source, Expression<Func<TSource, IEnumerable<TResult>>> selector)
    {
        return CreateWAQSQuery<TResult>(source.DataContext, Queryable.SelectMany(source, GetExpression(source, selector)), source.AsyncQueryProviderFactory, source.ExpressionTransformation);
    }
                                                
    public static IWAQSQuery<TResult> SelectMany<TSource, TCollection, TResult>(this IWAQSQuery<TSource> source, Expression<Func<TSource, IEnumerable<TCollection>>> collectionSelector, Expression<Func<TSource, TCollection, TResult>> resultSelector)
    {
        return CreateWAQSQuery<TResult>(source.DataContext, Queryable.SelectMany(source, GetExpression(source, collectionSelector), GetExpression(source, resultSelector)), source.AsyncQueryProviderFactory, source.ExpressionTransformation);
    }
                        
    public static TSource Single<TSource>(this IWAQSQuery<TSource> source)
    {
        ((WAQSQueryProvider)source.Provider).CurrentQuery = source.Take(1);
        return Queryable.Single(source);
    }
                        
    public static TSource Single<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        predicate = GetExpression(source, predicate);
        ((WAQSQueryProvider)source.Provider).CurrentQuery = source.Where(predicate).Take(1);
        return Queryable.Single(source, predicate);
    }
                        
    public static TSource SingleOrDefault<TSource>(this IWAQSQuery<TSource> source)
    {
        ((WAQSQueryProvider)source.Provider).CurrentQuery = source.Take(1);
        return Queryable.SingleOrDefault(source);
    }
                        
    public static TSource SingleOrDefault<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        predicate = GetExpression(source, predicate);
        ((WAQSQueryProvider)source.Provider).CurrentQuery = source.Where(predicate).Take(1);
        return Queryable.SingleOrDefault(source, predicate);
    }
                                                
    public static IWAQSQuery<TSource> Skip<TSource>(this IWAQSQuery<TSource> source, int count)
    {
        return ApplyIncludesAndWiths(source, Queryable.Skip(source, count));
    }
                                                
    public static IWAQSQuery<TSource> Take<TSource>(this IWAQSQuery<TSource> source, int count)
    {
        return ApplyIncludesAndWiths(source, Queryable.Take(source, count));
    }

    public static decimal? Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, decimal?>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static decimal Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, decimal>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static double? Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, double?>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static double Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, double>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static float? Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, float?>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static float Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, float>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static int? Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, int?>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static int Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, int>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static long? Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, long?>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }

    public static long Sum<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, long>> selector)
    {
        return Queryable.Sum(source, GetExpression(source, selector));
    }
                
    public static IWAQSQuery<TSource> ThenBy<TSource, TKey>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    {
        return ApplyIncludesAndWiths(source, Queryable.ThenBy(source, GetExpression(source, keySelector)));
    }
                                                
    public static IWAQSQuery<TSource> ThenByDescending<TSource, TKey>(this IWAQSQuery<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    {
        return ApplyIncludesAndWiths(source, Queryable.ThenByDescending(source, GetExpression(source, keySelector)));
    }
                                                
    public static IWAQSQuery<TSource> Union<TSource>(this IWAQSQuery<TSource> source1, IWAQSQuery<TSource> source2)
    {
        return CreateWAQSQuery<TSource>(source1.DataContext, Queryable.Union(source1, source2), source1.AsyncQueryProviderFactory, source1.ExpressionTransformation);
    }
                                                
    public static IWAQSQuery<TSource> Where<TSource>(this IWAQSQuery<TSource> source, Expression<Func<TSource, bool>> predicate)
    {
        return ApplyIncludesAndWiths(source, Queryable.Where(source, GetExpression(source, predicate)));
    }
                                            
                                            
                                            
    public static Expression<Func<T, bool>> BuildOr<T>(IEnumerable<Expression<Func<T, bool>>> exps)
    {
        if (exps == null || !exps.Any())
            return Expression.Lambda<Func<T, bool>>(Expression.Constant(true, typeof(bool)), Expression.Parameter(typeof(T), "p" + Guid.NewGuid().ToString("N")));
        var parameterExpression = Expression.Parameter(typeof(T), "p" + Guid.NewGuid().ToString("N"));
        return Expression.Lambda<Func<T, bool>>(exps.Select(e => e.Body.ReplaceParameter(e.Parameters[0], parameterExpression)).Aggregate((e1, e2) => Expression.OrElse(e1, e2)), parameterExpression);
    }
                                            
                                            
                                            
    public static IWAQSQuery<TSource> Include<TSource, TInclude>(IWAQSQuery<TSource> source, params Func<IWAQSQueryBase, QueryableInclude>[] includes)
    {
        return CreateWAQSQuery<TSource>(source, source.QueryableIncludes == null ? includes : source.QueryableIncludes.Union(includes), source.WithSpecifications);
    }
                                
    public static IWAQSQueryValue<TSource> Include<TSource, TInclude>(IWAQSQueryValue<TSource> source, params Func<IWAQSQueryBase, QueryableInclude>[] includes)
    {
        return CreateWAQSQueryValue<TSource>(source.WAQSQueryProvider, source.DataContext, source.Expression, source.QueryableIncludes.Union(includes), source.WithSpecifications);
    }
    
    public static IWAQSQuery<OneT> IncludeOneToMany<OneT, ManyT>(IWAQSQuery<OneT> source, IWAQSQuery<ManyT> manyEntitySet, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<OneT, ManyT, bool>> anyExp, Expression<Func<IEnumerable<ManyT>, IEnumerable<ManyT>>> queryTransform, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection)
        where OneT : class, IEntity
        where ManyT : class, IEntity
    {
        return IncludeOneToMany<OneT, OneT, ManyT>(source, manyEntitySet, exp, anyExp, queryTransform, fkTest, getTrackableCollection);
    }
    
    public static IWAQSQuery<OneBaseT> IncludeOneToMany<OneBaseT, OneT, ManyT>(IWAQSQuery<OneBaseT> source, IWAQSQuery<ManyT> manyEntitySet, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<OneT, ManyT, bool>> anyExp, Expression<Func<IEnumerable<ManyT>, IEnumerable<ManyT>>> queryTransform, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection)
        where OneT : class, OneBaseT
        where OneBaseT : class, IEntity
        where ManyT : class, IEntity
    {
        return Include<OneBaseT, ManyT>(source, onesQuery =>
        {
            var include = new QueryableInclude();
            var onesQueryAsWAQSQuery = onesQuery as IWAQSQuery<OneBaseT>;
            IWAQSQueryBase subQuery;
            Func<object, object[], object> load;
            if (onesQueryAsWAQSQuery == null)
            {
                subQuery = CreateQuery(qt => CreateOneToOne((IWAQSQueryValue<OneBaseT>)onesQuery, exp, q => qt == null ? q.Select(e => e.Select(e2 => e2)) : q.Select(qt).Select(e => e.Select(e2 => e2))), queryTransform);
                load = (oneValues, manyValues) => IncludeOneOneToMany(source.DataContext, oneValues, manyValues, getTrackableCollection);
            }
            else
            {
                subQuery = CreateOneToManyQuery(onesQueryAsWAQSQuery.OfType<OneT>(), manyEntitySet, anyExp, ref queryTransform);
                if (queryTransform == null || queryTransform.Body is ParameterExpression)
                {
                    string path = ((MemberExpression)exp.Body).Member.Name;
                    include.Path = path;
                }
                load = (oneValues, manyValues) => IncludeOneToMany(oneValues, manyValues, fkTest, getTrackableCollection);
            }
            include.Queries = new IWAQSQueryBase[] { subQuery };
            include.Load = load;
            return include;
        });
    }
    
    public static IWAQSQuery<OneT> IncludeOneToMany<OneT, ManyT>(IWAQSQuery<OneT> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, ManyT>> queryTransform, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection)
        where OneT : class, IEntity
        where ManyT : class, IEntity
    {
        return IncludeOneToMany<OneT, OneT, ManyT>(source, exp, queryTransform, fkTest, getTrackableCollection);
    }
        
    public static IWAQSQuery<OneBaseT> IncludeOneToMany<OneBaseT, OneT, ManyT>(IWAQSQuery<OneBaseT> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, ManyT>> queryTransform, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection)
        where OneT : class, OneBaseT
        where OneBaseT : class, IEntity
        where ManyT : class, IEntity
    {
        return Include<OneBaseT, ManyT>(source, onesQuery =>
        {
            var include = new QueryableInclude();
            var onesQueryAsAsyncQueryable = onesQuery as IWAQSQuery<OneBaseT>;
            IWAQSQueryBase subQuery;
            Func<object, object[], object> load;
            if (onesQueryAsAsyncQueryable == null)
            {
                subQuery = CreateQuery(qt => CreateOneToOne((IWAQSQueryValue<OneBaseT>)onesQuery, exp, q => q.Select(qt)), queryTransform);
                load = (oneValues, manyValues) => IncludeOneOneToMany(source.DataContext, oneValues, manyValues, getTrackableCollection);
            }
            else
            {
                subQuery = CreateOneToManyQuery(onesQueryAsAsyncQueryable.OfType<OneT>(), exp, ref queryTransform);
                if (queryTransform == null || queryTransform.Body is ParameterExpression)
                {
                    string path = ((MemberExpression)exp.Body).Member.Name;
                    include.Path = path;
                }
                load = (oneValues, manyValues) => IncludeOneToMany(oneValues, manyValues, fkTest, getTrackableCollection);
            }
            include.Queries = new IWAQSQueryBase[] { subQuery };
            include.Load = load;
            return include;
        });
    }
                                            
    private static QueryT CreateQuery<QueryT, ExpressionT>(Func<Expression<ExpressionT>, QueryT> getQuery, Expression<ExpressionT> queryTransform)
        where QueryT : IWAQSQueryBase
    {
        return CreateQuery<QueryT, ExpressionT>(getQuery, ref queryTransform);
    }
                                            
    private static QueryT CreateQuery<QueryT, ExpressionT>(Func<Expression<ExpressionT>, QueryT> getQuery, ref Expression<ExpressionT> queryTransform)
        where QueryT : IWAQSQueryBase
    {
        var includeExpressionVisitor = new IncludeExpressionVisitor<QueryT>();
        queryTransform = (Expression<ExpressionT>)includeExpressionVisitor.Visit(queryTransform);
        var value = getQuery(queryTransform);
        foreach (var includeAction in includeExpressionVisitor.IncludeActions)
            value = includeAction(value);
        return value;
    }
                                            
    private static IWAQSQuery<ManyT> CreateOneToManyQuery<OneT, ManyT>(IWAQSQuery<OneT> source, IWAQSQuery<ManyT> manyEntitySet, Expression<Func<OneT, ManyT, bool>> exp, ref Expression<Func<IEnumerable<ManyT>, IEnumerable<ManyT>>> queryTransform)
    {
        var oParameter = Expression.Parameter(typeof(OneT), "o" + Guid.NewGuid().ToString("N"));
        var mParameter = Expression.Parameter(typeof(ManyT), "m" + Guid.NewGuid().ToString("N"));
        var query = Where(manyEntitySet, Expression.Lambda<Func<ManyT, bool>>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(OneT)), source.Expression, Expression.Lambda(exp.Body.ReplaceParameter(spe =>
        {
            switch (exp.Parameters.IndexOf(spe))
            {
                case 0:
                    return oParameter;
                case 1:
                    return mParameter;
                default:
                    throw new InvalidOperationException();
            }
        }), oParameter)), mParameter));
        return CreateQuery(qt => qt == null ? query : (IWAQSQuery<ManyT>)query.Provider.CreateQuery<ManyT>(qt.Body.ReplaceParameter(qt.Parameters[0], query.Expression).UseQueryable()), ref queryTransform);
    }
    
    private static IWAQSQuery<ManyT> CreateOneToManyQuery<OneT, ManyT>(IWAQSQuery<OneT> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, ref Expression<Func<IEnumerable<ManyT>, ManyT>> queryTransform)
    {
        return CreateQuery(qt => CreateWAQSQuery<ManyT>(source.DataContext, source.Select(exp).Select(qt), source.AsyncQueryProviderFactory, source.ExpressionTransformation), ref queryTransform);
    }                                        
    private static IWAQSQueryValue<ToTResult> CreateOneToOne<FromBaseT, FromT, ToT, ToTResult>(IWAQSQueryValue<FromBaseT> source, Expression<Func<FromT, ToT>> exp, Func<IWAQSQuery<ToT>, IWAQSQuery<ToTResult>> transformExp)
        where FromT : FromBaseT
    {
        var methodCallExpression = (MethodCallExpression)source.Expression;
        MethodInfo method;
        var baseQuery = CreateToOne<FromBaseT>(source, methodCallExpression, out method).OfType<FromT>();
        return CreateWAQSQueryValue<ToTResult>(source.WAQSQueryProvider, source.DataContext, Expression.Call(methodCallExpression.Object, method.GetGenericMethodDefinition().MakeGenericMethod(typeof(ToTResult)), new[] { transformExp(baseQuery.Select(exp)).Expression }));
    }
                                            
    private static IWAQSQuery<FromT> CreateToOne<FromT>(IWAQSQueryBase source, MethodCallExpression methodCallExpression, out MethodInfo method)
    {
        switch (methodCallExpression.Method.Name)
        {
            case "First":
            case "FirstOrDefault":
            case "Single":
            case "SingleOrDefault":
            case "Last":
            case "LastOrDefault":
                IWAQSQuery<FromT> baseQuery = CreateWAQSQuery<FromT>((IWAQSQuery<FromT>)methodCallExpression.Arguments[0]);
                switch (methodCallExpression.Arguments.Count)
                {
                    case 1:
                        method = methodCallExpression.Method;
                        break;
                    case 2:
                        method = methodCallExpression.Method.DeclaringType.GetMethods().First(m => m.Name == methodCallExpression.Method.Name && m.GetParameters().Length == 1);
                        baseQuery = Where(baseQuery, (Expression<Func<FromT, bool>>)methodCallExpression.Arguments[1]);
                        break;
                    default:
                        throw new NotImplementedException();
                }
                return baseQuery;
            default:
                throw new NotImplementedException();
        }
    }
                                            
    private static IEnumerable<ManyT> IncludeOneToMany<OneT, ManyT>(object oneValues, object[] manyValues, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return ((IEnumerable<object>)manyValues[0]).Cast<ManyT>();
    }
        
    public static IWAQSQueryValue<OneT> IncludeOneOneToMany<OneT, ManyT>(IWAQSQueryValue<OneT> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, IEnumerable<ManyT>>> queryTransform, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : class, IEntity
        where ManyT : class, IEntity
    {
        return IncludeOneOneToMany<OneT, OneT, ManyT>(source, exp, queryTransform, getTrackableCollection, manyToMany);
    }
        
    public static IWAQSQueryValue<OneBaseT> IncludeOneOneToMany<OneBaseT, OneT, ManyT>(IWAQSQueryValue<OneBaseT> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, IEnumerable<ManyT>>> queryTransform, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : class, OneBaseT
        where OneBaseT : class, IEntity
        where ManyT : class, IEntity
    {
        return Include<OneBaseT, ManyT>(source, onesQuery =>
        {
            var include = new QueryableInclude();
            IWAQSQueryBase subQuery;
            Func<object, object[], object> load;
            subQuery = CreateQuery(qt => CreateOneToOne((IWAQSQueryValue<OneBaseT>)onesQuery, exp, q => qt == null ? q.Select(e => e.Select(e2 => e2)) : q.Select(qt).Select(e => e.Select(e2 => e2))), ref queryTransform);
            if (queryTransform == null || queryTransform.Body is ParameterExpression)
            {
                string path = ((MemberExpression)exp.Body).Member.Name;
                include.Path = path;
            }
            load = (oneValues, manyValues) => IncludeOneOneToMany(onesQuery.DataContext, oneValues, manyValues, getTrackableCollection, manyToMany);
            include.Queries = new IWAQSQueryBase[] { subQuery };
            include.Load = load;
            return include;
        });
    }
        
    public static IWAQSQueryValue<OneT> IncludeOneOneToMany<OneT, ManyT>(IWAQSQueryValue<OneT> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, ManyT>> queryTransform, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : class, IEntity
        where ManyT : class, IEntity
    {
        return IncludeOneOneToMany<OneT, OneT, ManyT>(source, exp, queryTransform, getTrackableCollection, manyToMany);
    }
        
    public static IWAQSQueryValue<OneBaseT> IncludeOneOneToMany<OneBaseT, OneT, ManyT>(IWAQSQueryValue<OneBaseT> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, ManyT>> queryTransform, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : class, OneBaseT
        where OneBaseT : class, IEntity
        where ManyT : class, IEntity
    {
        return Include<OneBaseT, ManyT>(source, onesQuery =>
        {
            var include = new QueryableInclude();
            IWAQSQueryBase subQuery;
            Func<object, object[], object> load;
            subQuery = CreateQuery(qt => CreateOneToOne((IWAQSQueryValue<OneBaseT>)onesQuery, exp, q => q.Select(qt)), ref queryTransform);
            if (queryTransform == null || queryTransform.Body is ParameterExpression)
            {
                string path = ((MemberExpression)exp.Body).Member.Name;
                include.Path = path;
            }
            load = (oneValues, manyValues) => IncludeOneOneToMany(onesQuery.DataContext, oneValues, manyValues, getTrackableCollection, manyToMany);
            include.Queries = new IWAQSQueryBase[] { subQuery };
            include.Load = load;
            return include;
        });
    }
                                            
    private static object IncludeOneOneToMany<OneT, ManyT>(IDataContext context, object oneValues, object[] manyValues, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : class, IEntity
        where ManyT : class, IEntity
    {
        var one = (OneT)oneValues;
        if (one == null)
            return null;
        var many = ((IEnumerable<object>)manyValues[0]).Cast<ManyT>();
        if (manyToMany)
            foreach (var manyElt in many)
                getTrackableCollection(one).Attach(manyElt, context);
        return many;
    }
        
    public static IWAQSQueryValue<IEnumerable<OneT>> IncludeManyOneToMany<OneT, ManyT>(IWAQSQueryValue<IEnumerable<OneT>> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, IEnumerable<ManyT>>> queryTransform, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return IncludeManyOneToMany<OneT, OneT, ManyT>(source, exp, queryTransform, fkTest, getTrackableCollection, manyToMany);
    }
        
    public static IWAQSQueryValue<IEnumerable<OneBaseT>> IncludeManyOneToMany<OneBaseT, OneT, ManyT>(IWAQSQueryValue<IEnumerable<OneBaseT>> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, IEnumerable<ManyT>>> queryTransform, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : OneBaseT
        where OneBaseT : IEntity
        where ManyT : IEntity
    {
        return Include<IEnumerable<OneBaseT>, ManyT>(source, onesQuery =>
        {
            var include = new QueryableInclude();
            IWAQSQueryBase subQuery;
            Func<object, object[], object> load;
            subQuery = CreateManyOneToMany((IWAQSQueryValue<IEnumerable<OneBaseT>>)source, exp, ref queryTransform);
            if (queryTransform == null || queryTransform.Body is ParameterExpression)
            {
                string path = ((MemberExpression)exp.Body).Member.Name;
                include.Path = path;
            }
            load = (oneValues, manyValues) => IncludeManyOneToMany(oneValues, manyValues, fkTest, getTrackableCollection);
            include.Queries = new IWAQSQueryBase[] { subQuery };
            include.Load = load;
            return include;
        });
    }
                                            
    private static IWAQSQueryValue<IEnumerable<ManyT>> CreateManyOneToMany<OneBaseT, OneT, ManyT>(IWAQSQueryValue<IEnumerable<OneBaseT>> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, ref Expression<Func<IEnumerable<ManyT>, IEnumerable<ManyT>>> queryTransform)
        where OneT : OneBaseT
    {
        return CreateQuery(qt =>
        {
            var methodCallExpression = (MethodCallExpression)source.Expression;
            MethodInfo method;
            var baseQuery = CreateToOne<IEnumerable<OneT>>(source, methodCallExpression, out method).Select(os => os.OfType<OneT>());
            var selectParameter = Expression.Parameter(typeof(IEnumerable<OneT>), "e" + Guid.NewGuid().ToString("N"));
            if (qt != null)
                exp = Expression.Lambda<Func<OneT, IEnumerable<ManyT>>>(qt.Body.ReplaceParameter(qt.Parameters[0], exp.Body), exp.Parameters[0]);
            var manyQuery = baseQuery.Select(Expression.Lambda<Func<IEnumerable<OneT>, IEnumerable<ManyT>>>(Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "SelectMany" && m.GetParameters().Length == 2 && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(OneT), typeof(ManyT)), selectParameter, exp), selectParameter));
            return CreateWAQSQueryValue<IEnumerable<ManyT>>(source.WAQSQueryProvider, source.DataContext, Expression.Call(methodCallExpression.Object, method.GetGenericMethodDefinition().MakeGenericMethod(typeof(IEnumerable<ManyT>)), manyQuery.Expression));
        }, ref queryTransform);
    }
                                            
    private static object IncludeManyOneToMany<OneT, ManyT>(object oneValues, object[] manyValues, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return ((IEnumerable<object>)manyValues[0]).Cast<ManyT>();
    }
        
    public static IWAQSQueryValue<IEnumerable<OneT>> IncludeManyOneToOneMany<OneT, ManyT>(IWAQSQueryValue<IEnumerable<OneT>> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, ManyT>> queryTransform, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return IncludeManyOneToOneMany<OneT, OneT, ManyT>(source, exp, queryTransform, fkTest, getTrackableCollection, manyToMany);
    }
        
    public static IWAQSQueryValue<IEnumerable<OneBaseT>> IncludeManyOneToOneMany<OneBaseT, OneT, ManyT>(IWAQSQueryValue<IEnumerable<OneBaseT>> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, Expression<Func<IEnumerable<ManyT>, ManyT>> queryTransform, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection, bool manyToMany = false)
        where OneT : OneBaseT
        where OneBaseT : IEntity
        where ManyT : IEntity
    {
        return Include<IEnumerable<OneBaseT>, ManyT>(source, onesQuery =>
        {
            var include = new QueryableInclude();
            IWAQSQueryBase subQuery;
            Func<object, object[], object> load;
            subQuery = CreateManyOneToOneMany((IWAQSQueryValue<IEnumerable<OneBaseT>>)source, exp, ref queryTransform);
            if (queryTransform == null || queryTransform.Body is ParameterExpression)
            {
                string path = ((MemberExpression)exp.Body).Member.Name;
                include.Path = path;
            }
            load = (oneValues, manyValues) => IncludeManyOneToOneMany(oneValues, manyValues, fkTest, getTrackableCollection);
            include.Queries = new IWAQSQueryBase[] { subQuery };
            include.Load = load;
            return include;
        });
    }
                                            
    private static IWAQSQueryValue<IEnumerable<ManyT>> CreateManyOneToOneMany<OneBaseT, OneT, ManyT>(IWAQSQueryValue<IEnumerable<OneBaseT>> source, Expression<Func<OneT, IEnumerable<ManyT>>> exp, ref Expression<Func<IEnumerable<ManyT>, ManyT>> queryTransform)
        where OneT : OneBaseT
    {
        return CreateQuery(qt =>
        {
            var methodCallExpression = (MethodCallExpression)source.Expression;
            MethodInfo method;
            var baseQuery = CreateToOne<IEnumerable<OneT>>(source, methodCallExpression, out method).Select(os => os.OfType<OneT>());
            var selectParameter = Expression.Parameter(typeof(IEnumerable<OneT>), "e" + Guid.NewGuid().ToString("N"));
            var expOne = Expression.Lambda<Func<OneT, ManyT>>(qt.Body.ReplaceParameter(qt.Parameters[0], exp.Body), exp.Parameters[0]);
            var manyQuery = baseQuery.Select(Expression.Lambda<Func<IEnumerable<OneT>, IEnumerable<ManyT>>>(Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Select" && m.GetParameters().Length == 2 && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(OneT), typeof(ManyT)), selectParameter, expOne), selectParameter));
            return CreateWAQSQueryValue<IEnumerable<ManyT>>(source.WAQSQueryProvider, source.DataContext, Expression.Call(methodCallExpression.Object, method.GetGenericMethodDefinition().MakeGenericMethod(typeof(IEnumerable<ManyT>)), manyQuery.Expression));
        }, ref queryTransform);
    }
        
    private static object IncludeManyOneToOneMany<ManyT, OneT>(object oneValues, object[] manyValues, Func<OneT, ManyT, bool> fkTest, Func<OneT, TrackableCollection<ManyT>> getTrackableCollection)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return ((IEnumerable<object>)manyValues).Cast<ManyT>();
    }
        
    public static IWAQSQuery<ManyT> IncludeManyToOne<ManyT, OneT>(IWAQSQuery<ManyT> source, IWAQSQuery<OneT> onesEntitySet, Expression<Func<ManyT, OneT>> exp, Expression<Func<ManyT, OneT, bool>> anyExp, Expression<Func<OneT, OneT>> queryTransform, Func<ManyT, OneT, bool> fkTest, Action<ManyT, OneT> setOne)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return IncludeManyToOne<ManyT, ManyT, OneT>(source, onesEntitySet, exp, anyExp, queryTransform, fkTest, setOne);
    }
        
    public static IWAQSQuery<ManyBaseT> IncludeManyToOne<ManyBaseT, ManyT, OneT>(IWAQSQuery<ManyBaseT> source, IWAQSQuery<OneT> onesEntitySet, Expression<Func<ManyT, OneT>> exp, Expression<Func<ManyT, OneT, bool>> anyExp, Expression<Func<OneT, OneT>> queryTransform, Func<ManyT, OneT, bool> fkTest, Action<ManyT, OneT> setOne)
        where ManyT : ManyBaseT
        where ManyBaseT : IEntity
        where OneT : IEntity
    {
        return Include<ManyBaseT, OneT>(source, manyQuery =>
        {
            var include = new QueryableInclude();
            var manyQueryAsAsyncQueryable = manyQuery as IWAQSQuery<ManyBaseT>;
            IWAQSQueryBase subQuery;
            Func<object, object[], object> load;
            if (manyQueryAsAsyncQueryable == null)
            {
                subQuery = CreateQuery(qt => CreateOneToOne((IWAQSQueryValue<ManyBaseT>)manyQuery, exp, q => q), queryTransform);
                load = (manyValues, oneValues) => IncludeOneManyToOne(manyValues, oneValues, setOne);
            }
            else
            {
                subQuery = CreateManyToOneQuery(manyQueryAsAsyncQueryable.OfType<ManyT>(), onesEntitySet, anyExp, ref queryTransform);
                if (queryTransform == null || queryTransform.Body is ParameterExpression)
                {
                    string path = ((MemberExpression)exp.Body).Member.Name;
                    include.Path = path;
                }
                load = (manyValues, oneValues) => IncludeManyToOne(manyValues, oneValues, fkTest, setOne);
            }
            include.Queries = new IWAQSQueryBase[] { subQuery };
            include.Load = load;
            return include;
        });
    }
                                            
    private static IWAQSQuery<OneT> CreateManyToOneQuery<ManyT, OneT>(IWAQSQuery<ManyT> source, IWAQSQuery<OneT> onesEntitySet, Expression<Func<ManyT, OneT, bool>> exp, ref Expression<Func<OneT, OneT>> queryTransform)
    {
        var oParameter = Expression.Parameter(typeof(OneT), "o" + Guid.NewGuid().ToString("N"));
        var mParameter = Expression.Parameter(typeof(ManyT), "m" + Guid.NewGuid().ToString("N"));
        var query = Where(onesEntitySet, Expression.Lambda<Func<OneT, bool>>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(ManyT)), source.Expression, Expression.Lambda(exp.Body.ReplaceParameter(spe =>
        {
            switch (exp.Parameters.IndexOf(spe))
            {
                case 0:
                    return mParameter;
                case 1:
                    return oParameter;
                default:
                    throw new InvalidOperationException();
            }
        }), mParameter)), oParameter));
        return CreateQuery(_ => query, ref queryTransform);
    }
                                            
    private static object IncludeManyToOne<ManyT, OneT>(object manyValues, object[] oneValues, Func<ManyT, OneT, bool> fkTest, Action<ManyT, OneT> setOne)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return ((IEnumerable<object>)oneValues[0]).Cast<OneT>();
    }
                                            
    private static object IncludeOneManyToOne<ManyT, OneT>(object manyValues, object[] oneValues, Action<ManyT, OneT> setOne)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return (OneT)oneValues[0];
    }
        
    public static IWAQSQueryValue<ManyT> IncludeOneManyToOne<ManyT, OneT>(IWAQSQueryValue<ManyT> source, Expression<Func<ManyT, OneT>> exp, Expression<Func<OneT, OneT>> queryTransform, Action<ManyT, OneT> setOne)
        where OneT : IEntity
        where ManyT : IEntity
    {
        return IncludeOneManyToOne<ManyT, ManyT, OneT>(source, exp, queryTransform, setOne);
    }
        
    public static IWAQSQueryValue<ManyBaseT> IncludeOneManyToOne<ManyBaseT, ManyT, OneT>(IWAQSQueryValue<ManyBaseT> source, Expression<Func<ManyT, OneT>> exp, Expression<Func<OneT, OneT>> queryTransform, Action<ManyT, OneT> setOne)
        where ManyT : ManyBaseT
        where ManyBaseT : IEntity
        where OneT : IEntity
    {
        return Include<ManyBaseT, OneT>(source, manyQuery =>
        {
            var include = new QueryableInclude();
            IWAQSQueryBase subQuery;
            Func<object, object[], object> load;
            subQuery = CreateQuery(qt => CreateOneToOne((IWAQSQueryValue<ManyBaseT>)manyQuery, exp, q => q), ref queryTransform);
            if (queryTransform == null || queryTransform.Body is ParameterExpression)
            {
                string path = ((MemberExpression)exp.Body).Member.Name;
                include.Path = path;
            }
            load = (manyValues, oneValues) => IncludeOneManyToOne(manyValues, oneValues, setOne);
            include.Queries = new IWAQSQueryBase[] { subQuery };
            include.Load = load;
            return include;
        });
    }
                                            
    public static IWAQSQuery<FromT> IncludeManyToMany<FromT, ToT, KeysT>(IWAQSQuery<FromT> source, IWAQSQuery<ToT> toEntitySet, Expression<Func<FromT, IEnumerable<ToT>>> exp, Expression<Func<FromT, TrackableCollection<ToT>>> getCollectionExp, Expression<Func<TrackableCollection<ToT>, ToT, bool>> anyExp, Expression<Func<IEnumerable<ToT>, IEnumerable<ToT>>> queryTransform, Func<IWAQSQuery<FromT>, IWAQSQuery<KeysT>> getKeysQuery, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where FromT : class, IEntity
        where ToT : class, IEntity
    {
        return IncludeManyToMany<FromT, FromT, ToT, KeysT>(source, toEntitySet, exp, getCollectionExp, anyExp, queryTransform, getKeysQuery, fromFkTest, toFkTest, getTrackableCollection);
    }
                                            
        public static IWAQSQuery<BaseFromT> IncludeManyToMany<BaseFromT, FromT, ToT, KeysT>(IWAQSQuery<BaseFromT> source, IWAQSQuery<ToT> toEntitySet, Expression<Func<FromT, IEnumerable<ToT>>> exp, Expression<Func<FromT, TrackableCollection<ToT>>> getCollectionExp, Expression<Func<TrackableCollection<ToT>, ToT, bool>> anyExp, Expression<Func<IEnumerable<ToT>, IEnumerable<ToT>>> queryTransform, Func<IWAQSQuery<FromT>, IWAQSQuery<KeysT>> getKeysQuery, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
            where FromT : class, BaseFromT
            where BaseFromT : class, IEntity
            where ToT : class, IEntity
        {
            return Include<BaseFromT, ToT>(source, fromQuery =>
            {
                var include = new QueryableInclude();
                var fromBaseQueryAsAsyncQueryable = fromQuery as IWAQSQuery<BaseFromT>;
                IWAQSQueryBase toQuery;
                Func<object, object[], object> load;
                if (fromBaseQueryAsAsyncQueryable == null)
                {
                    toQuery = CreateQuery(qt => CreateOneToOne(((IWAQSQueryValue<BaseFromT>)fromQuery), exp, q => qt == null ? q.Select(e => e.Select(e2 => e2)) : q.Select(qt).Select(e => e.Select(e2 => e2))), queryTransform);
                    load = (fromValues, toValues) => IncludeOneOneToMany(fromQuery.DataContext, fromValues, toValues, getTrackableCollection, true);
                    return new QueryableInclude { Queries = new IWAQSQueryBase[] { toQuery }, Load = load };
                }
                var fromQueryAsAsyncQueryable = fromBaseQueryAsAsyncQueryable.OfType<FromT>();
                toQuery = CreateManyToManyQuery(fromQueryAsAsyncQueryable, toEntitySet, exp, getCollectionExp, anyExp, ref queryTransform);
                if (queryTransform == null || queryTransform.Body is ParameterExpression)
                {
                    string path = ((MemberExpression)exp.Body).Member.Name;
                    include.Path = path;
                }
                var keysQuery = getKeysQuery(fromQueryAsAsyncQueryable);
                if (queryTransform != null)
                {
                    var selectManyCollectionSelectorExpression = (LambdaExpression)((MethodCallExpression)keysQuery.Expression).Arguments[1];
                    selectManyCollectionSelectorExpression = Expression.Lambda(queryTransform.Body.ReplaceParameter(queryTransform.Parameters[0], selectManyCollectionSelectorExpression.Body), selectManyCollectionSelectorExpression.Parameters);
                }
                load = (fromValues, toValues) => IncludeManyToMany(fromQuery.DataContext, fromValues, toValues, fromFkTest, toFkTest, getTrackableCollection);
                include.Queries = new IWAQSQueryBase[] { toQuery, keysQuery };
                include.Load = load;
                return include;
            });
        }
                                            
    private static IWAQSQuery<ToT> CreateManyToManyQuery<FromT, ToT>(IWAQSQuery<FromT> source, IWAQSQuery<ToT> toEntitySet, Expression<Func<FromT, IEnumerable<ToT>>> exp, Expression<Func<FromT, TrackableCollection<ToT>>> getCollectionExp, Expression<Func<TrackableCollection<ToT>, ToT, bool>> anyExp, ref Expression<Func<IEnumerable<ToT>, IEnumerable<ToT>>> queryTransform)
        where FromT : IEntity
        where ToT : IEntity
    {
        return CreateQuery(qt =>
        {
            var toParameter = Expression.Parameter(typeof(ToT), "t" + Guid.NewGuid().ToString("N"));
            IWAQSQuery<ToT> toQuery;
            if (qt == null)
            {
                var fromParameter = Expression.Parameter(typeof(FromT), "f" + Guid.NewGuid().ToString("N"));
                toQuery = Where(toEntitySet, Expression.Lambda<Func<ToT, bool>>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(FromT)), source.Expression, Expression.Lambda(anyExp.Body.ReplaceParameter(spe =>
                {
                    switch (anyExp.Parameters.IndexOf(spe))
                    {
                        case 0:
                            return getCollectionExp.Body.ReplaceParameter(getCollectionExp.Parameters[0], fromParameter);
                        case 1:
                            return toParameter;
                        default:
                            throw new InvalidOperationException();
                    }
                }), fromParameter)), toParameter));
            }
            else
                toQuery = Where(toEntitySet, Expression.Lambda<Func<ToT, bool>>(Expression.Call(typeof(Queryable).GetMethod("Contains"), source.Select(exp).Select(qt).SelectMany(e => e).Expression, toParameter), toParameter)); 
            return CreateWAQSQuery<ToT>(source.DataContext, toQuery, source.AsyncQueryProviderFactory, source.ExpressionTransformation);
        }, ref queryTransform);
    }
        
    public static IWAQSQuery<FromT> IncludeManyToOneMany<FromT, ToT, KeysT>(IWAQSQuery<FromT> source, Expression<Func<FromT, IEnumerable<ToT>>> exp, Expression<Func<IEnumerable<ToT>, ToT>> queryTransform, Func<IWAQSQuery<FromT>, ToT, IWAQSQuery<KeysT>> getKeysQuery, Func<KeysT, ToT> getTo, Func<KeysT, FromT, bool> getFromKey, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where FromT : class, IEntity
        where ToT : class, IEntity
    {
        return IncludeManyToOneMany<FromT, FromT, ToT, KeysT>(source, exp, queryTransform, getKeysQuery, getTo, getFromKey, getTrackableCollection);
    }
        
    public static IWAQSQuery<FromBaseT> IncludeManyToOneMany<FromBaseT, FromT, ToT, KeysT>(IWAQSQuery<FromBaseT> source, Expression<Func<FromT, IEnumerable<ToT>>> exp, Expression<Func<IEnumerable<ToT>, ToT>> queryTransform, Func<IWAQSQuery<FromT>, ToT, IWAQSQuery<KeysT>> getKeysQuery, Func<KeysT, ToT> getTo, Func<KeysT, FromT, bool> getFromKey, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where FromT : class, FromBaseT
        where FromBaseT : class, IEntity
        where ToT : class, IEntity
    {
        return Include<FromBaseT, ToT>(source, fromQuery =>
        {
            var include = new QueryableInclude();
            var fromBaseQueryAsAsyncQueryable = fromQuery as IWAQSQuery<FromBaseT>;
            IWAQSQueryBase toQuery;
            Func<object, object[], object> load;
            if (fromBaseQueryAsAsyncQueryable == null)
            {
                toQuery = CreateQuery(qt => CreateOneToOne(((IWAQSQueryValue<FromBaseT>)fromQuery), exp, q => q.Select(qt)), queryTransform);
                load = (fromValues, toValues) => IncludeOneOneToMany(fromQuery.DataContext, fromValues, toValues, getTrackableCollection, true);
                return new QueryableInclude { Queries = new IWAQSQueryBase[] { toQuery }, Load = load };
            }
            var fromQueryAsAsyncQueryable = fromBaseQueryAsAsyncQueryable.OfType<FromT>();
            toQuery = CreateQuery(qt => CreateWAQSQuery(source.DataContext, fromQueryAsAsyncQueryable.Select(exp).Select(qt), source.AsyncQueryProviderFactory, source.ExpressionTransformation), ref queryTransform);
            if (queryTransform == null || queryTransform.Body is ParameterExpression)
            {
                string path = ((MemberExpression)exp.Body).Member.Name;
                include.Path = path;
            }
            ToT toT = null;
            var keysQuery = getKeysQuery(fromQueryAsAsyncQueryable, toT);
            var select = (MethodCallExpression)keysQuery.Expression;
            var selectLambda = (LambdaExpression)select.Arguments[1];
            var keysCtor = (NewExpression)((LambdaExpression)select.Arguments[1]).Body;
            var keysCtorToArg = keysCtor.Arguments.Last();
            keysCtorToArg = queryTransform.Body.ReplaceParameter(queryTransform.Parameters[0], exp.Body.ReplaceParameter(exp.Parameters[0], selectLambda.Parameters[0]));
            var keysCtorArguments = keysCtor.Arguments.ToList();
            keysCtorArguments[keysCtor.Arguments.Count - 1] = keysCtorToArg;
            keysCtor = Expression.New(keysCtor.Constructor, keysCtorArguments);
                                
            keysQuery = CreateWAQSQuery<KeysT>(keysQuery.DataContext, keysQuery, keysQuery.AsyncQueryProviderFactory, keysQuery.ExpressionTransformation, toQuery.QueryableIncludes);
                                            
            load = (fromValues, toValues) => IncludeManyToOneMany<FromT, ToT, KeysT>(fromQuery.DataContext, fromValues, toValues, getTo, getFromKey, getTrackableCollection);
            include.Queries = new IWAQSQueryBase[] { keysQuery };
            include.Load = load;
            return include;
        });
    }
                                            
    private static object IncludeManyToOneMany<FromT, ToT, KeysT>(IDataContext context, object fromValues, object[] toValues, Func<KeysT, ToT> getTo, Func<KeysT, FromT, bool> getFromKey, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where ToT : class, IEntity
    {
        var keys = ((IEnumerable<object>)toValues[0]).Cast<KeysT>().ToList();
        var froms = ((IEnumerable<object>)fromValues).Cast<FromT>().ToList();
        var tos = new List<ToT>();
        foreach (var key in keys)
        {
            var to = getTo(key);
            if (to != null)
            {
                getTrackableCollection(froms.FirstOrDefault(f => getFromKey(key, f))).Attach(getTo(key), context);
                tos.Add(to);
            }
        }
        return tos;
    }
                                            
        public static IWAQSQuery<FromT> IncludeManyToMany<FromT, ToT, KeysT>(IWAQSQuery<FromT> source, IWAQSQuery<ToT> toQuery, Func<IWAQSQuery<FromT>, IWAQSQuery<ToT>, IWAQSQuery<KeysT>> getKeysQuery, Func<FromT, IWAQSQuery<ToT>, IWAQSQuery<KeysT>> getKeysQueryForOne, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
            where FromT : class, IEntity
            where ToT : class, IEntity
        {
            return IncludeManyToMany<FromT, FromT, ToT, KeysT>(source, toQuery, getKeysQuery, getKeysQueryForOne, fromFkTest, toFkTest, getTrackableCollection);
        }
        
        public static IWAQSQuery<FromBaseT> IncludeManyToMany<FromBaseT, FromT, ToT, KeysT>(IWAQSQuery<FromT> source, IWAQSQuery<ToT> toQuery, Func<IWAQSQuery<FromT>, IWAQSQuery<ToT>, IWAQSQuery<KeysT>> getKeysQuery, Func<FromT, IWAQSQuery<ToT>, IWAQSQuery<KeysT>> getKeysQueryForOne, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
            where FromT : class, FromBaseT
            where FromBaseT : class, IEntity
            where ToT : class, IEntity
        {
            if (source.DataContext != toQuery.DataContext)
                throw new InvalidOperationException();
            return Include<FromT, ToT>(source, fromQuery =>
            {
                var fromBaseQueryAsAsyncQueryable = fromQuery as IWAQSQuery<FromBaseT>;
                Func<object, object[], object> load;
                IWAQSQuery<KeysT> keysQuery;
                if (fromBaseQueryAsAsyncQueryable == null)
                {
                    keysQuery = CreateOneManyToManyKeysQuery(((IWAQSQueryValue<FromT>)fromQuery), toQuery, getKeysQueryForOne);
                    load = (fromValues, toValues) => IncludeOneManyToMany<FromT, ToT, KeysT>(fromQuery.DataContext, fromValues, toValues, fromFkTest, toFkTest, getTrackableCollection);
                    return new QueryableInclude { Queries = new IWAQSQueryBase[] { toQuery, keysQuery }, Load = load };
                }
                keysQuery = getKeysQuery(fromBaseQueryAsAsyncQueryable.OfType<FromT>(), toQuery);
                load = (fromValues, toValues) => IncludeManyToMany<FromT, ToT, KeysT>(fromQuery.DataContext, fromValues, toValues, fromFkTest, toFkTest, getTrackableCollection);
                return new QueryableInclude { Queries = new IWAQSQueryBase[] { toQuery, keysQuery }, Load = load };
            });
        }                                    
    public static IWAQSQuery<FromT> IncludeManyToOneMany<FromT, ToT, KeysT>(IWAQSQuery<FromT> source, IWAQSQueryValue<ToT> toQuery, Func<IWAQSQuery<FromT>, ToT, IWAQSQuery<KeysT>> getKeysQuery, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where FromT : class, IEntity
        where ToT : class, IEntity
    {
        if (source.DataContext != toQuery.DataContext)
            throw new InvalidOperationException();
        return Include<FromT, ToT>(source, fromQuery =>
        {
            Func<object, object[], object> load;
            IWAQSQueryBase keysQuery;
            var fromQueryAsAsyncQueryable = fromQuery as IWAQSQuery<FromT>;
            if (fromQueryAsAsyncQueryable == null)
            {
                keysQuery = CreateOneManyToOneManyKeysQuery(((IWAQSQueryValue<FromT>)fromQuery), toQuery, getKeysQuery);
                load = (fromValues, toValues) => IncludeOneManyToOneMany(fromQuery.DataContext, fromValues, toValues, getTrackableCollection);
                return new QueryableInclude { Queries = new IWAQSQueryBase[] { toQuery }, Load = load };
            }
            keysQuery = CreateManyToOneManyKeysQuery(fromQueryAsAsyncQueryable, toQuery, getKeysQuery);
            load = (fromValues, toValues) => IncludeOneManyToMany(fromQuery.DataContext, fromValues, toValues, fromFkTest, toFkTest, getTrackableCollection);
            return new QueryableInclude { Queries = new IWAQSQueryBase[] { toQuery, keysQuery }, Load = load };
        });
    }
                                            
    public static IWAQSQueryValue<FromT> IncludeOneManyToMany<FromT, ToT, KeysT>(IWAQSQueryValue<FromT> source, IWAQSQuery<ToT> toQuery, Func<FromT, IWAQSQuery<ToT>, IWAQSQuery<KeysT>> getKeysQuery, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where FromT : class, IEntity
        where ToT : class, IEntity
    {
        if (source.DataContext != toQuery.DataContext)
            throw new InvalidOperationException();
        return Include<FromT, ToT>(source, fromQuery =>
        {
            var keysQuery = CreateOneManyToManyKeysQuery(source, toQuery, getKeysQuery);
            Func<object, object[], object> load = (fromValues, toValues) => IncludeOneManyToMany(fromQuery.DataContext, fromValues, toValues, fromFkTest, toFkTest, getTrackableCollection);
            return new QueryableInclude { Queries = new IWAQSQueryBase[] { toQuery, keysQuery }, Load = load };
        });
    }
                                            
    public static IWAQSQueryValue<FromT> IncludeOneManyToOneMany<FromT, ToT, KeysT>(IWAQSQueryValue<FromT> source, IWAQSQueryValue<ToT> toQuery, Func<IWAQSQuery<FromT>, ToT, IWAQSQuery<KeysT>> getKeysQuery, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where FromT : class, IEntity
        where ToT : class, IEntity
    {
        if (source.DataContext != toQuery.DataContext)
            throw new InvalidOperationException();
        return Include<FromT, ToT>(source, fromQuery =>
        {
            var keysQuery = CreateOneManyToOneManyKeysQuery(source, toQuery, getKeysQuery);
            Func<object, object[], object> load = (fromValues, toValues) => IncludeOneManyToOneMany(fromQuery.DataContext, fromValues, toValues, getTrackableCollection);
            return new QueryableInclude { Queries = new IWAQSQueryBase[] { toQuery, keysQuery }, Load = load };
        });
    }
                                            
    private static IWAQSQuery<KeysT> CreateOneManyToManyKeysQuery<FromT, ToT, KeysT>(IWAQSQueryValue<FromT> fromQuery, IWAQSQuery<ToT> toQuery, Func<FromT, IWAQSQuery<ToT>, IWAQSQuery<KeysT>> getKeysQuery)
        where FromT : class, IEntity
        where ToT : IEntity
    {
        FromT fromT = null;
        var keysQuery = getKeysQuery(fromT, toQuery);
        var keysQueryExpression = keysQuery.Expression.ReplaceConstant(constant =>
            {
                if (constant.Value == fromT)
                    return fromQuery.Expression;
                return constant;
            });
        return CreateWAQSQuery<KeysT>(keysQuery.DataContext, keysQuery.Provider.CreateQuery<KeysT>(keysQueryExpression), keysQuery.AsyncQueryProviderFactory, keysQuery.ExpressionTransformation);
    }
                                            
    private static IWAQSQuery<KeysT> CreateManyToOneManyKeysQuery<FromT, ToT, KeysT>(IWAQSQuery<FromT> fromQuery, IWAQSQueryValue<ToT> toQuery, Func<IWAQSQuery<FromT>, ToT, IWAQSQuery<KeysT>> getKeysQuery)
        where FromT : IEntity
        where ToT : class, IEntity
    {
        ToT toT = null;
        var keysQuery = getKeysQuery(fromQuery, toT);
        var keysQueryExpression = keysQuery.Expression.ReplaceConstant(constant =>
        {
            if (constant.Value == toT)
                return toQuery.Expression;
            return constant;
        });
        keysQuery = CreateWAQSQuery<KeysT>(keysQuery.DataContext, keysQuery.Provider.CreateQuery<KeysT>(keysQueryExpression), keysQuery.AsyncQueryProviderFactory, keysQuery.ExpressionTransformation);
        return keysQuery;
    }
                                            
    private static IWAQSQueryValue<KeysT> CreateOneManyToOneManyKeysQuery<FromT, ToT, KeysT>(IWAQSQueryValue<FromT> fromQuery, IWAQSQueryValue<ToT> toQuery, Func<IWAQSQuery<FromT>, ToT, IWAQSQuery<KeysT>> getKeysQuery)
        where FromT : class, IEntity
        where ToT : class, IEntity
    {
        MethodInfo method;
        var fromQueryAsAsyncQueryable = CreateToOne<FromT>(fromQuery, (MethodCallExpression)fromQuery.Expression, out method);
        ToT toT = null;
        var keysQuery = getKeysQuery(CreateWAQSQuery<FromT>(fromQuery.DataContext, fromQueryAsAsyncQueryable, fromQueryAsAsyncQueryable.AsyncQueryProviderFactory, fromQueryAsAsyncQueryable.ExpressionTransformation), toT);
        var keysQueryExpression = keysQuery.Expression.ReplaceConstant(constant =>
        {
            if (constant.Value == toT)
                return toQuery.Expression;
            return constant;
        });
        return CreateWAQSQueryValue<KeysT>(fromQuery.WAQSQueryProvider, fromQuery.DataContext, Expression.Call(method.MakeGenericMethod(typeof(KeysT)), keysQueryExpression));
    }
                                            
    private static object IncludeManyToMany<FromT, ToT, KeysT>(IDataContext context, object fromValues, object[] toValues, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where ToT : class, IEntity
    {
        var froms = ((IEnumerable<object>)fromValues).Cast<FromT>().ToList();
        var tos = ((IEnumerable<object>)toValues[0]).Cast<ToT>().ToList();
        var keys = ((IEnumerable<object>)toValues[1]).Cast<KeysT>();
        foreach (var key in keys)
        {
            FromT fromValue = froms.FirstOrDefault(f => fromFkTest(key, f));
            ToT toValue;
            if (fromValue != null && (toValue = tos.FirstOrDefault(t => toFkTest(key, t))) != null)
                getTrackableCollection(fromValue).Attach(toValue, context);
        }
        return tos;
    }
                                            
    private static object IncludeManyToOneManyTask<FromT, ToT, KeysT>(IDataContext context, object fromValues, object[] toValues, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where ToT : class, IEntity
    {
        var froms = ((IEnumerable<object>)fromValues).Cast<FromT>().ToList();
        var to = (ToT)toValues[0];
        var keys = ((IEnumerable<object>)toValues[1]).Cast<KeysT>();
        foreach (var key in keys)
        {
            var @from = froms.FirstOrDefault(f => fromFkTest(key, f));
            if (@from != null && toFkTest(key, to))
                getTrackableCollection(@from).Attach(to, context);
        }
        return to;
    }
                                            
    private static object IncludeOneManyToMany<FromT, ToT, KeysT>(IDataContext context, object fromValues, object[] toValues, Func<KeysT, FromT, bool> fromFkTest, Func<KeysT, ToT, bool> toFkTest, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where ToT : class, IEntity
    {
        var @from = (FromT)fromValues;
        var tos = ((IEnumerable<object>)toValues[0]).Cast<ToT>().ToList();
        var keys = ((IEnumerable<object>)toValues[1]).Cast<KeysT>();
        foreach (var key in keys)
        {
            var toValue = tos.FirstOrDefault(t => toFkTest(key, t));
            if (toValue != null && fromFkTest(key, @from))
                getTrackableCollection(@from).Attach(toValue, context);
        }
        return tos;
    }
                                            
    private static object IncludeOneManyToOneMany<FromT, ToT>(IDataContext context, object fromValues, object[] toValues, Func<FromT, TrackableCollection<ToT>> getTrackableCollection)
        where ToT : class, IEntity
    {
        var fromValue = (FromT)fromValues;
        var toValue = (ToT)toValues[0];
        getTrackableCollection(fromValue).Attach(toValue, context);
        return toValue;
    }
        
    public static IWAQSQueryValue<IEnumerable<FromT>> IncludeManyOneToOne<FromT, ToT>(IWAQSQueryValue<IEnumerable<FromT>> source, Expression<Func<FromT, ToT>> exp, Expression<Func<ToT, ToT>> queryTransform, Func<FromT, ToT, bool> fkTest, Action<FromT, ToT> setTo)
        where FromT : IEntity
        where ToT : IEntity
    {
        return IncludeManyOneToOne<FromT, FromT, ToT>(source, exp, queryTransform, fkTest, setTo);
    }
        
    public static IWAQSQueryValue<IEnumerable<FromBaseT>> IncludeManyOneToOne<FromBaseT, FromT, ToT>(IWAQSQueryValue<IEnumerable<FromBaseT>> source, Expression<Func<FromT, ToT>> exp, Expression<Func<ToT, ToT>> queryTransform, Func<FromT, ToT, bool> fkTest, Action<FromT, ToT> setTo)
        where FromT : FromBaseT
        where FromBaseT : IEntity
        where ToT : IEntity
    {
        return Include<IEnumerable<FromBaseT>, ToT>(source, fromQuery =>
        {
            var include = new QueryableInclude();
            var toQuery = CreateManyOneToOne(((IWAQSQueryValue<IEnumerable<FromBaseT>>)source), exp, ref queryTransform);
            if (queryTransform == null || queryTransform.Body is ParameterExpression)
            {
                string path = ((MemberExpression)exp.Body).Member.Name;
                include.Path = path;
            }
            Func<object, object[], object> load = (fromValues, toValues) => IncludeManyOneToOne(fromValues, toValues, fkTest, setTo);
            include.Queries = new IWAQSQueryBase[] { toQuery };
            include.Load = load;
            return include;
        });
    }
                                            
    private static IWAQSQueryValue<IEnumerable<ToT>> CreateManyOneToOne<FromBaseT, FromT, ToT>(IWAQSQueryValue<IEnumerable<FromBaseT>> source, Expression<Func<FromT, ToT>> exp, ref Expression<Func<ToT, ToT>> queryTransform)
        where FromT : FromBaseT
    {
        return CreateQuery(qt =>
        {
            if (qt == null)
                qt = e => e;
            var serializableMethodCallExpression = (MethodCallExpression)source.Expression;
            MethodInfo method;
            var baseQuery = CreateToOne<IEnumerable<FromT>>(source, serializableMethodCallExpression, out method).Select(fs => fs.OfType<FromT>());
            var selectParameter = Expression.Parameter(typeof(IEnumerable<FromT>), "e" + Guid.NewGuid().ToString("N"));
            var expTo = Expression.Lambda<Func<FromT, ToT>>(qt.Body.ReplaceParameter(qt.Parameters[0], exp.Body), exp.Parameters[0]);
            var manyQuery = baseQuery.Select(Expression.Lambda<Func<IEnumerable<FromT>, IEnumerable<ToT>>>(Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Distinct" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(ToT)), Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Select" && m.GetParameters().Length == 2 && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(FromT), typeof(ToT)), selectParameter, expTo)), selectParameter));
            return CreateWAQSQueryValue<IEnumerable<ToT>>(source.WAQSQueryProvider, source.DataContext, Expression.Call(serializableMethodCallExpression.Object, method.GetGenericMethodDefinition().MakeGenericMethod(typeof(IEnumerable<ToT>)), manyQuery.Expression));
        }, ref queryTransform);
    }
                                            
    private static object IncludeManyOneToOne<FromT, ToT>(object fromValues, object[] toValues, Func<FromT, ToT, bool> fkTest, Action<FromT, ToT> setTo)
        where FromT : IEntity
        where ToT : IEntity
    {
        return ((IEnumerable<object>)toValues).Cast<ToT>();
    }
                                            
    public static IWAQSQuery<QueryT> ReplaceType<QueryT, OldT, NewT>(this IWAQSQuery<QueryT> query)
    {
        return ReplaceType<QueryT, QueryT, OldT, NewT>(query);
    }
                                            
    public static IWAQSQuery<NewT> ReplaceType<OldT, NewT>(this IWAQSQuery<OldT> query)
    {
        return ReplaceType<OldT, NewT, OldT, NewT>(query);
    }
                                            
    public static IWAQSQuery<NewT> ReplaceType<OldT, NewT>(this IWAQSQuery<NewT> query)
    {
        return ReplaceType<NewT, NewT, OldT, NewT>(query);
    }
                                            
    private static IWAQSQuery<NewQueryT> ReplaceType<OldQueryT, NewQueryT, OldT, NewT>(IWAQSQuery<OldQueryT> query)
    {
        return CreateWAQSQuery<NewQueryT>(query.DataContext, query.Provider.CreateQuery<NewQueryT>(new ReplaceTypeRewriter<OldT, NewT>().Visit(query.Expression)), query.AsyncQueryProviderFactory, query.ExpressionTransformation, query.QueryableIncludes, query.WithSpecifications);
    }
                                            
    private static IWAQSQuery<T> ApplyIncludesAndWiths<T>(IWAQSQuery originalQuery, IQueryable<T> query)
    {
        var value = (IWAQSQuery<T>)query;
        value.QueryableIncludes = originalQuery.QueryableIncludes;
        value.WithSpecifications = originalQuery.WithSpecifications;
        return value;
    }
                        
    public static IWAQSQuery<T> CreateWAQSQuery<T>(IDataContext dataContext, IQueryable<T> queryable, IAsyncQueryProviderFactory asyncQueryProviderFactory, Func<Expression, Expression> expressionTransformation, IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> queryableIncludes = null, IEnumerable<string> withSpecifications = null)
    {
        var value = new WAQSQuery<T>(dataContext, queryable, asyncQueryProviderFactory, expressionTransformation);
        if (queryableIncludes != null)
            value.QueryableIncludes = queryableIncludes;
        if (withSpecifications != null)
            value.WithSpecifications = withSpecifications;
        return value;
    }
                                
    public static IWAQSQuery<T> CreateWAQSQuery<T>(IWAQSQuery<T> originalQuery, IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> queryableIncludes = null, IEnumerable<string> withSpecifications = null)
    {
        var value = new WAQSQuery<T>(originalQuery);
        if (queryableIncludes != null)
            value.QueryableIncludes = queryableIncludes;
        if (withSpecifications != null)
            value.WithSpecifications = withSpecifications;
        return value;
    }
                        
    public static IWAQSQueryValue<T> CreateWAQSQueryValue<T>(IWAQSQueryValue<T> originalQueryValue, IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> queryableIncludes = null, IEnumerable<string> withSpecifications = null)
    {
        var value = new WAQSQueryValue<T>(originalQueryValue) { QueryableIncludes = queryableIncludes, WithSpecifications = withSpecifications };
        if (queryableIncludes != null)
            value.QueryableIncludes = queryableIncludes;
        if (withSpecifications != null)
            value.WithSpecifications = withSpecifications;
        return value;
    }
                        
    public static IWAQSQueryValue<T> CreateWAQSQueryValue<T>(WAQSQueryProvider waqsQueryProvider, IDataContext dataContext, Expression expression, IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> queryableIncludes = null, IEnumerable<string> withSpecifications = null)
    {
        var value = new WAQSQueryValue<T>(waqsQueryProvider, dataContext, expression);
        if (queryableIncludes != null)
            value.QueryableIncludes = queryableIncludes;
        if (withSpecifications != null)
            value.WithSpecifications = withSpecifications;
        return value;
    }
    
    public static void Load<T>(IWAQSQuery<T> source)
    {
        using (var enumerator = source.GetEnumerator())
        {
            while (enumerator.MoveNext()) ;
        }
    }
<#+
    CompleteQueryableExtensions();
#>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IncludeExpressionVisitor.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Reflection", serverFxEntitiesNamespace);
#>
public class IncludeExpressionVisitor<QueryType> : ExpressionVisitor
{
    private List<Func<IWAQSQueryBase, QueryType>> _includeActions = new List<Func<IWAQSQueryBase, QueryType>>();

    public IEnumerable<Func<IWAQSQueryBase, QueryType>> IncludeActions
    {
        get { return _includeActions; }
    }
            
    protected override Expression VisitMethodCall(MethodCallExpression node)
    {
        if (node.Method.GetCustomAttributes(false).OfType<IncludeMethodAttribute>().Any())
        {
            MethodInfo method = node.Method;
            List<Expression> parameters = null;
            var queryParameter = Expression.Parameter(typeof(IWAQSQueryBase), "p" + Guid.NewGuid().ToString());
    
            var includeMethod = method.DeclaringType.GetMethods(BindingFlags.Public | BindingFlags.Static).FirstOrDefault(m =>
                {
                    var parametersLoop = new List<Expression>();
                    if (m.Name != method.Name)
                        return false;
                    var methodParametersEnumerator = method.GetParameters().Cast<ParameterInfo>().GetEnumerator();
                    var mParametersEnumerator = m.GetParameters().Cast<ParameterInfo>().GetEnumerator();
                    var nodeArgumentsEnumerator = node.Arguments.GetEnumerator();
                    int parameterIndex = 0;
                    while (methodParametersEnumerator.MoveNext())
                    {
                        nodeArgumentsEnumerator.MoveNext();
                        if (!mParametersEnumerator.MoveNext())
                            return false;
                        var methodParameterType = methodParametersEnumerator.Current.ParameterType;
                        var mParameterType = mParametersEnumerator.Current.ParameterType;
                        if (parameterIndex == 0)
                        {
                            parameterIndex++;
                            if (methodParameterType.IsGenericType && methodParameterType.GetGenericTypeDefinition() == typeof(IEnumerable<>) || !methodParameterType.IsGenericType && typeof(IEntity).IsAssignableFrom(methodParameterType))
                            {
                                if (mParameterType == typeof(QueryType))
                                    parametersLoop.Add(Expression.Convert(queryParameter, typeof(QueryType)));
                                else
                                    return false;
                            }
                            else
                                return false;
                        }
                        else if (methodParameterType == mParameterType)
                            parametersLoop.Add(nodeArgumentsEnumerator.Current);
                        else
                            return false;
                    }
                    if (mParametersEnumerator.MoveNext())
                        return false;
                    parameters = parametersLoop;
                    return true;
                });
    
            if (includeMethod == null)
            {
                if (typeof(IWAQSQueryValue).IsAssignableFrom(typeof(QueryType)))
                    throw new NotImplementedException("Not implemented yet. Use Take(1) instead of First or Single");
                throw new NotImplementedException();
            }

            _includeActions.Add(Expression.Lambda<Func<IWAQSQueryBase, QueryType>>(
                Expression.Call(includeMethod, parameters), queryParameter).Compile());
            return Visit(node.Arguments[0]);
        }
        return base.VisitMethodCall(node);
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("ReplaceTypeRewriter.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Reflection", serverFxEntitiesNamespace);
#>
public class ReplaceTypeRewriter<OldT, NewT> : ExpressionVisitor
{
    protected override Expression VisitConstant(ConstantExpression expression)
    {
        Type newType = ReplaceType(expression.Type);
        if (newType != expression.Type)
            return Expression.Constant(expression.Value, newType);
        return base.VisitConstant(expression);
    }

    protected override Expression VisitLambda<T>(Expression<T> expression)
    {
        Type newType = ReplaceType(expression.ReturnType);
        if (newType != expression.ReturnType)
            return Expression.Lambda(Visit(expression.Body), expression.Parameters.Select(p => (ParameterExpression)Visit(p)));
        return base.VisitLambda(expression);
    }

    protected override Expression VisitMember(MemberExpression expression)
    {
        Type newType = ReplaceType(expression.Member.DeclaringType);
        if (newType != expression.Member.DeclaringType)
            return Expression.MakeMemberAccess(Visit(expression.Expression), newType.GetProperty(expression.Member.Name));
        return base.VisitMember(expression);
    }
        
    protected override Expression VisitMethodCall(MethodCallExpression expression)
    {
        Type newType = ReplaceType(expression.Method.DeclaringType);
        MethodInfo method;
        if (newType == expression.Method.DeclaringType)
        {
            method = expression.Method;
            if (!method.IsGenericMethod)
                return base.VisitMethodCall(expression);
            method = method.GetGenericMethodDefinition();
        }
        else
            method = newType.GetMethod(expression.Method.Name, expression.Method.GetParameters().Select(p => ReplaceType(p.ParameterType)).ToArray());
        if (method.IsGenericMethod)
            method = method.MakeGenericMethod(expression.Method.GetGenericArguments().Select(ga => ReplaceType(ga)).ToArray());
        return Expression.Call(Visit(expression.Object), method, expression.Arguments.Select(p => Visit(p)));
    }
        
    protected override Expression VisitParameter(ParameterExpression expression)
    {
        Type newType = ReplaceType(expression.Type);
        if (newType != expression.Type)
            return Expression.Parameter(newType, expression.Name);
        return base.VisitParameter(expression);
    }
        
    private static Type ReplaceType(Type type)
    {
        if (type == typeof(OldT))
            return typeof(NewT);
        if (type.IsGenericType)
            return type.GetGenericTypeDefinition().MakeGenericType(type.GetGenericArguments().Select(t => ReplaceType(t)).ToArray());
        return type;
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("TrackableCollectionDALExtensions.cs");
    WriteHeader(namespaceName, code, serverFxEntitiesNamespace);
#>
public static class TrackableCollectionDALExtensions
{
    public static void Attach<T>(this TrackableCollection<T> collection, T item, IDataContext context)
        where T : class, IEntity
    {
        collection.IsAttachingOrDetaching = true;
        bool changeTrackerEnabled; 
        if (item.ChangeTracker == null)
            changeTrackerEnabled = false;
        else
        {
            changeTrackerEnabled = item.ChangeTracker.ChangeTrackingEnabled;
            item.ChangeTracker.ChangeTrackingEnabled = false;
        }
        collection.Add(item);
        context.AttachRelationship(collection.Owner, item, collection.Name);
        if (item.ChangeTracker != null)
            item.ChangeTracker.ChangeTrackingEnabled = changeTrackerEnabled;
        collection.IsAttachingOrDetaching = false;
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IAsyncEnumerableFactory.cs");
    WriteHeader(namespaceName, code, "System.Linq");
#>
public interface IAsyncEnumerableFactory
{
<#+
    CompleteIAsyncEnumerableFactory();
#>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IAsyncQueryProviderFactory.cs");
    WriteHeader(namespaceName, code, "System.Linq", "System.Linq.Expressions", "System.Threading", "System.Threading.Tasks");
#>
public interface IAsyncQueryProviderFactory
{
<#+
    CompleteIAsyncQueryProviderFactory();
#>
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IAsyncEnumerable.cs");
    WriteHeader(namespaceName, code);
#>
public interface IAsyncEnumerable
{
    IAsyncEnumerator GetAsyncEnumerator();
}

public interface IAsyncEnumerable<out T> : IAsyncEnumerable
{
    new IAsyncEnumerator<T> GetAsyncEnumerator();
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("AsyncEnumerable.cs");
    WriteHeader(namespaceName, code);
#>
public class AsyncEnumerable : IAsyncEnumerable
{
    private IAsyncEnumerator _asyncEnumerator;

    public AsyncEnumerable(IAsyncEnumerator asyncEnumerator)
    {
        _asyncEnumerator = asyncEnumerator;
    }

    public IAsyncEnumerator GetAsyncEnumerator()
    {
        return _asyncEnumerator;
    }
}

public class AsyncEnumerable<T> : AsyncEnumerable, IAsyncEnumerable<T>
{
    private IAsyncEnumerator<T> _asyncEnumerator;

    public AsyncEnumerable(IAsyncEnumerator<T> asyncEnumerator)
        : base(asyncEnumerator)
    {
        _asyncEnumerator = asyncEnumerator;
    }

    public new IAsyncEnumerator<T> GetAsyncEnumerator()
    {
        return _asyncEnumerator;
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("IAsyncEnumerator.cs");
    WriteHeader(namespaceName, code, "System", "System.Threading", "System.Threading.Tasks");
#>
public interface IAsyncEnumerator : IDisposable
{
    Task<bool> MoveNextAsync(CancellationToken cancellationToken);

    object Current { get; }
}

public interface IAsyncEnumerator<out T> : IAsyncEnumerator
{
    new T Current { get; }
}
<#+
    WriteFooter(namespaceName);

    fileManager.Process();
}
#>
<#+// Copyright (c) Matthieu MEZIL.  All rights reserved.
#>
<#+private void CompleteIWAQSQueryValue()
    {
#>
    Task<object> ExecuteAsync(CancellationToken cancellationToken = default(CancellationToken));
<#+
    }

    private void CompleteIWAQSQueryValueOfT()
    {
#>
    new Task<T> ExecuteAsync(CancellationToken cancellationToken = default(CancellationToken));
<#+
    }

    private void CompleteIWAQSQuery()
    {
#>
    Task ForeachAsync(Action<object> action, CancellationToken cancellationToken = default(CancellationToken));
<#+
    }

    private void CompleteIWAQSQueryOfT()
    {
#>
    Task ForeachAsync(Action<T> action, CancellationToken cancellationToken = default(CancellationToken));
<#+
    }

    private void CompleteWAQSQueryValue()
    {
#>

    public Task<object> ExecuteAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
        return WAQSQueryProvider.ExecuteAsync(Expression, cancellationToken);
    }
<#+
    }

    private void CompleteWAQSQueryValueOfT()
    {
#>

    public new Task<T> ExecuteAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
        return WAQSQueryProvider.ExecuteAsync<T>(Expression, cancellationToken);
    }
<#+
    }

    private void CompleteWAQSQuery()
    {
#>
        
    protected virtual Tuple<IAsyncEnumerator, Func<T>> GetQueryAsyncEnumerator<T>(IQueryProvider provider, Expression expression)
    {
        var q = provider.CreateQuery(expression);
        var enumerator = AsyncQueryProviderFactory.AsyncEnumerableFactory.GetAsyncEnumerable(q).GetAsyncEnumerator();
        return new Tuple<IAsyncEnumerator, Func<T>>(enumerator, () => (T)enumerator.Current);
    }

    protected async internal static Task<object> LoadIncludesAsync(IWAQSQueryBase queryBase, Dictionary<string, object> addedIncludesPathes = null, object value = null, bool withValue = false, string path = null, CancellationToken cancellationToken = default(CancellationToken))
    {
        if (addedIncludesPathes == null)
            addedIncludesPathes = new Dictionary<string, object>();
        if (!withValue)
        {
            var query = queryBase as IWAQSQuery;
            IWAQSQueryValue queryValue;
            if (query != null)
            {
                var queryType = query.GetType();
                if (!queryType.IsGenericType)
                    throw new InvalidOperationException();
                value = await ((Task<object>)typeof(WAQSQuery).GetMethod("GetIncludeListAsync").MakeGenericMethod(queryType.GetGenericArguments()[0]).Invoke(null, new object[] { query, cancellationToken }));
            }
            else if ((queryValue = queryBase as IWAQSQueryValue) != null)
            {
                queryValue.FromQuery = true;
                value = await queryValue.ExecuteAsync(cancellationToken);
            }
            else
                throw new InvalidOperationException();
        }
        if (queryBase.QueryableIncludes != null)
            foreach (var include in queryBase.QueryableIncludes)
            {
                var queryableInclude = include(queryBase);
                object includeValue = null;
                bool includeWithValue = false;
                if (queryableInclude.Path == null || !(includeWithValue = addedIncludesPathes.TryGetValue(queryableInclude.Path, out includeValue)))
                {
                    var includesValues = new object[queryableInclude.Queries.Length];
                    for (int i = 0 ; i < includesValues.Length ; i ++)
                        includesValues[i] = await LoadIncludesAsync(queryableInclude.Queries[i], addedIncludesPathes, includeValue, includeWithValue, queryableInclude.Path, cancellationToken: cancellationToken);
                    queryableInclude.Load(value, includesValues);
                }
                else
                    foreach (var query in queryableInclude.Queries)
                        await LoadIncludesAsync(query, addedIncludesPathes, includeValue, includeWithValue, queryableInclude.Path, cancellationToken: cancellationToken);
            }
        return value;
    }
    
    private async Task<object> GetIncludeListAsync<T>(IWAQSQuery query, CancellationToken cancellationToken = default(CancellationToken))
    {
        query.FromQuery = true;
        var values = new List<T>();
        await query.ForeachAsync(o => values.Add((T) o), cancellationToken);
        return values;
    }
    
    private async Task GetEnumerableWithoutIncludeAsync<T>(Func<IQueryProvider, Tuple<IAsyncEnumerator, Func<T>>> asyncEnumeratorFactory, Action<T> action, CancellationToken cancellationToken)
    {
        var asyncEnumerator = asyncEnumeratorFactory(((WAQSQueryProvider)Provider).SourceProvider);
        var values = new List<T>();
        while (await asyncEnumerator.Item1.MoveNextAsync(cancellationToken))
        {
            EntitiesInitializer.FromQuery = true;
            var o = asyncEnumerator.Item2();
            EntitiesInitializer.FromQuery = false;
            WithType withType;
            if (WAQSQuery.WithTypes.TryGetValue(typeof(T), out withType))
                o = (T)withType.TransformToOriginalType(o);
            action(o);
        }
    }
    
    protected async Task ForeachAsync<T>(Action<T> action, CancellationToken cancellationToken = default(CancellationToken))
    {
        var expression = InitWith();
        try
        {
            if (!(FromQuery || QueryableIncludes == null) && QueryableIncludes.Any())
            {
                var value = new List<T>();
                await GetEnumerableWithoutIncludeAsync<T>(provider => GetQueryAsyncEnumerator<T>(provider, expression), item => value.Add(item), cancellationToken);
                await LoadIncludesAsync(this, value: value, withValue: true);
                foreach (T item in value)
                    action(item);
            }
            await GetEnumerableWithoutIncludeAsync<T>(provider => GetQueryAsyncEnumerator<T>(provider, expression), action, cancellationToken);
        }
        finally
        {
            EntitiesInitializer.FromQuery = false;
        }
    }
    
    public Task ForeachAsync(Action<object> action, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ForeachAsync<object>(action, cancellationToken);
    }
<#+
    }

    private void CompleteWAQSQueryOfT()
    {
#>
    
    protected override Tuple<IAsyncEnumerator, Func<T2>> GetQueryAsyncEnumerator<T2>(IQueryProvider provider, Expression expression)
    {
        if (typeof(T2) != typeof(T))
            return base.GetQueryAsyncEnumerator<T2>(provider, expression);
        var q = provider.CreateQuery<T2>(expression);
        var enumerator = AsyncQueryProviderFactory.AsyncEnumerableFactory.GetAsyncEnumerable<T2>(q).GetAsyncEnumerator();
        return new Tuple<IAsyncEnumerator, Func<T2>>(enumerator, () => enumerator.Current);
    }
    
    public Task ForeachAsync(Action<T> action, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ForeachAsync<T>(action, cancellationToken);
    }
<#+
    }

    private void CompleteWAQSQueryProvider()
    {
#>
                    
    private async Task<TResult> ExecuteAsync<TResult>(Expression expression, Func<Expression, Task<TResult>> executeAsync, Func<TResult, TResult> fromWith = null)
    {
        try
        {
            EntitiesInitializer.FromQuery = true;
            var result = await executeAsync(expression);
            EntitiesInitializer.FromQuery = false;
            if (fromWith != null)
                result = fromWith(result);
            if (!(CurrentQuery == null || CurrentQuery.FromQuery || CurrentQuery.QueryableIncludes == null))
                await WAQSQuery.LoadIncludesAsync(CurrentQuery, value: new TResult[] {result}, withValue: true);
            return result;
        }
        finally
        {
            EntitiesInitializer.FromQuery = false;
        }
    }
                        
    public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = default(CancellationToken))
    {
        Func<TResult, TResult> fromWith = null;
        if (CurrentQuery != null && CurrentQuery.WithSpecifications != null && CurrentQuery.WithSpecifications.Any())
        {
            var query = ((WAQSQuery)CurrentQuery).ApplyWith();
            expression = Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == ((MethodCallExpression)expression).Method.Name && m.GetParameters().Length == 1).MakeGenericMethod(typeof(TResult)), query.Expression);
            fromWith = item =>
            {
                WithType withType;
                if (WAQSQuery.WithTypes.TryGetValue(typeof (TResult), out withType))
                    item = (TResult)withType.TransformToOriginalType(item);
                return item;
            };
        }
        return ExecuteAsync<TResult>(expression, e => AsyncQueryProviderFactory.ExecuteAsync<TResult>(SourceProvider, e, cancellationToken), fromWith);
    }
                                
    public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ExecuteAsync<object>(expression, e => AsyncQueryProviderFactory.ExecuteAsync(SourceProvider, e, cancellationToken));
    }
<#+
    }

    private void CompleteIAsyncEnumerableFactory()
    {
#>
    IAsyncEnumerable GetAsyncEnumerable(IQueryable query);
    IAsyncEnumerable<T> GetAsyncEnumerable<T>(IQueryable<T> query);
<#+
    }

    private void CompleteIAsyncQueryProviderFactory()
    {
#>
    Task<object> ExecuteAsync(IQueryProvider queryProvider, Expression expression, CancellationToken cancellationToken = default(CancellationToken));
    Task<T> ExecuteAsync<T>(IQueryProvider queryProvider, Expression expression, CancellationToken cancellationToken = default(CancellationToken));
    IAsyncEnumerableFactory AsyncEnumerableFactory { get; }
<#+
    }

    private void CompleteQueryableExtensions()
    {
#>
    
    public static Task<bool> AllAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<bool>(Expression.Call(typeof(Queryable).GetMethod("All").MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<bool> AnyAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<bool>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<bool> AnyAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<bool>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Any" && m.GetParameters().Length == 2).MakeGenericMethod(new Type[] { typeof(T) }), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<decimal> AverageAsync(this IWAQSQuery<decimal> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<decimal>(source, cancellationToken);
    }
        
    public static Task<decimal> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, decimal>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, decimal>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<decimal?> AverageAsync(this IWAQSQuery<decimal?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<decimal?>(source, cancellationToken);
    }
        
    public static Task<decimal?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, decimal?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, decimal?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<double> AverageAsync(this IWAQSQuery<double> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<double>(source, cancellationToken);
    }
        
    public static Task<double> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, double>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, double>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<double?> AverageAsync(this IWAQSQuery<double?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<double?>(source, cancellationToken);
    }
        
    public static Task<double?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, double?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, double?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<int> AverageAsync(this IWAQSQuery<int> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<int>(source, cancellationToken);
    }
        
    public static Task<int> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, int>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, int>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<int?> AverageAsync(this IWAQSQuery<int?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<int?>(source, cancellationToken);
    }
        
    public static Task<int?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, int?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, int?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<long> AverageAsync(this IWAQSQuery<long> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<long>(source, cancellationToken);
    }
        
    public static Task<long> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, long>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, long>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<long?> AverageAsync(this IWAQSQuery<long?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<long?>(source, cancellationToken);
    }
        
    public static Task<long?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, long?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, long?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<float> AverageAsync(this IWAQSQuery<float> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<float>(source, cancellationToken);
    }
        
    public static Task<float> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, float>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, float>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<float?> AverageAsync(this IWAQSQuery<float?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<float?>(source, cancellationToken);
    }
        
    public static Task<float?> AverageAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, float?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return AverageAsync<T, float?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    private static Task<T> AverageAsync<T>(IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        ParameterInfo[] parameters;
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Average" && (parameters = m.GetParameters()).Length == 1 && parameters[0].ParameterType == typeof(IQueryable<T>)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    private static Task<T2> AverageAsync<T, T2>(IWAQSQuery<T> source, Expression<Func<T, T2>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        ParameterInfo[] parameters;
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T2>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Average" && (parameters = m.GetParameters()).Length == 2 && parameters[1].ParameterType.GetGenericArguments()[0].GetGenericArguments()[1] == typeof(T2)).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, selector)) }), cancellationToken);
    }
        
    public static Task<bool> ContainsAsync<T>(this IWAQSQuery<T> source, T item, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<bool>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Constant(item, typeof(T)) }), cancellationToken);
    }
        
    public static Task<int> CountAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<int>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Count" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<int> CountAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<int>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Count" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<T> FirstAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "First" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T> FirstAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "First" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<T> FirstOrDefaultAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "FirstOrDefault" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T> FirstOrDefaultAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "FirstOrDefault" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task LoadAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return source.ForeachAsync(_ => { }, cancellationToken);
    }
        
    public static Task<long> LongCountAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<long>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "LongCount" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<long> LongCountAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<long>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "LongCount" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<T> MaxAsync<T>(IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Max" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T2> MaxAsync<T, T2>(this IWAQSQuery<T> source, Expression<Func<T, T2>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T2>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Max" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T), typeof(T2)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, selector)) }), cancellationToken);
    }
        
    public static Task<T> MinAsync<T>(IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Min" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T2> MinAsync<T, T2>(this IWAQSQuery<T> source, Expression<Func<T, T2>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T2>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Min" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T), typeof(T2)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, selector)) }), cancellationToken);
    }
        
    public static Task<T> SingleAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().Single(m => m.Name == "Single" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T> SingleAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().Single(m => m.Name == "Single" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<T> SingleOrDefaultAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().Single(m => m.Name == "SingleOrDefault" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    public static Task<T> SingleOrDefaultAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, bool>> predicate, CancellationToken cancellationToken = default(CancellationToken))
    {
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().Single(m => m.Name == "SingleOrDefault" && m.GetParameters().Length == 2).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, predicate)) }), cancellationToken);
    }
        
    public static Task<decimal> SumAsync(this IWAQSQuery<decimal> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<decimal>(source, cancellationToken);
    }
        
    public static Task<decimal> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, decimal>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, decimal>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<decimal?> SumAsync(this IWAQSQuery<decimal?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<decimal?>(source, cancellationToken);
    }
        
    public static Task<decimal?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, decimal?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, decimal?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<double> SumAsync(this IWAQSQuery<double> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<double>(source, cancellationToken);
    }
        
    public static Task<double> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, double>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, double>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<double?> SumAsync(this IWAQSQuery<double?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<double?>(source, cancellationToken);
    }
        
    public static Task<double?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, double?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, double?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<int> SumAsync(this IWAQSQuery<int> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<int>(source, cancellationToken);
    }
        
    public static Task<int> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, int>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, int>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<int?> SumAsync(this IWAQSQuery<int?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<int?>(source, cancellationToken);
    }
        
    public static Task<int?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, int?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, int?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<long> SumAsync(this IWAQSQuery<long> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<long>(source, cancellationToken);
    }
        
    public static Task<long> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, long>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, long>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<long?> SumAsync(this IWAQSQuery<long?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<long?>(source, cancellationToken);
    }
        
    public static Task<long?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, long?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, long?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<float> SumAsync(this IWAQSQuery<float> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<float>(source, cancellationToken);
    }
        
    public static Task<float> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, float>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, float>(source, GetExpression(source, selector), cancellationToken);
    }
        
    public static Task<float?> SumAsync(this IWAQSQuery<float?> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<float?>(source, cancellationToken);
    }
        
    public static Task<float?> SumAsync<T>(this IWAQSQuery<T> source, Expression<Func<T, float?>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        return SumAsync<T, float?>(source, GetExpression(source, selector), cancellationToken);
    }
        
    private static Task<T> SumAsync<T>(IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        ParameterInfo[] parameters;
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Sum" && (parameters = m.GetParameters()).Length == 1 && parameters[0].ParameterType == typeof(IQueryable<T>)), new Expression[] { source.Expression }), cancellationToken);
    }
        
    private static Task<T2> SumAsync<T, T2>(IWAQSQuery<T> source, Expression<Func<T, T2>> selector, CancellationToken cancellationToken = default(CancellationToken))
    {
        ParameterInfo[] parameters;
        return ((WAQSQueryProvider)source.Provider).ExecuteAsync<T2>(Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Sum" && (parameters = m.GetParameters()).Length == 2 && parameters[1].ParameterType.GetGenericArguments()[0].GetGenericArguments()[1] == typeof(T2)).MakeGenericMethod(typeof(T)), new Expression[] { source.Expression, Expression.Quote(GetExpression(source, selector)) }), cancellationToken);
    }
        
    public async static Task<T[]> ToArrayAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        return (await source.ToListAsync(cancellationToken)).ToArray();
    }
        
    public async static Task<List<T>> ToListAsync<T>(this IWAQSQuery<T> source, CancellationToken cancellationToken = default(CancellationToken))
    {
        var result = new List<T>();
        await source.ForeachAsync(item => result.Add(item), cancellationToken);
        return result;
    }
<#+
    }

    private void CompleteIDataContextUsings(List<string> idataContextUsings)
    {
        idataContextUsings.Add("System.Threading.Tasks");
    }

    private void CompleteIDataContextUsings()
    {
#>
 
    Task SaveChangesAsync(bool acceptChanges = true);
<#+
    }
#>
<#+// Copyright (c) Matthieu MEZIL.  All rights reserved.
#>

