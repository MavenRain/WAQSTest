//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using WCFAsyncQueryableServices.ClientContext.Interfaces.Querying;

namespace WCFAsyncQueryableServices.ClientContext.Interfaces
{
    public interface IAsyncQueryable : IAsyncQueryableBase
    {
    }
    
    public interface IAsyncQueryable<T> : IAsyncQueryable
    {
        Task<IEnumerable<T>> ExecuteAsync(MergeOption? mergeOption = null, Func<bool> cancel = null);
        Task<QueryPage<T>> LoadPageAsync(int pageSize, params LoadPageParameter[] identifiers);
        Task<QueryPage<T>> LoadPageAsync(int pageSize, Func<bool> cancel, params LoadPageParameter[] identifiers);
        Task<QueryPage<T>> LoadPageAsync(int pageSize, MergeOption? mergeOption, params LoadPageParameter[] identifiers);
        Task<QueryPage<T>> LoadPageAsync(int pageSize, MergeOption? mergeOption, Func<bool> cancel, params LoadPageParameter[] identifiers);
        Task<IEnumerable<T>> LoadPageAsync(int pageSize, int pageIndex, MergeOption? mergeOption = null, Func<bool> cancel = null);
    }
}
