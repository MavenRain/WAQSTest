//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using WCFAsyncQueryableServices.EntitiesTracking;

namespace WCFAsyncQueryableServices.ClientContext.Interfaces.ExpressionSerialization
{
    [DataContract(Namespace = "http://WCFAsyncQueryableServices/QuerySerialization", IsReference = true)]
    public class SerializableMethodCallExpression : SerializableMemberExpression
    {
        public SerializableMethodCallExpression()
        {
        }
        public SerializableMethodCallExpression(SerializableExpression source, IEnumerable<SerializableExpression> parameters, MethodInfo method)
            : base(source, method)
        {
            Type entityCollectionType;
            if (method.Name == "Contains" && ((entityCollectionType = method.DeclaringType.GetInterfaces().FirstOrDefault(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEntityCollection<>))) != null) || (entityCollectionType = method.DeclaringType).IsGenericType && entityCollectionType.GetGenericTypeDefinition() == typeof(TrackableCollectionBase<>))
            {
                MemberDeclaringType.NamespaceName = typeof(Collection<>).Namespace;
                MemberDeclaringType.TypeName = "Collection<>";
                Signature = null;
            }
            else
                Signature = (method.IsGenericMethod ? method.GetGenericMethodDefinition() : method).ToString();
            Parameters = parameters.ToList();
            GenericArguments = method.GetGenericArguments().Select(a => new SerializableType(a)).ToList();
            Method = method;
        }
                
        [DataMember]
        public string Signature { get; set; }
        [DataMember]
        public List<SerializableExpression> Parameters { get; set; }
        [DataMember]
        public List<SerializableType> GenericArguments { get; set; }
        public MethodInfo Method { get; set; }
    
        protected internal override SerializableExpression Visit(SerializableExpressionRewriter rewriter)
        {
            return rewriter.VisitMethodCall(this);
        }
    }
}
