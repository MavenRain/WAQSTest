//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;
using WCFAsyncQueryableServices.DAL.Interfaces;

namespace WCFAsyncQueryableServices.SerializableExpressions
{
    public interface ISerializableExpressionConverter
    {
        IDataContext Context { get; }
        Type DataContextType { get; }
        Type GetTypeFromWCFNamespace(SerializableType serializableType, string typeName);
        Type GetTypeInLINQ(Type type);
        Expression GetEntitySetExpression(string entitySetName);
        Expression GetCustomPropertyExpression(Expression expression, PropertyInfo propertyInfo);
        Type GetInheritedType(Type type);
        Type GetWithType(Type type);
        Type GetBaseType(Type type);
        object GetBaseObject(object inheritedObject);
        Expression GetWithBaseExpression(Type parameterType, IEnumerable<string> withSpecificationsProperties);
        IEnumerable<Type> GetEntityOrComplexTypes();
        IEnumerable<PropertyInfo> GetScalarAndComplexProperties(Type type);
        IEnumerable<NavigationProperty> GetNavigationProperties(Type type);
        Expression GetSpecificationLINQExpression(PropertyInfo property, Type type = null);
        Expression GetSpecificationLINQExpression(MethodInfo method, List<Expression> arguments, Type type = null);
        IEnumerable<IEnumerable<PropertyInfo>> GetDependentProperties(PropertyInfo property);
        IEnumerable<IEnumerable<PropertyInfo>> GetDependentProperties(MethodInfo method);
        PropertyInfo GetProperty(Type type, string propertyName);
    }
}
