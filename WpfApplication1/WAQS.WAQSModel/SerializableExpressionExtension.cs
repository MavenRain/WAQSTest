//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using WCFAsyncQueryableServices.ClientContext.Interfaces.ExpressionSerialization;
using WCFAsyncQueryableServices.ClientContext.Interfaces;

namespace WCFAsyncQueryableServices.ClientContext
{
    public static class SerializableExpressionExtension
    {
        public static SerializableExpression ReplaceParameter(this SerializableExpression expression, SerializableParameterExpression parameter, SerializableExpression replace)
        {
            return ReplaceParameter(expression, n => n == parameter ? replace : n);
        }
    
        public static SerializableExpression ReplaceParameter(this SerializableExpression expression, Func<SerializableParameterExpression, SerializableExpression> replace)
        {
            return new SerializableExpressionReplaceRewriter { ReplaceParameterFunc = replace }.Visit(expression);
        }
    
        public static SerializableExpression ReplaceBodyParameter(this SerializableLambdaExpression expression, SerializableExpression replace)
        {
            return ReplaceParameter(expression.Body, n => n == expression.Parameters[0] ? replace : n);
        }
    
        public static SerializableExpression ReplaceConstant(this SerializableExpression expression, SerializableConstantExpression constant, SerializableExpression replace)
        {
            return ReplaceConstant(expression, n => n == constant ? replace : n);
        }
    
        public static SerializableExpression ReplaceConstant(this SerializableExpression expression, Func<SerializableConstantExpression, SerializableExpression> replace)
        {
            return new SerializableExpressionReplaceRewriter { ReplaceConstantFunc = replace }.Visit(expression);
        }
                    
        public class SerializableExpressionReplaceRewriter : SerializableExpressionRewriter
        {
            internal Func<SerializableParameterExpression, SerializableExpression> ReplaceParameterFunc { get; set; }
            protected internal override SerializableExpression VisitParameter(SerializableParameterExpression node)
            {
                if (ReplaceParameterFunc != null)
                {
                    var value = ReplaceParameterFunc(node);
                    if (value != node)
                        return value;
                }
                return base.VisitParameter(node);
            }
    
            internal Func<SerializableConstantExpression, SerializableExpression> ReplaceConstantFunc { get; set; }
            protected internal override SerializableExpression VisitConstant(SerializableConstantExpression node)
            {
                if (ReplaceConstantFunc != null)
                {
                    var value = ReplaceConstantFunc(node);
                    if (value != node)
                        return value;
                }
                return base.VisitConstant(node);
            }
        }
    }
}
