//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using WCFAsyncQueryableServices.Common;
using WCFAsyncQueryableServices.SerializableExpressions;
using WebApplication1;
using WebApplication1.DAL.Interfaces;
using WCFAsyncQueryableServices.Service;
using WCFAsyncQueryableServices.DAL.Interfaces;

namespace WebApplication1.Service
{
    public partial class WAQSModelSerializableExpressionConverter : ISerializableExpressionConverter
    {
        private IWAQSModelContainer _context;
        private WAQSModelEntitiesFilters _entitiesFilter;
    
        public WAQSModelSerializableExpressionConverter(IWAQSModelContainer context, WAQSModelEntitiesFilters entitiesFilter)
        {
            _context = context;
            _entitiesFilter = entitiesFilter;
        }
    
        IDataContext ISerializableExpressionConverter.Context
        {
            get { return _context; }
        }
    
        Type ISerializableExpressionConverter.DataContextType
        {
            get { return typeof(IWAQSModelContainer); }
        }
    
        public Type GetTypeFromWCFNamespace(SerializableType serializableType, string typeName)
        {
            switch (serializableType.WCFNamespaceName)
            {
                case "http://WAQSModel/Entities":
                    switch (typeName)
                    {
                        case "Entity1":
                            return typeof(WebApplication1.Entity1);
                    }
                    break;
            }
            Type type = null;
            GetTypeFromWCFNamespace(serializableType, typeName, ref type);
            return type;
        }
        partial void GetTypeFromWCFNamespace(SerializableType serializableType, string typeName, ref Type type);
    
        public virtual Type GetTypeInLINQ(Type type)
        {
            GetTypeInLINQ(ref type);
            return type;
        }
        partial void GetTypeInLINQ(ref Type type);
    
        public Expression GetEntitySetExpression(string entitySetName)
        {
            switch (entitySetName)
            {
                case "Entity1":
                    return GetObjectSetExpression(_entitiesFilter.Entity1FilterExpression, _context.Entity1Expression);
    	
            }
            throw new NotImplementedException();
        }
    
        private Expression GetObjectSetExpression<T>(Expression<Func<T, bool>> filterExpression, Expression<Func<IQueryable<T>>> query)
        {
            if (filterExpression == null)
                return query.Body;
            ParameterInfo[] parameters;
            Type predicateType;
            return Expression.Call(
                typeof(Queryable).GetMethods().First(m => m.Name == "Where" && (parameters = m.GetParameters()).Length == 2 && (predicateType = parameters[1].ParameterType).IsGenericType && (predicateType = predicateType.GetGenericArguments()[0]).IsGenericType && predicateType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(T)),
                query.Body,
                filterExpression);
        }
    
        public Expression GetCustomPropertyExpression(Expression expression, PropertyInfo property)
        {
            if (property == null)
                return null;
            return null;
        }
    
        private Expression FilterPropertyMany<T>(Expression expression, PropertyInfo property, Expression<Func<T, bool>> filterExpression)
        {
            if (filterExpression == null)
                return Expression.MakeMemberAccess(expression, property);
            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Where" && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(T)), Expression.MakeMemberAccess(expression, property), filterExpression);
        }
    
        private Expression FilterPropertySingle<T>(Expression expression, PropertyInfo property, Expression<Func<T, bool>> filterExpression, IQueryable<T> query, Expression<Func<T, T, bool>> equalsExpression)
        {
            if (filterExpression == null)
                return Expression.MakeMemberAccess(expression, property); 
            var parameter = Expression.Parameter(typeof(T));
            return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "FirstOrDefault" && m.GetParameters().Length == 1).MakeGenericMethod(typeof(T)), Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Where" && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(typeof(T)), query.Expression, Expression.Lambda(Expression.AndAlso(filterExpression.Body.ReplaceParameter(filterExpression.Parameters[0], parameter), equalsExpression.Body.ReplaceParameter(p => 
                {
                    if (p == equalsExpression.Parameters[0])
                        return parameter;
                    else if (p == equalsExpression.Parameters[1])
                        return Expression.MakeMemberAccess(expression, property);
                    return p;
                })), parameter)));
        }
    
        public Type GetInheritedType(Type type)
        {
            return GetWAQSModelInheritedType(type);
        }
        public static Type GetWAQSModelInheritedType(Type type)
        {
            if (type == typeof(WebApplication1.Entity1))
                return typeof(InheritedEntity1);
            return null;
        }
    
        public Type GetWithType(Type type)
        {
            return GetWAQSModelWithType(type);
        }
        public static Type GetWAQSModelWithType(Type type)
        {
            if (typeof(WebApplication1.Entity1).IsAssignableFrom(type))
                return typeof(WithEntity1);
            return null;
        }
    
        public Type GetBaseType(Type type)
        {
            return GetWAQSModelBaseType(type);
        }
        public static Type GetWAQSModelBaseType(Type type)
        {
            if (type == typeof(InheritedEntity1) || type == typeof(WithEntity1))
                return typeof(WebApplication1.Entity1);
            return null;
        }
        
        public object GetBaseObject(object inheritedObject)
        {
            return GetWAQSModelBaseObject(inheritedObject);
        }
        public static object GetWAQSModelBaseObject(object inheritedObject)
        {
            if (inheritedObject == null)
                return null;
            var inheritedObjectAsEntity1 = inheritedObject as InheritedEntity1;
            if (inheritedObjectAsEntity1 != null)
                return new WebApplication1.Entity1 { Id = inheritedObjectAsEntity1.Id, Size = inheritedObjectAsEntity1.Size, Name = inheritedObjectAsEntity1.Name, Specifications = inheritedObjectAsEntity1.Specifications };
            return WAQSModelService.GetWithBaseObject(inheritedObject);
        }
        
        public Expression GetWithBaseExpression(Type parameterType, IEnumerable<string> withSpecificationsProperties)
        {
            return GetWAQSModelWithBaseExpression(parameterType, withSpecificationsProperties);
        }
        public static Expression GetWAQSModelWithBaseExpression(Type parameterType, IEnumerable<string> withSpecificationsProperties)
        {
            var parameter = Expression.Parameter(parameterType);
            Expression exp = null;
            Type valueType = null;
            Expression entityExpression = null;
            PropertyInfo prop;
            if (typeof(WithEntity1) == parameterType)
            {
                valueType = typeof(WebApplication1.Entity1);
                var valueVariable = Expression.Parameter(valueType);
                var exps = new List<Expression>() { Expression.Assign(valueVariable, entityExpression = Expression.MakeMemberAccess(parameter, parameterType.GetProperty("Entity1"))) };
                if (withSpecificationsProperties.Contains("NameLength"))
                    exps.Add(Expression.Assign(Expression.MakeMemberAccess(valueVariable, prop = typeof(WebApplication1.Entity1).GetProperty("NameLength")), Expression.MakeMemberAccess(parameter, prop))); 
                exps.Add(valueVariable);
                exp = Expression.Block(
                    new[] { valueVariable }, 
                    exps);
            }
            if (exp == null)
                return null;
            return Expression.Lambda(
                        Expression.Condition(
                            Expression.Equal(entityExpression, Expression.Constant(null, parameterType)), 
                            Expression.Constant(null, valueType),
                            exp),
                        parameter);
        }
        
        public IEnumerable<Type> GetEntityOrComplexTypes()
        {
            yield return typeof(WebApplication1.Entity1);
        }
     
        public IEnumerable<PropertyInfo> GetScalarAndComplexProperties(Type type)
        {
            return GetScalarProperties(type).Union(GetComplexProperties(type));
        }
     
        public IEnumerable<PropertyInfo> GetScalarProperties(Type type)
        {
            if (typeof(WebApplication1.Entity1).IsAssignableFrom(type))
            {
                yield return typeof(WebApplication1.Entity1).GetProperty("Id");
                yield return typeof(WebApplication1.Entity1).GetProperty("Size");
                yield return typeof(WebApplication1.Entity1).GetProperty("Name");
            }
    		
            yield break;
        }
     
        public IEnumerable<PropertyInfo> GetComplexProperties(Type type)
        {
    	
            yield break;	
        }
     
        public IEnumerable<NavigationProperty> GetNavigationProperties(Type type)
        {
            yield break;
        }
    
        public Expression GetSpecificationLINQExpression(PropertyInfo property, Type type = null)
        {
            if (type == null)
                type = property.DeclaringType;
            var lambdaParamater = Expression.Parameter(type);
            return Expression.Lambda(_context.GetExpression(type, property.Name, lambdaParamater), lambdaParamater);
        }
    
        public Expression GetSpecificationLINQExpression(MethodInfo method, List<Expression> arguments, Type type = null)
        {
            if (type == null)
                type = method.DeclaringType;
            var lambdaParamater = Expression.Parameter(type);
            return Expression.Lambda(_context.GetExpression(type, method.Name, arguments, lambdaParamater), lambdaParamater);
        }
    
        public IEnumerable<IEnumerable<PropertyInfo>> GetDependentProperties(PropertyInfo property)
        {
            if (typeof(WebApplication1.Entity1).IsAssignableFrom(property.DeclaringType))
            {
                switch (property.Name)
                {
                    case "NameLength":
    //					var dependentProperties = new List<IEnumerable<PropertyInfo>>();
    //					dependentProperties.Add(new PropertyInfo[] { typeof(WebApplication1.Entity1).GetProperty("Name") });
    //					foreach (var properties in dependentProperties)
    //						yield return properties;
                        yield break;
                }
            }
            yield break;
        }
    
        public IEnumerable<IEnumerable<PropertyInfo>> GetDependentProperties(MethodInfo method)
        {
            if (method.GetParameters().Length == 0)
                return new IEnumerable<PropertyInfo>[0];
            Type firstParameterType = method.GetParameters()[0].ParameterType;
            if (firstParameterType.IsAssignableFrom(typeof(WebApplication1.Entity1)))
            {
                switch (method.Name)
                {
                    case "GetNameLength":
                        return GetDependentProperties(firstParameterType.GetProperty("NameLength"));
                }
            }
            return new IEnumerable<PropertyInfo>[0];
        }
    
        PropertyInfo ISerializableExpressionConverter.GetProperty(Type type, string propertyName)
        {
            var value = type.GetProperty(propertyName);
            if (value != null)
                return value;
            if (type == typeof(Entity1))
                return typeof (WithEntity1).GetProperty(propertyName);
            throw new InvalidOperationException();
        }
    }
}
