//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Threading;
using System.Threading.Tasks;

namespace WCFAsyncQueryableServices.DAL
{
    public class CustomizableObjectContext : ObjectContext
    {
        public CustomizableObjectContext(EntityConnection connection)
            : base(connection)
        {
        }
        public CustomizableObjectContext(string connectionString)
            : base(connectionString)
        {
        }
        protected CustomizableObjectContext(EntityConnection connection, string defaultContainerName)
            : base(connection, defaultContainerName)
        {
        }
        protected CustomizableObjectContext(string connectionString, string defaultContainerName)
            : base(connectionString, defaultContainerName)
        {
        }
    
        private List<Func<ObjectContext, SaveOptions, Func<SaveOptions, int>, int>> _saveActions = new List<Func<ObjectContext, SaveOptions, Func<SaveOptions, int>,int>>();
    
        public void AddSaveAction(Func<ObjectContext, SaveOptions, Func<SaveOptions, int>, int> saveAction)
        {
            _saveActions.Add(saveAction);
        }
        
        public override int SaveChanges(SaveOptions options)
        {
            Func<int, SaveOptions, int> saveAction = null;
            saveAction = (index, saveOptions) =>
                {
                    if (index == -1)
                        return base.SaveChanges(saveOptions);
                    return _saveActions[index](this, saveOptions, so => saveAction(index - 1, so));
                };
            return saveAction(_saveActions.Count - 1, options);
        }
        private List<Func<ObjectContext, SaveOptions, Func<SaveOptions, Task<int>>, Task<int>>> _saveAsyncActions = new List<Func<ObjectContext, SaveOptions, Func<SaveOptions, Task<int>>, Task<int>>>();
    
        public void AddSaveAsyncAction(Func<ObjectContext, SaveOptions, Func<SaveOptions, Task<int>>, Task<int>> saveAsyncAction)
        {
            _saveAsyncActions.Add(saveAsyncAction);
        }
    
        public override async Task<int> SaveChangesAsync(SaveOptions options, CancellationToken cancellationToken)
        {
            Func<int, SaveOptions, Task<int>> saveActionAsync = null;
            saveActionAsync = async (index, saveOptions) =>
                {
                    if (index == -1)
                        return await base.SaveChangesAsync(saveOptions);
                    return await _saveAsyncActions[index](this, saveOptions, so => saveActionAsync(index - 1, so));
                };
            return await saveActionAsync(_saveAsyncActions.Count - 1, options);
        }
    }
}
