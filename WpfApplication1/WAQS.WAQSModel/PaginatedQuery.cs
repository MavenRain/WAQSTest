//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;
using WCFAsyncQueryableServices.ComponentModel;
using WCFAsyncQueryableServices.ClientContext.Interfaces;
using WCFAsyncQueryableServices.ClientContext.Interfaces.Querying;

namespace WCFAsyncQueryableServices.ClientContext
{
    public class PaginatedQuery : BindableObject
    {
        public const int DefaultPageSizeConst = 20;
        private static int? _defaultPageSize;
        public static int DefaultPageSize
        {
            get { return _defaultPageSize ?? DefaultPageSizeConst; }
            set { _defaultPageSize = value; }
        }
    }
            
    public class PaginatedQuery<T> : PaginatedQuery, IPaginatedQuery
    {
        private IAsyncQueryable<T> _query;
        private MergeOption? _mergeOption;
        private Action<int, IEnumerable<T>> _getValues;
        private Action _callBack;
        
        public PaginatedQuery(IAsyncQueryable<T> query, int? pageSize = null, MergeOption? mergeOption = null, Action<int, IEnumerable<T>> getValues = null, Action callBack = null)
        {
            _query = query;
            PageSize = pageSize ?? DefaultPageSize;
            _mergeOption = mergeOption;
            _callBack = callBack;
            _getValues = getValues ?? ((pageIndex, values) =>
                {
                    if (pageIndex != PageIndex)
                        return;
                    Items.Clear();
                    foreach (T value in values)
                        Items.Add(value);
                    if (_callBack != null)
                        _callBack();
                });
        }
            
        public int PageSize { get; private set; }
            
        private int _pageIndex = 1;
        public int PageIndex
        {
            get { return _load ? _pageIndex : 0; }
            set
            {
                _pageIndex = value;
                NotifyPropertyChanged.RaisePropertyChanged(() => PageIndex);
                if (PageIndexChanged != null)
                    PageIndexChanged();
                LoadPage(value);
            }
        }
            
        public event Action PageIndexChanged;
            
        private int? _count;
        private bool _isCounting = false;
        public int? Count
        {
            get
            {
                if (_load && _count == null && !_isCounting)
                {
                    _isCounting = true;
                    InitCountAsync().ConfigureAwait(true);
                }
                return _count;
            }
            private set
            {
                _count = value;
                _isCounting = false;
                NotifyPropertyChanged.RaisePropertyChanged(() => Count);
                NotifyPropertyChanged.RaisePropertyChanged(() => MaxPage);
            }
        }
            
        public async Task InitCountAsync()
        {
            Count = await _query.Count().ExecuteAsync();
        }
            
        public int MaxPage
        {
            get { return (((Count ?? 1) - 1) / PageSize) + 1; }
        }
            
        private ObservableCollection<T> _items;
        public ObservableCollection<T> Items
        {
            get { return _items ?? (_items = new ObservableCollection<T>()); }
        }
        
        private bool _load;
        public PaginatedQuery<T> LoadPage(int? pageIndex = null, Action callBack = null)
        {
            _load = true;
            LoadPageBodyAsync(pageIndex, callBack).ConfigureAwait(true);
            return this;
        }
        private async Task LoadPageBodyAsync(int? pageIndex, Action callBack)
        {
            Items.Clear();
            int pageIndexValue = pageIndex ?? PageIndex;
            _getValues(pageIndexValue, await _query.Skip((pageIndexValue - 1) * PageSize).Take(PageSize).ExecuteAsync(_mergeOption));
        }
            
        private LoadPageParameter[] _identifiers;
        public PaginatedQuery<T> LoadPage(params LoadPageParameter[] identifiers)
        {
            _load = true;
            Items.Clear();
            _identifiers = identifiers;
            LoadPageInternalAsync(identifiers).ConfigureAwait(true);
            return this;
        }
        private async Task LoadPageInternalAsync(params LoadPageParameter[] identifiers)
        {
            var result = await _query.LoadPageAsync(PageSize, _mergeOption, identifiers);
            if (_identifiers == identifiers)
            {
                _pageIndex = result.PageIndex + 1;
                NotifyPropertyChanged.RaisePropertyChanged(() => PageIndex);
                if (PageIndexChanged != null)
                    PageIndexChanged();
                Items.Clear();
                foreach (T value in result)
                    Items.Add(value);
                if (_callBack != null)
                    _callBack();
            }
        }
    }
            
    public static class PaginatedQueryExtension
    {
        public static PaginatedQuery<T> ToPaginatedQuery<T>(this IAsyncQueryable<T> query, int? pageSize = null, MergeOption? mergeOption = null, Action<int, IEnumerable<T>> getValues = null, Action callBack = null)
        {
            return new PaginatedQuery<T>(query, pageSize, mergeOption, getValues, callBack);
        }
    }
}
