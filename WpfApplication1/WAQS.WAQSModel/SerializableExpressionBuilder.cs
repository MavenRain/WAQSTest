//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text.RegularExpressions;

namespace WCFAsyncQueryableServices.ClientContext.Interfaces.ExpressionSerialization
{
    public class SerializableExpressionBuilder : ExpressionVisitor
    {
        private Reference<SerializableExpression> _serializableReference;
        private Dictionary<ParameterExpression, SerializableParameterExpression> _lambdaParameters = new Dictionary<ParameterExpression, SerializableParameterExpression>();
        private ParameterMode _parameterMode;
        private IClientContextBase _clientContext;
        private Func<ParameterExpression, SerializableExpression> _transformParameter;
    
        internal SerializableExpressionBuilder(Reference<SerializableExpression> serializableReference, ParameterMode parameterMode, IClientContextBase clientContext)
        {
            _serializableReference = serializableReference;
            _parameterMode = parameterMode;
            _clientContext = clientContext;
        }
        internal SerializableExpressionBuilder(Reference<SerializableExpression> serializableReference, ParameterMode parameterMode, Dictionary<ParameterExpression, SerializableParameterExpression> lambdaParameters, IClientContextBase clientContext, Func<ParameterExpression, SerializableExpression> transformParameter)
            : this(serializableReference, parameterMode, clientContext)
        {
            _lambdaParameters = lambdaParameters;
            _transformParameter = transformParameter;
        }
        
        public bool UseQueryable { get; set; }
        
        public override Expression Visit(Expression node)
        {
            if (node == null)
                return null;
            var nodeAsMemberExp = node as MemberExpression;
            if (nodeAsMemberExp != null && nodeAsMemberExp.Expression is ConstantExpression && typeof(IAsyncQueryableBase).IsAssignableFrom(node.Type))
            {
                _serializableReference.Value = ((IAsyncQueryableBase)Expression.Lambda<Func<IAsyncQueryableBase>>(node).Compile()()).Expression;
                return null;
            }
            var newNode = _clientContext.GetTransformer().TransformExpression(node);
            Expression value;
            if (newNode == node)
                value = base.Visit(node);
            else
                value = base.Visit(newNode);
            if (value != null)
                throw new NotImplementedException();
            return null;
        }
                    
        protected override Expression VisitTypeBinary(TypeBinaryExpression node)
        {
            var serializableExpressionReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(serializableExpressionReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.Expression);
            _serializableReference.Value = new SerializableTypeBinaryExpression(serializableExpressionReference.Value, node.NodeType, node.TypeOperand);
            return null;
        }
                    
        protected override Expression VisitBinary(BinaryExpression node)
        {
            var serializableLeftReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(serializableLeftReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.Left);
            var serializableRightReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(serializableRightReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.Right);
            _serializableReference.Value = new SerializableBinaryExpression(serializableLeftReference.Value, serializableRightReference.Value, node.NodeType);
            return null;
        }
                    
        protected override Expression VisitUnary(UnaryExpression node)
        {
            var serializableExpressionReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(serializableExpressionReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.Operand);
            _serializableReference.Value = new SerializableUnaryExpression(serializableExpressionReference.Value, node.NodeType, node.Type);
            return null;
        }
                    
        protected override Expression VisitMethodCall(MethodCallExpression node)
        {
            if (node.Method.DeclaringType == typeof(AsyncQueryableExtensions) && node.Method.Name == "AsObject")
            {
                Visit(node.Arguments[0]);
                return null;
            }
                
            if (node.Method.DeclaringType == typeof(ClientEntitySetExtensions) && node.Method.Name == "AsAsyncQueryable")
            {
                _serializableReference.Value = Expression.Lambda<Func<IAsyncQueryable>>(node).Compile()().Expression;
                return null;
            }
                
            if (typeof(IClientEntitySet).IsAssignableFrom(node.Method.ReturnType))
            {
                _serializableReference.Value = new SerializableEntitySetExpression(Expression.Lambda<Func<IClientEntitySet>>(node).Compile()().EntitySetName);
                return null;
            }
                    
            if (node.Method.DeclaringType == typeof(ClientEntitySetExtensions))
            {
                new SerializableExpressionBuilder(_serializableReference, _parameterMode, _clientContext).Visit(node.Arguments[0]);
                return null;
            }
                    
            if (node.Object is ConstantExpression)
            {
                var value = Expression.Lambda(node).Compile();
                if (_parameterMode == ParameterMode.OnDefinition)
                    _serializableReference.Value = new SerializableConstantExpression(value.DynamicInvoke(), node.Type);
                else
                    _serializableReference.Value = new SerializableConstantExpression(value, node.Type);
                return null;
            }
                    
            var serializableSourceReference = new Reference<SerializableExpression>();
            if (node.Object != null)
                new SerializableExpressionBuilder(serializableSourceReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.Object);
                    
            var method = node.Method;
                    
            if (typeof(IAsyncQueryableBase).IsAssignableFrom(node.Type) && method.DeclaringType == typeof(AsyncQueryableExtensions))
            {
                var signature = Regex.Replace((method.IsGenericMethod ? method.GetGenericMethodDefinition().ToString() : method.ToString()), string.Concat(typeof(IAsyncQueryableValue).ToString(), @"`1\[((?>[^\[\]]+|\[(?<DEPTH>)|\](?<-DEPTH>))*(?(DEPTH)(?!)))\]"), m => Regex.Replace(m.Groups[1].Value, @"System.([\w\d]+)", m2 => m2.Groups[1].Value)).Replace(typeof(IAsyncQueryable).ToString(), typeof(IQueryable).ToString());
                                       
                var queryableMethod = typeof(Queryable).GetMethods().First(m => (m.IsGenericMethod ? m.GetGenericMethodDefinition().ToString() : m.ToString()) == signature);
                if (method.IsGenericMethod)
                    method = queryableMethod.MakeGenericMethod(method.GetGenericArguments());
            }
    
            bool applyQueryable = UseQueryable && method.DeclaringType == typeof(Enumerable);
            if (applyQueryable)
            {
                var signature = Regex.Replace(Regex.Replace((method.IsGenericMethod ? method.GetGenericMethodDefinition().ToString() : method.ToString()), @"(System.Collections.Generic.IEnumerable|System.Linq.I(\w*)Enumerable)`1\[((?>[^\[\]]+|\[(?<DEPTH>)|\](?<-DEPTH>))*(?(DEPTH)(?!)))\]", m => string.Concat("System.Linq.I", m.Groups[2].Value, "Queryable`1[", m.Groups[3].Value, "]")), @"System.Func`\d+\[[^\[\]]+\]", m => string.Concat("System.Linq.Expressions.Expression`1[", m.Value, "]"));
            
                var queryableMethod = typeof(Queryable).GetMethods().First(m => (m.IsGenericMethod ? m.GetGenericMethodDefinition().ToString() : m.ToString()) == signature);
                if (method.IsGenericMethod)
                    method = queryableMethod.MakeGenericMethod(method.GetGenericArguments());
            }
            
            _serializableReference.Value = new SerializableMethodCallExpression(serializableSourceReference.Value, node.Arguments.Select((a, i) =>
            {
                var parameterSourceReference = new Reference<SerializableExpression>();
                var serializableExpressionBuilder = new SerializableExpressionBuilder(parameterSourceReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter);
                if (i == 0 && applyQueryable)
                    serializableExpressionBuilder.UseQueryable = true;
                serializableExpressionBuilder.Visit(a);
                return parameterSourceReference.Value;
            }), method);
            return null;
        }
                    
        protected override Expression VisitMember(MemberExpression node)
        {
            var prop = node.Member as PropertyInfo;
            Type constantType = null;
            if (prop == null)
            {
                Type fieldType = ((FieldInfo)node.Member).FieldType;
                if (typeof(IClientEntitySet).IsAssignableFrom(fieldType))
                {
                    _serializableReference.Value = new SerializableEntitySetExpression(Expression.Lambda<Func<IClientEntitySet>>(node).Compile()().EntitySetName);
                    return null;
                }
                constantType = fieldType;
            }
            else if (prop.GetGetMethod().IsStatic)
                _serializableReference.Value = new SerializableConstantExpression(prop.GetValue(null, null), ((PropertyInfo)node.Member).PropertyType);
            else
            {
                if (typeof(IClientEntitySet).IsAssignableFrom(prop.PropertyType))
                {
                    _serializableReference.Value = new SerializableEntitySetExpression(Expression.Lambda<Func<IClientEntitySet>>(node).Compile()().EntitySetName);
                    return null;
                }
                if (typeof(IClientContext).IsAssignableFrom(prop.DeclaringType))
                {
                    _serializableReference.Value = new SerializablePropertyGetterExpression(null, prop);
                    return null;
                }
                    
                if (node.Expression is ConstantExpression)
                {
                    constantType = prop.PropertyType;
                }
                else
                {
                    var serializableSourceReference = new Reference<SerializableExpression>();
                    new SerializableExpressionBuilder(serializableSourceReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.Expression);
                    _serializableReference.Value = new SerializablePropertyGetterExpression(serializableSourceReference.Value, prop);
                    return null;
                }
            }
            if (constantType != null)
            {
                var value = Expression.Lambda(node).Compile();
                if (_parameterMode == ParameterMode.OnDefinition)
                    _serializableReference.Value = new SerializableConstantExpression(value.DynamicInvoke(), constantType);
                else
                    _serializableReference.Value = new SerializableConstantExpression(value, constantType);
            }
            return null;
        }
                    
        protected override Expression VisitConstant(ConstantExpression node)
        {
            _serializableReference.Value = new SerializableConstantExpression(node.Value, node.Type);
            return null;
        }
                    
        protected override Expression VisitLambda<T>(Expression<T> node)
        {
            List<SerializableParameterExpression> parameters = new List<SerializableParameterExpression>();
            Dictionary<ParameterExpression, SerializableParameterExpression> lambdaParameters = new Dictionary<ParameterExpression, SerializableParameterExpression>(_lambdaParameters);
            foreach (var parameter in node.Parameters)
            {
                var serializableParameter = new SerializableParameterExpression(parameter);
                parameters.Add(serializableParameter);
                lambdaParameters.Add(parameter, serializableParameter);
            }
                    
            var serializableBodyReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(serializableBodyReference, _parameterMode, lambdaParameters, _clientContext, _transformParameter).Visit(node.Body);
                    
            _serializableReference.Value = new SerializableLambdaExpression(parameters, node.ReturnType, serializableBodyReference.Value);
            if (typeof(IAsyncQueryableBase).IsAssignableFrom(node.Type))
                _serializableReference.Value = new SerializableUnaryExpression(_serializableReference.Value, ExpressionType.Quote, typeof(Expression<T>));
            return null;
        }
                 
        protected override Expression VisitParameter(ParameterExpression node)
        {
            SerializableParameterExpression serializableParameterExpression;
            if (_lambdaParameters.TryGetValue(node, out serializableParameterExpression))
                _serializableReference.Value = serializableParameterExpression;
            else
                _serializableReference.Value = _transformParameter(node);
            return null;
        }
                    
        protected override Expression VisitNew(NewExpression node)
        {
            _serializableReference.Value = new SerializableConstructorExpression(new SerializableType(node.Type), node.Arguments.Select(a => new SerializableType(a.Type)), node.Arguments.Select(a =>
            {
                var parameterSourceReference = new Reference<SerializableExpression>();
                new SerializableExpressionBuilder(parameterSourceReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(a);
                return parameterSourceReference.Value;
            }));
            return null;
        }
                    
        protected override Expression VisitMemberInit(MemberInitExpression node)
        {
            var ctorReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(ctorReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.NewExpression);
            _serializableReference.Value = new SerializableMemberInitExpression((SerializableConstructorExpression)ctorReference.Value, node.Bindings.Select(b =>
                {
                    var valueReference = new Reference<SerializableExpression>();
                    Expression value;
                    var memberAssignment = b as MemberAssignment;
                    if (memberAssignment != null)
                        value = memberAssignment.Expression;
                    else
                        throw new NotImplementedException();
                    new SerializableExpressionBuilder(valueReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(value);
                    return new SerializablePropertySetterExpression(null, (PropertyInfo)b.Member, valueReference.Value);
                }));
            return null;
        }
                    
        protected override Expression VisitConditional(ConditionalExpression node)
        {
            var testReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(testReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.Test);
            var ifTrueReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(ifTrueReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.IfTrue);
            var ifFalseReference = new Reference<SerializableExpression>();
            new SerializableExpressionBuilder(ifFalseReference, _parameterMode, _lambdaParameters, _clientContext, _transformParameter).Visit(node.IfFalse);
            _serializableReference.Value = new SerializableConditionalExpression(testReference.Value, ifTrueReference.Value, ifFalseReference.Value, node.Type);
            return null;
        }
    }
}
