//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using WCFAsyncQueryableServices.Common;
using WCFAsyncQueryableServices.Service;
using WCFAsyncQueryableServices.Service.Interfaces;
using WCFAsyncQueryableServices.WCFService.Contract;

namespace WCFAsyncQueryableServices.WCFService
{
    public static partial class WCFService
    {	
    	public static void TryRethrowFault(Action action, Dictionary<Type, IExceptionDetailFactory> exceptionDetailFactories, Func<IExceptionDetail, FaultDetail> faultDetailfactory, Action<FaultDetail> defineFaultDetail = null)
    	{
    		try
    		{
    			action();
    		}
    		catch (Exception e)
    		{
    			RethrowFault(e, exceptionDetailFactories, faultDetailfactory, defineFaultDetail);
    		}
    	}
    
    	public static T TryRethrowFault<T>(Func<T> action, Dictionary<Type, IExceptionDetailFactory> exceptionDetailFactories, Func<IExceptionDetail, FaultDetail> faultDetailfactory, Action<FaultDetail> defineFaultDetail = null)
    	{
    		try
    		{
    			return action();
    		}
    		catch (Exception e)
    		{
    			RethrowFault(e, exceptionDetailFactories, faultDetailfactory, defineFaultDetail);
    		}
    		throw new InvalidOperationException(); // useless code for compiler
    	}
    	
    	private static void RethrowFault(Exception e, Dictionary<Type, IExceptionDetailFactory> exceptionDetailFactories, Func<IExceptionDetail, FaultDetail> faultDetailfactory, Action<FaultDetail> defineFaultDetail = null)
    	{
    		if (e is FaultException)
    			throw e;
    		throw GetFaultException(e, exceptionDetailFactories, faultDetailfactory, defineFaultDetail);
    	}
    
    	public static FaultException GetFaultException(Exception e, Dictionary<Type, IExceptionDetailFactory> exceptionDetailFactories, Func<IExceptionDetail, FaultDetail> faultDetailfactory, Action<FaultDetail> defineFaultDetail)
    	{
    		FaultException value = null;
    		GetCustomFaultException(e, ref value);
    		if (value != null)
    			return value;
    		var validationException = e as ValidationException;
    		if (validationException != null)
    			return new FaultException<ErrorCollection>(new ErrorCollection { Errors = validationException.Errors.ToArray() });
    		Type type = e.GetType();
    		IExceptionDetailFactory exceptionDetailFactory = null;
    		while (type != typeof(Exception))
    		{
    			if (exceptionDetailFactories.TryGetValue(type, out exceptionDetailFactory))
    				break;
    			type = type.BaseType;
    		}
    		FaultDetail faultDetail;
    		if (exceptionDetailFactory == null)
    			faultDetail = new FaultDetail();
    		else
    			faultDetail = faultDetailfactory(exceptionDetailFactory.Create(e));
    		faultDetail.ErrorType = e.GetType().FullName;
    		if (defineFaultDetail != null)
    			defineFaultDetail(faultDetail);
    		DefineFaultDetail(faultDetail, e);
    		Type faultDetailType = faultDetail.GetType();
    		return (FaultException)typeof(FaultException<>).MakeGenericType(faultDetailType).GetConstructor(new Type[] { faultDetailType, typeof(string) }).Invoke(new object[] { faultDetail, faultDetail.ErrorType });
    	}
    
    	static partial void GetCustomFaultException(Exception e, ref FaultException value);
    	static partial void DefineFaultDetail(FaultDetail faultDetail, Exception e);
    }
    
}
