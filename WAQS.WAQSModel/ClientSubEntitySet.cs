//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using WCFAsyncQueryableServices.EntitiesTracking;
using WCFAsyncQueryableServices.ClientContext.Interfaces.ExpressionSerialization;
using WCFAsyncQueryableServices.ClientContext.Interfaces;

namespace WCFAsyncQueryableServices.ClientContext
{
    public class ClientSubEntitySet<ClientContext, EntityType, EntityTypeBase> : ClientEntitySet<ClientContext, EntityType>, IEnumerable<EntityType>, IDisposable
        where ClientContext : class, IClientContext
        where EntityTypeBase : class, IObjectWithChangeTracker
        where EntityType : class, EntityTypeBase
    {
        private ClientEntitySet<ClientContext, EntityTypeBase> _entitySet;
                
        public ClientSubEntitySet(ClientEntitySet<ClientContext, EntityTypeBase> entitySet)
            : base(entitySet.EntitySetName, entitySet.Context, entitySet.Entities, entitySet.HashSet, e => entitySet.GetEntityKey(e))
        {
            _entitySet = entitySet;
            _entitySet.CollectionChanged += EntitySetCollectionChanged;
            _entitySet.EntityRemoving += EntitySetEntityRemoving;
        }
                
        private SerializableExpression _expression;
        protected internal override SerializableExpression Expression 
        { 
            get { return _expression ?? (_expression = new SerializableMethodCallExpression(null, new[] { base.Expression }, typeof(Queryable).GetMethod("OfType").MakeGenericMethod(typeof(EntityType)))); }
        }
                
        private void EntitySetCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            NotifyCollectionChanged(e);
        }
        
        private void EntitySetEntityRemoving(EntityTypeBase entity)
        {
            var entityAsEntityType = entity as EntityType;
            if (entityAsEntityType != null)
                OnEntityRemoving(entityAsEntityType);
        }
                
        public override void Add(EntityType entity)
        {
            _entitySet.Add(entity);
            OnEntityAdded(entity);
        }
                
        public override void Attach(EntityType entity)
        {
            _entitySet.Attach(entity);
            OnEntityAttached(entity);
        }
                
        public override void AttachWithoutCheckingIfAlreadyExist(EntityType entity)
        {
            _entitySet.Attach(entity);
            OnEntityAttached(entity);
        }
                
        public override void Remove(EntityType entity)
        {
            _entitySet.Remove(entity);
            OnEntityRemoved(entity);
        }
                
        public override void Detach(EntityType entity)
        {
            _entitySet.Detach(entity);
            OnEntityDetached(entity);
        }
                
        public override EntityType this[int index]
        {
            get
            {
                return GetEnumerable().ElementAt(index);
            }
        }
                
        public override int Count
        {
            get
            {
                return GetEnumerable().Count();
            }
        }
                
        protected override IEnumerable<EntityType> GetEnumerable()
        {
            return _entitySet.OfType<EntityType>();
        }
                
        IEnumerator<EntityType> IEnumerable<EntityType>.GetEnumerator()
        {
            return GetEnumerable().GetEnumerator();
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerable().GetEnumerator();
        }
                
        protected internal override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _entitySet.CollectionChanged -= EntitySetCollectionChanged;
                _entitySet.EntityRemoving -= EntitySetEntityRemoving;
                _entitySet = null;
            }
            base.Dispose(disposing);
        }
    }
}
