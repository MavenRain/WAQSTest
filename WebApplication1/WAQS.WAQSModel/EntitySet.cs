//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using WCFAsyncQueryableServices.DAL.Interfaces;
using WCFAsyncQueryableServices.Entities;

namespace WCFAsyncQueryableServices.DAL
{
    public partial class EntitySet<T> : IEntitySet<T>
        where T : class, IEntity
    {
        public EntitySet(ObjectSet<T> objectSet, Func<Expression, Expression> expressionTransformation = null)
        {
            ObjectSet = objectSet;
            AsyncQueryProviderFactory = new EFAsyncQueryProviderFactory();
            ExpressionTransformation = expressionTransformation;
        }
        
        public WCFAsyncQueryableServices.DAL.Interfaces.MergeOption MergeOption { get; set; }
        public IAsyncQueryProviderFactory AsyncQueryProviderFactory { get; private set; }
        public Func<Expression, Expression> ExpressionTransformation { get; private set; }
        public bool FromQuery 
        { 
            get { return false; }
            set 
            {
                throw new InvalidOperationException();
            }
        }
        
        private ObjectSet<T> _objectSet;
        public ObjectSet<T> ObjectSet
        {
            get
            {
                _objectSet.MergeOption = MergeOption.ToEFMergeOption();
                return _objectSet;
            }
            private set { _objectSet = value; }
        }
            
        public void Add(T item)
        {
            item.ChangeTracker.ChangeTrackingEnabled = true;
            item.ChangeTracker.State = ObjectState.Added;
            ObjectSet.AddObject(item);
        }
                    
        public void Attach(T item)
        {
            item.ChangeTracker.ChangeTrackingEnabled = true;
            item.ChangeTracker.State = ObjectState.Unchanged;
            ObjectSet.Attach(item);
        }
    
        public void AttachAsModified(T item)
        {
            item.ChangeTracker.ChangeTrackingEnabled = true;
            item.ChangeTracker.State = ObjectState.Modified;
            item.ChangeTracker.ModifiedProperties.AddRange(ObjectSet.EntitySet.ElementType.Properties.Except(ObjectSet.EntitySet.ElementType.KeyMembers).Select(m => m.Name));
            ObjectSet.Attach(item);
            ObjectSet.Context.ObjectStateManager.GetObjectStateEntry(item).ChangeState(EntityState.Modified);
        }
    
        public void AttachAsDeleted(T item)
        {
            item.ChangeTracker.ChangeTrackingEnabled = true;
            ObjectSet.Attach(item);
            Delete(item);
        }
                    
        public void Detach(T item)
        {
            item.ChangeTracker.ChangeTrackingEnabled = false;
            item.ChangeTracker.State = ObjectState.Detached;
            ObjectSet.Detach(item);
        }
                            
        public void Delete(T item)
        {
            item.RemoveNavigationProperties();
            item.ChangeTracker.State = ObjectState.Deleted;
            ObjectSet.DeleteObject(item);
        }
        
        public IEnumerable<T> Local
        {
            get { return ObjectSet.Context.ObjectStateManager.GetObjectStateEntries(EntityState.Added | EntityState.Modified | EntityState.Unchanged | EntityState.Deleted).Select(ose => ose.Entity).OfType<T>(); } 
        }
    
        public IQueryable<T> WithMergeOption(WCFAsyncQueryableServices.DAL.Interfaces.MergeOption mergeOption)
        {
            var value = new EntitySet<T>(ObjectSet, ExpressionTransformation);
            value.MergeOption = mergeOption;
            return value;
        }
        
        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            return ((IEnumerable<T>)ObjectSet).GetEnumerator();
        }
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable)ObjectSet).GetEnumerator();
        }
        
        Type IQueryable.ElementType
        {
            get { return ((IQueryable)ObjectSet).ElementType; }
        }
        
        Expression IQueryable.Expression
        {
            get { return ((IQueryable)ObjectSet).Expression; }
        }
        
        IQueryProvider IQueryable.Provider
        {
            get { return new WAQSQueryProvider(DataContext, ((IQueryable)ObjectSet).Provider, AsyncQueryProviderFactory, ExpressionTransformation); }
        }
    
        public IDataContext DataContext 
        {
            get { return (IDataContext)ObjectSet.Context; }
        }
    
        IEnumerable<Func<IWAQSQueryBase, QueryableInclude>> IWAQSQueryBase.QueryableIncludes
        {
            get { return new Func<IWAQSQueryBase, QueryableInclude>[0]; }
            set { throw new InvalidOperationException(); }
        }
    
        IEnumerable<string> IWAQSQueryBase.WithSpecifications
        {
            get { return new string[0]; }
            set { throw new InvalidOperationException(); }
        }
    
        public Task ForeachAsync(Action<T> action, CancellationToken cancellationToken = default(CancellationToken))
        {
            return ObjectSet.ForEachAsync(action, cancellationToken);
        }
    
        Task IWAQSQuery.ForeachAsync(Action<object> action, CancellationToken cancellationToken)
        {
            return ObjectSet.ForEachAsync<T>(action, cancellationToken);
        }
    }
}
