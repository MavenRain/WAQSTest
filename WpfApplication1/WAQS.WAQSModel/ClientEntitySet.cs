//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using WCFAsyncQueryableServices.EntitiesTracking;
using WCFAsyncQueryableServices.ClientContext.Interfaces.ExpressionSerialization;
using WCFAsyncQueryableServices.ClientContext.Interfaces;

namespace WCFAsyncQueryableServices.ClientContext
{
    public class ClientEntitySet<ClientContext, EntityType> : ClientEntitySetBase<ClientContext>, IClientEntitySet<ClientContext, EntityType>, IEnumerable<EntityType>
        where ClientContext : class, IClientContext
        where EntityType : class, IObjectWithChangeTracker
    {
        private HashSet<EntityType> _hashSet = new HashSet<EntityType>();
        private List<KeyValuePair<IObjectWithChangeTracker, EventHandler<ObjectStateChangedEventArgs>>> _entitiesStateChanged = new List<KeyValuePair<IObjectWithChangeTracker, EventHandler<ObjectStateChangedEventArgs>>>();
        
        public ClientEntitySet(string entitySetName, ClientContext context, Func<EntityType, object> getEntityKey)
            : base(entitySetName, context, new List<EntityType>(), new HashSet<IObjectWithChangeTracker>(), e => getEntityKey((EntityType)e))
        {
        }
    
        protected ClientEntitySet(string entitySetName, ClientContext context, IList entities, HashSet<IObjectWithChangeTracker> hashSet, Func<IObjectWithChangeTracker, object> getEntityKey)
            : base(entitySetName, context, entities, hashSet, getEntityKey)
        {
        }
        
        public new IEnumerable<EntityType> AllEntities
        {
            get { return base.AllEntities.OfType<EntityType>(); }
        }
        
        public virtual void Add(EntityType entity)
        {
            if (base.Add(entity))
                OnEntityAdded(entity);
        }
        
        public virtual void AddWithoutCheckingIfAlreadyExist(EntityType entity)
        {
            if (base.Add(entity, false))
                OnEntityAdded(entity);
        }
        
        public virtual void Attach(EntityType entity)
        {
            if (base.Attach(entity))
                OnEntityAttached(entity);
        }
        
        public virtual void AttachWithoutCheckingIfAlreadyExist(EntityType entity)
        {
            if (base.Attach(entity, false))
                OnEntityAttached(entity);
        }
        
        public virtual void Remove(EntityType entity)
        {
            OnEntityRemoving(entity);
            base.Remove(entity);
            OnEntityRemoved(entity);
        }
        
        public virtual void RemoveCascade(EntityType entity)
        {
            OnEntityRemoving(entity);
            base.RemoveCascade(entity);
            OnEntityRemoved(entity);
        }
        
        public virtual void Detach(EntityType entity)
        {
            base.Detach(entity);
        }
        
        protected override void EntitiesAdd(IObjectWithChangeTracker entity)
        {
            base.EntitiesAdd(entity);
            EventHandler<ObjectStateChangedEventArgs> entityChangeTrackerObjectStateChanged = null;
            entityChangeTrackerObjectStateChanged = (_, e) =>
                {
                    if (e.NewState == ObjectState.Detached)
                    {
                        entity.ChangeTracker.ObjectStateChanged -= entityChangeTrackerObjectStateChanged;
                        var entityStateChanged = _entitiesStateChanged.FirstOrDefault(esc => esc.Key == e);
                        if (entityStateChanged.Key != null)
                            _entitiesStateChanged.Remove(entityStateChanged);
                        OnEntityDetached((EntityType)entity);
                    }
                };
            entity.ChangeTracker.ObjectStateChanged += entityChangeTrackerObjectStateChanged;
            _entitiesStateChanged.Add(new KeyValuePair<IObjectWithChangeTracker, EventHandler<ObjectStateChangedEventArgs>>(entity, entityChangeTrackerObjectStateChanged));
        }
        
        public bool Contains(EntityType entity)
        {
            return EntitiesContains(entity);
        }
        
        public virtual void Replace(ref EntityType entity)
        {            
            IObjectWithChangeTracker owct = entity;
            if (base.Replace(ref owct))
            {
                if (owct == entity)
                    OnEntityAdded(entity);
                else
                    OnEntityAttached((EntityType)owct);
            }
    
            entity = (EntityType)owct;
        }
        
        protected override bool AttachDeletedEntity(ref IObjectWithChangeTracker entity, IObjectWithChangeTracker entityDeleted)
        {
            var originalEntity = entity;
            var result = base.AttachDeletedEntity(ref entity, entityDeleted);
            if (result)
                OnEntityReplaced((EntityType)entityDeleted, (EntityType)originalEntity);
            else
                OnEntityAdded((EntityType)entityDeleted);
            return result;
        }
        
        protected virtual void OnEntityAdded(EntityType entity)
        {
            if (EntityAdded != null)
                EntityAdded(entity);
        }
        public event Action<EntityType> EntityAdded;
        protected override void OnAdded(IObjectWithChangeTracker entity)
        {
            base.OnAdded(entity);
            OnEntityAdded((EntityType)entity);
        }
        
        protected virtual void OnEntityAttached(EntityType entity)
        {
            var isInitializingRelationships = entity.IsInitializingRelationships;
            entity.IsInitializingRelationships = true;
            if (EntityAttached != null)
                EntityAttached(entity);
            entity.IsInitializingRelationships = isInitializingRelationships;
        }
        public event Action<EntityType> EntityAttached;
            
        protected override void OnAttached(IObjectWithChangeTracker entity)
        {
            base.OnAttached(entity);
            OnEntityAttached((EntityType)entity);
        }
        
        protected virtual void OnEntityRemoving(EntityType entity)
        {
            if (EntityRemoving != null)
                EntityRemoving(entity);
        }
        public event Action<EntityType> EntityRemoving;
        
        protected virtual void OnEntityRemoved(EntityType entity)
        {
            if (EntityRemoved != null)
                EntityRemoved(entity);
        }
        public event Action<EntityType> EntityRemoved;
        
        protected virtual void OnEntityDetached(EntityType entity)
        {
            if (EntityDetached != null)
                EntityDetached(entity);
        }
        public event Action<EntityType> EntityDetached;
        
        protected virtual void OnEntityReplaced(EntityType entityRemoved, EntityType entity)
        {
            if (EntityReplaced != null)
                EntityReplaced(entityRemoved, entity);
        }
        public event Action<EntityType, EntityType> EntityReplaced;
        
        public virtual EntityType this[int index]
        {
            get { return (EntityType)Entities[index]; }
        }
        
        protected new virtual IEnumerable<EntityType> GetEnumerable()
        {
            return base.GetEnumerable().OfType<EntityType>();
        }
        
        public IEnumerator<EntityType> GetEnumerator()
        {
            return GetEnumerable().Cast<EntityType>().GetEnumerator();
        }
        
        protected override Type GetEntityType()
        {
            return typeof(EntityType);
        }
    
        protected internal override void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var item in _entitiesStateChanged)
                    item.Key.ChangeTracker.ObjectStateChanged -= item.Value;
                _entitiesStateChanged.Clear();
            }
            base.Dispose(disposing);
        }
    }
}
