//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Windows;
using System.ComponentModel;
using System.Windows.Controls.Primitives;
using WCFAsyncQueryableServices.ClientContext.Interfaces;

namespace WCFAsyncQueryableServices.Controls
{
    public class PaginatedActions
    {
    	public static readonly DependencyProperty GoFirstProperty =
    		DependencyProperty.RegisterAttached("GoFirst", typeof(IPaginatedQuery), typeof(PaginatedActions), new PropertyMetadata(OnGoFirstChanged));
    		
    	public static IPaginatedQuery GetGoFirst(DependencyObject obj)
    	{
    		return (IPaginatedQuery)obj.GetValue(GoFirstProperty);
    	}
    		
    	public static void SetGoFirst(DependencyObject obj, IPaginatedQuery value)
    	{
    		obj.SetValue(GoFirstProperty, value);
    	}
    	
    	private static void OnGoFirstChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)
    	{
    		Create(o, GetGoFirst(o), paginatedQuery => paginatedQuery.PageIndex = 1, paginatedQuery => paginatedQuery.PageIndex > 1);
    	}
    		
    	public static readonly DependencyProperty GoLastProperty =
    		DependencyProperty.RegisterAttached("GoLast", typeof(IPaginatedQuery), typeof(PaginatedActions), new PropertyMetadata(OnGoLastChanged));
    		
    	public static IPaginatedQuery GetGoLast(DependencyObject obj)
    	{
    		return (IPaginatedQuery)obj.GetValue(GoLastProperty);
    	}
    		
    	public static void SetGoLast(DependencyObject obj, IPaginatedQuery value)
    	{
    		obj.SetValue(GoLastProperty, value);
    	}
    	
    	private static void OnGoLastChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)
    	{
    		Create(o, GetGoLast(o), paginatedQuery => paginatedQuery.PageIndex = paginatedQuery.MaxPage, paginatedQuery => paginatedQuery.PageIndex < paginatedQuery.MaxPage);
    	}
    		
    	public static readonly DependencyProperty GoPreviousProperty =
    		DependencyProperty.RegisterAttached("GoPrevious", typeof(IPaginatedQuery), typeof(PaginatedActions), new PropertyMetadata(OnGoPreviousChanged));
    		
    	public static IPaginatedQuery GetGoPrevious(DependencyObject obj)
    	{
    		return (IPaginatedQuery)obj.GetValue(GoPreviousProperty);
    	}
    		
    	public static void SetGoPrevious(DependencyObject obj, IPaginatedQuery value)
    	{
    		obj.SetValue(GoPreviousProperty, value);
    	}
    	
    	private static void OnGoPreviousChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)
    	{
    		Create(o, GetGoPrevious(o), paginatedQuery => paginatedQuery.PageIndex--, paginatedQuery => paginatedQuery.PageIndex > 1);
    	}
    		
    	public static readonly DependencyProperty GoNextProperty =
    		DependencyProperty.RegisterAttached("GoNext", typeof(IPaginatedQuery), typeof(PaginatedActions), new PropertyMetadata(OnGoNextChanged));
    		
    	public static IPaginatedQuery GetGoNext(DependencyObject obj)
    	{
    		return (IPaginatedQuery)obj.GetValue(GoNextProperty);
    	}
    		
    	public static void SetGoNext(DependencyObject obj, IPaginatedQuery value)
    	{
    		obj.SetValue(GoNextProperty, value);
    	}
    		
    	private static void OnGoNextChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)
    	{
    		Create(o, GetGoNext(o), paginatedQuery => paginatedQuery.PageIndex++, paginatedQuery => paginatedQuery.PageIndex < paginatedQuery.MaxPage);
    	}
    			
    	private static void Create(DependencyObject button, IPaginatedQuery paginatedQuery, Action<IPaginatedQuery> action, Func<IPaginatedQuery, bool> canAction)
    	{
    		ButtonBase buttonBase = button as ButtonBase;
    		if (buttonBase == null)
    			throw new InvalidOperationException();
    		if (paginatedQuery == null)
    		{
    			buttonBase.IsEnabled = false;
    			return;
    		}
    		Action enableButton = () => buttonBase.IsEnabled = canAction(paginatedQuery);
    		enableButton();
    		RoutedEventHandler buttonClick = null;
    		buttonClick = delegate { action(paginatedQuery); };
    		buttonBase.Click += buttonClick;
    		Action paginatedQueryPageIndexChanged = delegate { enableButton(); };
    		paginatedQuery.PageIndexChanged += paginatedQueryPageIndexChanged;
    		PropertyChangedEventHandler paginatedQueryPropertyChanged = delegate { enableButton(); };
    		paginatedQuery.PropertyChanged += paginatedQueryPropertyChanged;
    		RoutedEventHandler buttonBaseUnloaded = null;
    		buttonBaseUnloaded = delegate
    		{
    			buttonBase.Click -= buttonClick;
    			paginatedQuery.PageIndexChanged -= paginatedQueryPageIndexChanged;
    			paginatedQuery.PropertyChanged -= paginatedQueryPropertyChanged;
    			buttonBase.Unloaded -= buttonBaseUnloaded;
    		};
    		buttonBase.Unloaded += buttonBaseUnloaded;
    	}
    }
}
