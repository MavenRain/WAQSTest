//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Windows;
using WCFAsyncQueryableServices.ClientContext;
using WCFAsyncQueryableServices.ClientContext.Fault;
using WCFAsyncQueryableServices.ClientContext.Interfaces;
using WCFAsyncQueryableServices.ClientContext.Interfaces.Errors;
using WCFAsyncQueryableServices.ClientContext.Interfaces.ExpressionSerialization;
using WCFAsyncQueryableServices.ClientContext.Interfaces.Querying;
using WCFAsyncQueryableServices.ClientContext.QueryResult;
using WCFAsyncQueryableServices.ComponentModel;
using WCFAsyncQueryableServices.Entities;
using WCFAsyncQueryableServices.EntitiesTracking;
using WpfApplication1.ClientContext.Fault;
using WpfApplication1.ClientContext.Interfaces;
using WpfApplication1.ClientContext.Interfaces.Errors;
using WpfApplication1.ClientContext.Interfaces.Serialization;
using WpfApplication1.ClientContext.ServiceReference;

namespace WpfApplication1.ClientContext
{
    public partial class WAQSModelClientContext : WAQSModelClientContextBase, IWAQSModelClientContext, IClientContext
    {
    	public WAQSModelClientContext(Func<IWAQSModelService> serviceFactory)
    		: base(serviceFactory)
    	{
    	}
    
        public bool Init { get; set; }
        public MergeOption MergeOption { get; set; }
    
        private HashSet<object> _entityRemovings;
        protected HashSet<object> EntityRemovings
        {
            get { return _entityRemovings ?? (_entityRemovings = new HashSet<object>()); }
        }
    
        private Dictionary<Entity1Keys, WpfApplication1.Entity1> _entity1Dico;
        private Dictionary<Entity1Keys, WpfApplication1.Entity1> Entity1Dico
        {
            get { return _entity1Dico ?? (_entity1Dico = new Dictionary<Entity1Keys, WpfApplication1.Entity1>()); }
        }
    
        private Dictionary<Guid, WpfApplication1.Entity1> _entity1DataTransferDico;
        private Dictionary<Guid, WpfApplication1.Entity1> Entity1DataTransferDico
        {
            get { return _entity1DataTransferDico ?? (_entity1DataTransferDico = new Dictionary<Guid, WpfApplication1.Entity1>()); }
        }
    
        private Dictionary<string, WpfApplication1.Entity1> _entity1AddedDico;
        private Dictionary<string, WpfApplication1.Entity1> Entity1AddedDico
        {
            get { return _entity1AddedDico ?? (_entity1AddedDico = new Dictionary<string, WpfApplication1.Entity1>()); }
        }
        private void AddEntity1AddedDico(WpfApplication1.Entity1 entity)
        {
            Entity1AddedDico.Add(entity.EntityKey, entity);
            entity.EntityKeyChanged += ResetEntityKey;
        }
        private void RemoveEntity1AddedDico(WpfApplication1.Entity1 entity)
        {
            Entity1AddedDico.Remove(entity.EntityKey);
            entity.EntityKeyChanged -= ResetEntityKey;
        }
    
        private void ResetEntityKey(WpfApplication1.Entity1 entity, string oldEntityKey)
        {
            if (entity.HasTemporaryKey)
            {
                if (entity.EntityKey != oldEntityKey)
                {
                    if (oldEntityKey != null)
                        Entity1AddedDico.Remove(oldEntityKey);
                    Entity1AddedDico.Add(entity.EntityKey, entity);
                }
            }
            else
            {
                Entity1AddedDico.Remove(oldEntityKey);
                entity.EntityKeyChanged -= ResetEntityKey;
                Entity1Dico.Add(new Entity1Keys { Id = entity.Id }, entity);
            }
        }
        public IClientEntitySet<IWAQSModelClientContext, WpfApplication1.Entity1> Entity1 
        { 
            get { return Entity1Internal; }
        }
        private ClientEntitySet<IWAQSModelClientContext, WpfApplication1.Entity1> Entity1Internal
        {
            get
            {
                if (_entity1 == null)
                {
                    _entity1 = new ClientEntitySet<IWAQSModelClientContext, WpfApplication1.Entity1>("Entity1", this, e => new Entity1Keys { Id = e.Id });
                    _entity1.EntityAdded += EntityAddedOrAttached;
                    _entity1.EntityAttached += EntityAddedOrAttached;
                    _entity1.EntityReplaced += EntityReplaced;
                    _entity1.EntityDetached += EntityDetached;
                }
                return _entity1;
            }
        }
        private ClientEntitySet<IWAQSModelClientContext, WpfApplication1.Entity1> _entity1;
    
        private void EntityAddedOrAttached(WpfApplication1.Entity1 entity)
        {
    
            ClientEntitySetExtensions.AddEntityInDico(Entity1, entity);
            Entity1 entityTmp;
            if (Entity1DataTransferDico.TryGetValue(entity.DataTransferEntityKey, out entityTmp))
            {
                if (entityTmp == entity)
                    new InvalidOperationException();
            }
            else
                Entity1DataTransferDico.Add(entity.DataTransferEntityKey, entity);		
            if (entity.HasTemporaryKey)
            {
                WpfApplication1.Entity1 entityInAddedDico;
                if (! Entity1AddedDico.TryGetValue(entity.EntityKey, out entityInAddedDico))
                    AddEntity1AddedDico(entity);
                else if (entityInAddedDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            else
            {
                var entity1Keys = new Entity1Keys { Id = entity.Id };
                WpfApplication1.Entity1 entityInDico;
                if (! Entity1Dico.TryGetValue(entity1Keys, out entityInDico))
                    Entity1Dico.Add(entity1Keys, entity);
                else if (entityInDico != entity)
                    throw new InvalidOperationException();
                entity.IsInitializingRelationships = true;
        		AddPropertyDescriptorToEntity(entity);
                EntityAttachWithoutChangingStateSubEntities(entity);
            }
            entity.IsInitializingRelationships = false;
        }
    
        private void EntityReplaced(WpfApplication1.Entity1 entityInEntitySet, WpfApplication1.Entity1 entity)
        {
            EntityReplacedInternal(entityInEntitySet, entity);
        }
        private void EntityReplacedInternal(WpfApplication1.Entity1 entityInEntitySet, WpfApplication1.Entity1 entity)
        {
            if (entityInEntitySet.Size != entity.Size)
                entityInEntitySet.Size = entity.Size;
            if (entityInEntitySet.Name != entity.Name)
                entityInEntitySet.Name = entity.Name;
            entityInEntitySet.Specifications = entity.Specifications;
        }
    
    
        private void EntityDetached(WpfApplication1.Entity1 entity)
        {
    
            Entity1DataTransferDico.Remove(entity.DataTransferEntityKey);		
            if (entity.IsTemporaryKey)
                RemoveEntity1AddedDico(entity);
            else
            {
                var entityKey = new Entity1Keys { Id = entity.Id };
                Entity1Dico.Remove(entityKey);
            }
        
            ClientEntitySetExtensions.RemoveEntityInDico(entity);
    		RemovePropertyDescriptorToEntity(entity);
        }
    
        
        private void EntityAttachWithoutChangingStateSubEntities(WpfApplication1.Entity1 entity)
        {
            var entityInCache = GetEntityInCache(entity);
            bool entityInCacheIsInitializingRelationships = false;
            if (entityInCache != null)
            {
                entityInCacheIsInitializingRelationships = entityInCache.IsInitializingRelationships;
                entityInCache.IsInitializingRelationships = true;
            }
            EntityAttachWithoutChangingStateSubEntitiesBody(entity, entityInCache);
            if (entityInCache != null)
                entityInCache.IsInitializingRelationships = entityInCacheIsInitializingRelationships;
        }
        
        private void EntityAttachWithoutChangingStateSubEntitiesBody(WpfApplication1.Entity1 entity, WpfApplication1.Entity1 entityInCache)
        {
            if (entity == entityInCache)
                return;
        }
    
        private WpfApplication1.Entity1 GetEntityInCache(WpfApplication1.Entity1 entity, bool includingDeleted = false, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            WpfApplication1.Entity1 value;
            if (! (applyDataTransfer && Entity1DataTransferDico.TryGetValue(entity.DataTransferEntityKey, out value)) && (! Entity1Dico.TryGetValue(new Entity1Keys { Id = entity.Id }, out value) || value.ChangeTracker.State == ObjectState.Detached || ! includingDeleted && value.ChangeTracker.State == ObjectState.Deleted) && ! (entity.HasTemporaryKey && Entity1AddedDico.TryGetValue(entity.EntityKey, out value)))
                return null;
            return value;
        }
    
        protected override WpfApplication1.Entity1 GetEntity(WpfApplication1.Entity1 entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
        {
            return GetEntity(entity, applyState, mergeOption, true, applyDataTransfer: applyDataTransfer);
        }
        private WpfApplication1.Entity1 GetEntity(WpfApplication1.Entity1 entity, bool applyState, MergeOption? mergeOption = null, bool includingDeleted = false, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return (WpfApplication1.Entity1)entityGot;
    
            if (mergeOption == null)
                mergeOption = MergeOption;
    
            if (mergeOption == MergeOption.NoTracking)
                return entity;
    
            if (Entity1Internal.Contains(entity))
                return entity;
    
            entity.IsDeserializing = true;
    
            includingDeleted |= applyState;
    
    
            WpfApplication1.Entity1 value;
            var entityInCache = GetEntityInCache(entity, includingDeleted, applyDataTransfer);
            ObjectChangeTracker originalChangeTracker = entity.ChangeTracker;
            if (entityInCache == null)
            {
                var originalState = entity.ChangeTracker.State;
                entity.ChangeTracker = null;
                if (entity.ChangeTracker.State == ObjectState.Detached)
                    entity.ResetEntityKey();
                entity.IsDeserializing = false;
                var state = originalState == ObjectState.Detached ? defaultState : originalState;
                switch(state)
                {
                    case ObjectState.Added:
                        Entity1Internal.AddWithoutCheckingIfAlreadyExist(entity);
                        break;
                    default:
                        entity.IsInitializingRelationships = true;
                        Entity1Internal.AttachWithoutCheckingIfAlreadyExist(entity);
                        entity.IsInitializingRelationships = false;
                        break;
                }
                if (applyState)
                    entity.ChangeTracker.State = state;
                value = entity;
            }
            else
            {
                switch (mergeOption)
                {
                    case MergeOption.AppendOnly:
                        RefreshNewLoadedProperties(entityInCache, entity);
                        value = entityInCache;
                        break;
                    case MergeOption.OverwriteChanges:
                        RefreshCurrentValues(entityInCache, entity, applyState: applyState);
                        value = entityInCache;
                        break;
                    case MergeOption.PreserveChanges:
                        RefreshOriginalValues(entityInCache, entity);
                        value = entityInCache;
                        break;
                    default: 
                        throw new NotImplementedException();
                }
                if (applyState)
                {
                    switch(entity.ChangeTracker.State)
                    {
                        case ObjectState.Detached:
                            Entity1.Detach(value);
                            break;
                        case ObjectState.Deleted:
                            Entity1.Remove(value);
                            break;
                        default:
                            value.ChangeTracker.State = entity.ChangeTracker.State;
                            break;
                    }
                }
            }
            EntitiesGot.Add(entity, value);
            if (! entity.IsInitializingRelationships)
            {
                entity.IsInitializingRelationships = true;
                value.IsInitializingRelationships = true;
    
    
                if (applyState && originalChangeTracker != null && originalChangeTracker != value.ChangeTracker)
                {
                    foreach (var modifiedProperty in originalChangeTracker.ModifiedProperties)
                        if (! value.ChangeTracker.ModifiedProperties.Contains(modifiedProperty))
                            value.ChangeTracker.ModifiedProperties.Add(modifiedProperty);
                    foreach (var originalValue in originalChangeTracker.OriginalValues)
                    {
                        var originalValueEntity = originalValue.Value as IEntity;
                        if (originalValueEntity != null) 
                        {
                            var originalState = originalValueEntity.ChangeTracker.State;
                            IEntity originalEntity = null;
                            var ov = originalValueEntity == null ? originalValue.Value : originalEntity = GetEntity(originalValueEntity, true, defaultState, applyDataTransfer) as IEntity;
                            if (value.ChangeTracker.State != ObjectState.Detached)
                                value.ChangeTracker.RecordOriginalValue(originalValue.Key, ov);
                            if (originalValueEntity != null && originalState == ObjectState.Detached)
                                Detach(originalEntity);
                        }
                    }
                    foreach (var objectsRemovedToCollectionProperties in originalChangeTracker.ObjectsRemovedFromCollectionProperties)
                        foreach (IEntity objectsRemovedToCollectionProperty in objectsRemovedToCollectionProperties.Value)
                            if (objectsRemovedToCollectionProperty != null)
                            {
                                var originalState = objectsRemovedToCollectionProperty.ChangeTracker.State;
                                IObjectWithChangeTracker removedEntity = (IObjectWithChangeTracker)GetEntity(objectsRemovedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordRemovalFromCollectionProperties(objectsRemovedToCollectionProperties.Key, removedEntity);
                                if (originalState == ObjectState.Detached)
                                    Detach(removedEntity);
                            }
                    foreach (var objectsAddedToCollectionProperties in originalChangeTracker.ObjectsAddedToCollectionProperties)
                        foreach (var objectsAddedToCollectionProperty in objectsAddedToCollectionProperties.Value)
                            if (objectsAddedToCollectionProperty != null)
                            {
                                var addedEntity = (IObjectWithChangeTracker)GetEntity(objectsAddedToCollectionProperty, true, defaultState, applyDataTransfer);
                                if (value.ChangeTracker.State != ObjectState.Detached)
                                    value.ChangeTracker.RecordAdditionToCollectionProperties(objectsAddedToCollectionProperties.Key, addedEntity);
                            }
                }
    
                value.IsInitializingRelationships = false;
            }
            value.ChangeTracker.ChangeTrackingEnabled = true;
            return value;
        } 
    
        private WpfApplication1.Entity1 AttachWithoutChangingState(WpfApplication1.Entity1 entity, ObjectState? defaultState = null)
        {
            if (Entity1Internal.Contains(entity))
                return entity;
            var entityIncludingCache = Init ? GetEntityInCache(entity) ?? entity : entity;
            if (Entity1Internal.AttachWithoutChangingState(entityIncludingCache, defaultState))
                EntityAttachWithoutChangingStateSubEntities(entity);
            return entityIncludingCache;
        }
    
        public void RefreshNewLoadedProperties(WpfApplication1.Entity1 entityInCache, WpfApplication1.Entity1 entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entity.Specifications != null)
            {
                if (entityInCache.Specifications == null)
                    entityInCache.Specifications = entity.Specifications;
                else
                {
                    if (! entityInCache.Specifications.HasNameLength && entity.Specifications.HasNameLength)
                    {
                        entityInCache.Specifications.NameLength = entity.Specifications.NameLength;
                        entityInCache.Specifications.HasNameLength = entity.Specifications.HasNameLength;
                    }
                }
            }
            entityInCache.IsDeserializing = isDeserializing;
        }
    
        public void RefreshCurrentValues(WpfApplication1.Entity1 entityInCache, WpfApplication1.Entity1 entity)
        {
            RefreshCurrentValues(entityInCache, entity, false);
        }
        public void RefreshCurrentValues(WpfApplication1.Entity1 entityInCache, WpfApplication1.Entity1 entity, bool applyState = false)
        {
            bool isDeserializing = entityInCache.IsDeserializing;
            entityInCache.IsDeserializing = true;
            if (entityInCache.Id != entity.Id)
                entityInCache.Id = entity.Id;
            if (entityInCache.Size != entity.Size)
                entityInCache.Size = entity.Size;
            if (entityInCache.Name != entity.Name)
                entityInCache.Name = entity.Name;
            if (entity.Specifications != null)
            {
                if (entityInCache.Specifications == null)
                    entityInCache.Specifications = entity.Specifications;
                else
                {
                    if (entity.Specifications.HasNameLength)
                    {
                        entityInCache.Specifications.NameLength = entity.Specifications.NameLength;
                        entityInCache.Specifications.HasNameLength = entity.Specifications.HasNameLength;
                    }
                }
            }
            entityInCache.IsDeserializing = isDeserializing;
            if (applyState)
            {
                entityInCache.ChangeTracker.State = entity.ChangeTracker.State;
                entityInCache.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties;
            }
            else
            {
                entityInCache.ChangeTracker.AcceptChanges();
                entityInCache.ChangeTracker.ModifiedProperties.Clear();
            }
        }
    
        private void RefreshOriginalValues(WpfApplication1.Entity1 entityInCache, WpfApplication1.Entity1 entity)
        {
            if (! (entityInCache.Size == entity.Size || entityInCache.ChangeTracker.ModifiedProperties.Contains("Size")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Size");
            if (! (entityInCache.Name == entity.Name || entityInCache.ChangeTracker.ModifiedProperties.Contains("Name")))
                entityInCache.ChangeTracker.ModifiedProperties.Add("Name");
        }
    
        private WpfApplication1.Entity1 ReduceToKey(WpfApplication1.Entity1 entity)
        {
            WpfApplication1.Entity1 value = new WpfApplication1.Entity1 { Id = entity.Id };
            return value;
        }
    
        private WpfApplication1.Entity1 ReduceToModifications(WpfApplication1.Entity1 entity)
        {
            WpfApplication1.Entity1 value = new WpfApplication1.Entity1 { Id = entity.Id };
            value.ChangeTracker.Saving = true;
            value.ChangeTracker.ChangeTrackingEnabled = true;
            value.ChangeTracker.State = entity.ChangeTracker.State;
            switch (entity.ChangeTracker.State)
            {
                case ObjectState.Added:
                    value.Size = entity.Size;
                    value.Name = entity.Name;
    				break;
                case ObjectState.Deleted:
                    value.ChangeTracker.ChangeTrackingEnabled = false;
                    value.Size = default(string); 
                    value.Name = default(string); 
    				break;
                case ObjectState.Modified:
                    value.ChangeTracker.ModifiedProperties = entity.ChangeTracker.ModifiedProperties.ToList();
                    foreach (var modifiedPropery in entity.ChangeTracker.ModifiedProperties.Union(entity.ChangeTracker.ValidationProperties))
                        switch (modifiedPropery)
                        {
                            case "Size":
                                value.Size = entity.Size;
                                break;
                            case "Name":
                                value.Name = entity.Name;
                                break;
                        }
                    break;
                case ObjectState.Unchanged:
                case ObjectState.CascadeDeleted:
                    break;
                default: //case ObjectState.Detached:
                    throw new InvalidOperationException();
            }
            return value;
        }
    
        private void ReduceNavigationProperties(WpfApplication1.Entity1 originalValue, WpfApplication1.Entity1 newValue)
        {
            newValue.ChangeTracker.ObjectsAddedToCollectionProperties.Clear();
            newValue.ChangeTracker.ObjectsRemovedFromCollectionProperties.Clear();
            newValue.ChangeTracker.OriginalValues.Clear();
            if (originalValue.ChangeTracker.State != ObjectState.Unchanged)
            {
    			
            }
        }
    
        private void RefreshComputedValues(WpfApplication1.Entity1 entity, WpfApplication1.Entity1 dbEntity)
        {
            if (entity.HasTemporaryKey)
            {
                Entity1Dico.Add(new Entity1Keys { Id = dbEntity.Id }, entity);
                RemoveEntity1AddedDico(entity);
            }						
            if (dbEntity.HasTemporaryKey)
            {
                entity.Id = dbEntity.Id;
            }
            entity.ResetEntityKey();
        }
    
        private void DisposeEntity1()
        {
            if (_entity1 != null)
            {
                foreach (var entity in _entity1.AllEntities.ToList())
                {
                    EntityDetached(entity);
                }
                _entity1.EntityAdded -= EntityAddedOrAttached;
                _entity1.EntityAttached -= EntityAddedOrAttached;
                _entity1.EntityReplaced -= EntityReplaced;
                _entity1.EntityDetached -= EntityDetached;
            }
        }
    
        public WAQSModelSerializableContext GetModifiedEntities()
        {
            return new WAQSModelSerializableContext 
            { 
    			Entity1 = 
                    new List<WpfApplication1.Entity1>(from e in Entity1Internal.AllEntities
                     where e.ChangeTracker.State != ObjectState.CascadeDeleted && (e.ChangeTracker.State != ObjectState.Unchanged || e.ChangeTracker.ObjectsAddedToCollectionProperties.Any() || e.ChangeTracker.ObjectsRemovedFromCollectionProperties.Any())
                     select e) 
            };
        }
    
        public void AcceptAllChanges()
        {
            foreach (var entity in Entity1)
                entity.ChangeTracker.AcceptChanges();
        }
    
        public IClientEntitySet<IWAQSModelClientContext, T> GetClientEntitySet<T>()
            where T : IObjectWithChangeTracker
        {
            if (typeof(T) == typeof(WpfApplication1.Entity1))
                return (IClientEntitySet<IWAQSModelClientContext, T>)Entity1Internal;
            throw new NotImplementedException();
        }
    
        
        public DateTime DbDateTime
        {
            get { throw new InvalidOperationException(); }
        }
        public async Task<DateTime> GetDbDateTimeAsync()
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginGetDbDateTime(null, null), r => service.EndGetDbDateTime(r)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return default(DateTime);
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return default(DateTime);
                throw e;
            }
        }
    
        public override async Task<IEnumerable<T>> ExecuteQueryAsync<T>(IAsyncQueryable<T> query, MergeOption? mergeOption = null, Func<bool> cancel = null)
        { 
            if (mergeOption == null)
                mergeOption = MergeOption;
            if (mergeOption == MergeOption.NoTracking)
                return await new WAQSModelClientContextNoTracking(ServiceFactory).ExecuteQueryAsync(query);
            else
                return await base.ExecuteQueryAsync(query, mergeOption);
        }
        
        public override async Task<T> ExecuteQueryAsync<T>(IAsyncQueryableValue<T> query, MergeOption? mergeOption = null, Func<bool> cancel = null)
        {
            if (mergeOption == null)
                mergeOption = MergeOption;
            if (mergeOption == MergeOption.NoTracking)
                return await new WAQSModelClientContextNoTracking(ServiceFactory).ExecuteQueryAsync(query);
            else
                return await base.ExecuteQueryAsync(query, mergeOption);
        }
    
        public override async Task<QueryPage<T>> LoadPageAsync<T>(int pageSize, IAsyncQueryable<T> query, LoadPageParameter[] identifiers, MergeOption? mergeOption = null, Func<bool> cancel = null)
        {
            if (mergeOption == null)
                mergeOption = MergeOption;
            if (mergeOption == MergeOption.NoTracking)
                return await new WAQSModelClientContextNoTracking(ServiceFactory).LoadPageAsync<T>(pageSize, query, identifiers, mergeOption);
            return await base.LoadPageAsync<T>(pageSize, query, identifiers, mergeOption);
        }
    
        public override async Task<object[]> ExecuteQueriesAsync(IEnumerable<IAsyncQueryableBase> queries, MergeOption? mergeOption = null, Func<bool> cancel = null)
        {
            if (mergeOption == null)
                mergeOption = MergeOption;
            if (mergeOption == MergeOption.NoTracking)
                return await new WAQSModelClientContextNoTracking(ServiceFactory).ExecuteQueriesAsync(queries, mergeOption, cancel);
            return await base.ExecuteQueriesAsync(queries, mergeOption, cancel);
        }
    
        protected override object InstanciateAndAttach(Func<object> getValue, MergeOption? mergeOption)
        {
            var oldMergeOption = MergeOption;
            if (mergeOption.HasValue)
                MergeOption = mergeOption.Value;
            var value = base.InstanciateAndAttach(getValue, mergeOption);
            MergeOption = oldMergeOption;
            return value;
        }
    
        public IEnumerable<Error> ValidateOnClient()
        {
            foreach (var error in Entity1.SelectMany(e => e.ValidateOnClient()))
                yield return error;
        }
    
        public void SavingChanges(bool validate)
        {
            SavingChanges();
            if (validate)
            {
                var errors = ValidateOnClient().Where(er => (er.Criticity & Criticity.Error) != 0).ToList();
                if (errors.Count != 0)
                    ErrorException.Throw(errors);
            }
        }
    
        ISerializableContext IClientContext.GetModifiedEntities()
        {
            return GetModifiedEntities();
        }
        
        ISerializableContext IClientContext.GetSerializableContext(ISerializableContext modifiedEntities)
        {
            return GetSerializableContext((WAQSModelSerializableContext)modifiedEntities);
        }
    
        public WAQSModelSerializableContext GetSerializableContext(WAQSModelSerializableContext modifiedEntities)
        {
            WAQSModelSerializableContext sentContext;
            sentContext = new WAQSModelSerializableContext();
    		var reducedEntity1Dictionary = new Dictionary<WpfApplication1.Entity1, WpfApplication1.Entity1>();
            sentContext.Entity1 = modifiedEntities.Entity1.Select(e => 
                {
                    var value = ReduceToModifications(e);
                    reducedEntity1Dictionary.Add(e, value);
                    value.ChangeTracker.ChangeTrackingEnabled = true;
                    return value;
                }).ToList();
     
    		int nbEntity1 = sentContext.Entity1.Count;
            for (int index = 0 ; index < nbEntity1 ; index ++)
                ReduceNavigationProperties(modifiedEntities.Entity1[index], sentContext.Entity1[index]);
    
            CompleteSavingSentContext(sentContext);
            return sentContext;
        }
    
        void IClientContext.SavedChanges()
        {
            SavedChanges();
        }
    
        Task<ISerializableContext> IClientContext.TrySavingAsync(Func<Task<ISerializableContext>> saveChangesAsync)
        {
            return GetSerializableContextTask(TrySavingAsync(() => GetSavingChangesTask(saveChangesAsync)));
        }
        private async Task<WAQSModelSerializableContext> GetSavingChangesTask(Func<Task<ISerializableContext>> saveChangesAsync)
        {
            return (WAQSModelSerializableContext)await saveChangesAsync();
        }
        private async Task<ISerializableContext> GetSerializableContextTask(Task<WAQSModelSerializableContext> task)
        {
            return await task;
        }
    
        public async Task<WAQSModelSerializableContext> TrySavingAsync(Func<Task<WAQSModelSerializableContext>> saveChangesAsync)
        {
            try
            {
                return await saveChangesAsync();
            }
            catch (FaultException<ErrorCollection> e)
            {
                if (IsDisposed)
                    return null;
                ErrorException.Throw(e.Detail.Errors, ErrorSource.FromServer); 
            }
            catch (FaultException<WAQSModelFaultDetailEntities> e)
            {
                if (IsDisposed)
                    return null;
                EntitiesGot.Clear();
                SavingException.Throw(e.Detail.Entities.Select(entity => GetEntity(entity, false)), e.Detail.ErrorType, e.Detail.ErrorMessage);
            }
            catch (FaultException<FaultDetail> e)
            {
                if (IsDisposed)
                    return null;
                ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage);
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (! catched)
                    throw e;
            }
            return null;
        }
    
        public async Task SaveChangesAsync(bool validate = false)
        {
            SavingChanges(validate);
            if (HasChanges)
            {
                var clientContext = GetModifiedEntities();
                var sentContext = GetSerializableContext(clientContext);
                var saveResult = await TrySavingAsync(() => ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginSaveChanges(sentContext, null, null), ar => service.EndSaveChanges(ar)), 0));
                Refresh(clientContext, saveResult);
            }
            SavedChanges();
        }
    
        partial void SavingChanges();
        partial void CompleteSavingSentContext(WAQSModelSerializableContext sentContext);
        partial void SavedChanges();
    
        void IClientContext.Refresh(ISerializableContext clientContext, ISerializableContext dbContext)
        {
            Refresh((WAQSModelSerializableContext)clientContext, (WAQSModelSerializableContext)dbContext);
        }
        public void Refresh(WAQSModelSerializableContext clientContext, WAQSModelSerializableContext dbContext)
        {
            int entity1Count = clientContext.Entity1.Count;
            for (int i = 0 ; i < entity1Count ; i ++)
            {
                var clientEntity = clientContext.Entity1[i];
                if ((clientEntity.ChangeTracker.State & ObjectState.Deleted) == ObjectState.Deleted)
                {
                    Entity1.Detach(clientEntity);
                    continue;
                }
                var dbEntity = dbContext.Entity1[i];
                RefreshComputedValues(clientEntity, dbEntity);
                clientEntity.ChangeTracker.AcceptChanges();
            }
    	
        }
    
        private object GetEntity(object entity, bool applyState, ObjectState defaultState = ObjectState.Unchanged, bool applyDataTransfer = false)
        {
            if (entity == null)
                return null;
            object entityGot;
            if (EntitiesGot.TryGetValue(entity, out entityGot))
                return entityGot;
            var entityAsEntity1 = entity as WpfApplication1.Entity1;
            if (entityAsEntity1 != null)
                return GetEntity(entityAsEntity1, applyState, defaultState: defaultState, applyDataTransfer: applyDataTransfer);
            return entity;
        }
    
        private object GetEntityInCache(object entity, bool applyDataTransfer = false)
        {
            var entityAsEntity1 = entity as WpfApplication1.Entity1;
            if (entityAsEntity1 != null)
                return GetEntityInCache(entityAsEntity1, applyDataTransfer);
            return null;
        }
    
        private void Detach(object entity)
        {
            var entityAsEntity1 = entity as WpfApplication1.Entity1;
            if (entityAsEntity1 != null)
                Entity1.Detach(entityAsEntity1);
            throw new InvalidOperationException();
        }
    
        IAsyncQueryable<T> IClientContext.GetClientEntitySetAsyncQueryable<T>(ParameterMode? parameterMode)
        {
            var entitySet = GetClientEntitySet<T>();
            if (parameterMode == null)
                return entitySet.AsAsyncQueryable();
            return entitySet.AsAsyncQueryable(parameterMode.Value);
        }
    
        public void AcceptChanges()
        {
            foreach (var entity in Entity1)
                entity.ChangeTracker.AcceptChanges();
    
        }
    
        public bool HasChanges
        {
            get 
            {
                if (Entity1Internal.AllEntities.Any(e => e.HasChanges))
                    return true;
                return false;
            }
        }
    
        public async Task<Error[]> ValidateOnServerAsync(Entity1 entity)
        {
            try
            {
                return await ProxyHelper.ExecuteFuncAsync(ServiceFactory, service => Task.Factory.FromAsync(service.BeginValidateEntity1(entity, null, null), ar => service.EndValidateEntity1(ar)), 0);
            }
            catch (FaultException<FaultDetail> e)
            {
                throw ServerException.Throw(e.Detail.ErrorType, e.Detail.ErrorMessage); // throw for compiler
            }
            catch(Exception e)
            {
                if (IsDisposed)
                    return null;
                bool catched = false;
                CatchException(e, ref catched);
                if (catched)
                    return null;
                throw e;
            }
        }
    
    
        protected override void Dispose(bool disposing)
        {
            if (IsDisposed)
                return ;
            IsDisposed = true;
            if (disposing)
            {
                ClientEntitySetExtensions.ClearDico(this);
                DisposeEntity1();
                if (_entity1 != null) 
                    _entity1.Dispose();
            }
        }
    
        private class WAQSModelClientContextNoTracking : WAQSModelClientContextBase
        {
            public WAQSModelClientContextNoTracking(Func<IWAQSModelService> serviceFactory)
                : base(serviceFactory)
            {
            }
     
            private Dictionary<Entity1Keys, WpfApplication1.Entity1> Entity1
            {
                get { return _entity1 ?? (_entity1 = new Dictionary<Entity1Keys, WpfApplication1.Entity1>()); }
            }
            private Dictionary<Entity1Keys, WpfApplication1.Entity1> _entity1;
    
            protected override WpfApplication1.Entity1 GetEntity(WpfApplication1.Entity1 entity, bool applyState, MergeOption? mergeOption = null, bool applyDataTransfer = false)
            {
                if (entity == null)
                    return null;
    
                var key = new Entity1Keys { Id = entity.Id };
                WpfApplication1.Entity1 entityInCache;
                if (Entity1.TryGetValue(key, out entityInCache))
                    return entityInCache;
    
                Entity1.Add(key, entity);
                entity.ChangeTracker.State = ObjectState.Detached; 
                entity.ChangeTracker.ChangeTrackingEnabled = false;
                return entity;
            } 
            protected override void Dispose(bool disposing)
            {
                IsDisposed = true;
            }
        }
    }
}
