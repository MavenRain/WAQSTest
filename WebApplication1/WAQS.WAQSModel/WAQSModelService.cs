//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using System.Transactions;
using WCFAsyncQueryableServices.Common;
using WCFAsyncQueryableServices.DAL.Interfaces;
using WCFAsyncQueryableServices.Entities;
using WCFAsyncQueryableServices.SerializableExpressions;
using WCFAsyncQueryableServices.Service;
using WCFAsyncQueryableServices.Service.Interfaces;
using WebApplication1;
using WebApplication1.DAL.Interfaces;
using WebApplication1.Service.Interfaces;

namespace WebApplication1.Service
{
    public abstract partial class WAQSModelService : ServiceBase, IWAQSModelService, IDisposable
    {
        private Func<WAQSModelService> _serviceFactory;
        private Func<IWAQSModelContainer> _contextFactory;
    
        static WAQSModelService()
        {
            WAQSQuery.WithTypes.Add(typeof(Entity1), new WithType
                {
                    Type = typeof(WithEntity1),
                    TransformToOriginalType = e =>
                    {
                        var withEntity1 = e as WithEntity1;
                        if (withEntity1 == null)
                            return e;
                        var value = withEntity1.Entity1;
                        value.Specifications = withEntity1.Specifications;
                        return value;
                    }
                });
        }
    
        public static void Init()
        {
            InitPartial();
        }
    
        static partial void InitPartial();
    
        public WAQSModelService(Func<IWAQSModelContainer> contextFactory, Func<IWAQSModelContainer, ISerializableExpressionProvider> serializableExpressionProviderFactory, Func<WAQSModelService> serviceFactory)
            : this(contextFactory(), serviceFactory)
        {
            _serializableExpressionProviderFactory = serializableExpressionProviderFactory;
        }
    
        public WAQSModelService(Func<IWAQSModelContainer> contextFactory, Func<WAQSModelService> serviceFactory)
            : this(contextFactory())
        {
            _contextFactory = contextFactory;
            _serviceFactory = serviceFactory;
        }
    
        public WAQSModelService(IWAQSModelContainer context, Func<WAQSModelService> serviceFactory)
            : this(() => context, serviceFactory)
        {
        }
    
        public WAQSModelService(IWAQSModelContainer context)
        {
            _context = context;
            TrackableCollectionExtensions.AttachAction = (e1, e2, name) => _context.AttachRelationship(e1, e2, name);
        }
    
        private readonly IWAQSModelContainer _context;
        protected IWAQSModelContainer Context
        {
            get { return _context; }
        }
    
    
        private readonly Func<IWAQSModelContainer, ISerializableExpressionProvider> _serializableExpressionProviderFactory;
        protected Func<IWAQSModelContainer, ISerializableExpressionProvider> SerializableExpressionProvider
        {
            get { return _serializableExpressionProviderFactory; }
        }
    
        protected override Func<ISerializableExpressionProvider> SerializableExpressionProviderFactory
        {
            get { return () => _serializableExpressionProviderFactory(_context); }
        }
    
        internal static object GetWithBaseObject(object obj)
        {
            var type = obj.GetType().BaseType;
            if (type == null)
                return obj;
            WithType withType;
            if (WAQSQuery.WithTypes.TryGetValue(type, out withType))
                return withType.TransformToOriginalType(obj);
            return obj;
        }
    
        public IEntitySet<WebApplication1.Entity1> Entity1 
        { 
            get 
            {
                _context.UseWAQSProvider = true; 
                return _context.Entity1; 
            } 
        }
    
        public void ApplyChanges(WebApplication1.Entity1 entity)
        {
            ApplyingChanges(ref entity);
            _context.ApplyChanges(_context.Entity1, entity);
        }
    
        partial void ApplyingChanges(ref WebApplication1.Entity1 entity);
    
    
        public WAQSModelQueryResult Execute(QuerySerialization query)
        {
            var expression = _serializableExpressionProviderFactory(_context).ToExpression(query.Expression, query.WithSpecificationsProperties);
            object result;
            try
            {
                result = Expression.Lambda(expression).Compile().DynamicInvoke();
            }
            catch (Exception e)
            {
                if (e.InnerException != null)
                    throw e.InnerException;
                else
                    throw e;
            }
            WAQSModelQueryResult queryResult = new WAQSModelQueryResult();
            bool onlyOne = false;
            var methodCallExpression = expression as MethodCallExpression;
            if (methodCallExpression != null)
                switch (methodCallExpression.Method.Name)
                {
                    case "First":
                    case "FirstOrDefault":
                    case "Single":
                    case "SingleOrDefault":
                    case "Last":
                    case "LastOrDefault":
                        onlyOne = true;
                        break;
                }
            bool manyResult = HasManyResult(expression.Type) && ! onlyOne;
            Type queryType = manyResult ? GetGenericType(expression.Type) : expression.Type;
            Type queryTypeLoop = queryType;
            int genericIndex = 0;
            while (queryTypeLoop.IsGenericType && queryTypeLoop.GetGenericTypeDefinition() == typeof(IEnumerable<>))
            {
                genericIndex++;
                queryTypeLoop = queryTypeLoop.GetGenericArguments()[0];
            }
            if (manyResult)
            {
                if (query.SerializableType.IsKnownByServer && genericIndex == 0)
                    queryResult.Values = (object[])typeof(WAQSModelService).GetMethod("GetBaseTypeToArray", BindingFlags.Static | BindingFlags.NonPublic).MakeGenericMethod(WAQSModelSerializableExpressionConverter.GetWAQSModelBaseType(queryType) ?? queryType).Invoke(null, new object[] { result });
                else
                    queryResult.Records = ((IEnumerable)result).Cast<object>().Select(o => GetQueryResult(queryType, o)).ToList();
            }
            else
            {
                if (query.SerializableType.IsKnownByServer && genericIndex < 2)
                {
                    object value = result;
                    switch (genericIndex)
                    {
                        case 0:
                            queryResult.Value = WAQSModelSerializableExpressionConverter.GetWAQSModelBaseObject(value);
                            break;
                        case 1:
                            queryResult.Value = typeof(WAQSModelService).GetMethod("GetBaseTypeToArray", BindingFlags.Static | BindingFlags.NonPublic).MakeGenericMethod(WAQSModelSerializableExpressionConverter.GetWAQSModelBaseType(queryTypeLoop) ?? queryTypeLoop).Invoke(null, new object[] { value });
                            break;
                    }
                }
                else
                    queryResult.Record = GetQueryResult(queryType, result);
            }
            return queryResult;
        }
    
        private static T[] GetBaseTypeToArray<T>(IEnumerable values)
        {
            if (values == null)
                return new T[0];
            return values.Cast<object>().Select(o => WAQSModelSerializableExpressionConverter.GetWAQSModelBaseObject(o)).Cast<T>().ToArray();
        }
    
        public WAQSModelQueriesResult ExecuteMany(QueriesSerialization queries)
        {
            List<Task> tasks = new List<Task>();
            var result = ExecuteMany(queries, tasks);
            foreach (var task in tasks)
            {
                task.Wait();
                if (task.Exception != null)
                    throw task.Exception;
            }
            return result;
        }
        private WAQSModelQueriesResult ExecuteMany(QueriesSerialization queries, List<Task> tasks)
        {
            var result = new WAQSModelQueriesResult { QueryResults = new WAQSModelQueryResult[queries.QuerySerializations.Length] };
            for (int queryIndex = 0 ; queryIndex < queries.QuerySerializations.Length ; queryIndex ++)
            {
                var query = queries.QuerySerializations[queryIndex];
                var indexLoop = queryIndex;
                tasks.Add(Task.Factory.StartNew(() =>
                    {
                        using (var service = _serviceFactory())
                        {
                            result.QueryResults[indexLoop] = service.Execute(query);
                        }
                    }));
            }
            return result;
        }
    
        public abstract WAQSModelQueryResultPage LoadPage(int pageSize, SerializableExpression queryExpression, IEnumerable<string> withSpecificationsProperties, LoadPageParameter[] identifiers);
            
        private static ConcurrentDictionary<Type, Lazy<WeakReference>> _queryResultRecordFactories = new ConcurrentDictionary<Type, Lazy<WeakReference>>(); 
        protected QueryResultRecord GetQueryResult(Type type, object o)
        {
            if (o == null)
                return null;
            for (;;)
            {
                WeakReference weakReference = _queryResultRecordFactories.GetOrAdd(type, new Lazy<WeakReference>(() => new WeakReference(CreateQueryResultExpression(type, _serializableExpressionProviderFactory(_context).GetOriginalType(type)).Compile()))).Value;
                var queryResultRecordFactory = (Func<object, QueryResultRecord>)weakReference.Target;
                if (queryResultRecordFactory != null)
                    return queryResultRecordFactory(o);
                Lazy<WeakReference> dummy;
                _queryResultRecordFactories.TryRemove(type, out dummy);
            }
        }
    
        public DateTime GetDbDateTime()
        {
            return _context.GetDbDateTime();
        }
    
        public void SaveChanges()
        {
            bool saved = false;
            SaveChanges(ref saved);
            if (! saved)
            {
                _context.SaveChanges();
            }
        }
    
        partial void SaveChanges(ref bool saved);
    
    
        public IEnumerable<Error> Validate(Entity1 entity)
        {
            yield break;
        }
     
    
        void IDisposable.Dispose()
        {
            _context.Dispose();
        }
    }
}
