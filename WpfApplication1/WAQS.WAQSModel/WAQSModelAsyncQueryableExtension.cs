//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using WCFAsyncQueryableServices.ClientContext;
using WCFAsyncQueryableServices.ClientContext.Interfaces;
using WpfApplication1;
using WpfApplication1.ClientContext.Interfaces;

namespace WpfApplication1.ClientContext
{
    public static partial class WAQSModelAsyncQueryableExtension
    {
        public static IAsyncQueryable<WpfApplication1.Entity1> WithNameLength(this IAsyncQueryable<WpfApplication1.Entity1> source)
        {
            return WCFAsyncQueryableServices.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryable<WpfApplication1.Entity1>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"NameLength"}), source.SelectedProperties);
        }	
    
        public static IAsyncQueryableValue<WpfApplication1.Entity1> WithNameLength(this IAsyncQueryableValue<WpfApplication1.Entity1> source)
        {
            return WCFAsyncQueryableServices.ClientContext.AsyncQueryableExtensions.CreateAsyncQueryableValue<WpfApplication1.Entity1>(source.Context, source.Expression, source.ParameterMode, source.Includes, source.WithSpecificationsProperties.Union(new string[] {"NameLength"}), source.SelectedProperties);
        }	
    
        [IncludeMethod]
        public static IEnumerable<WpfApplication1.Entity1> WithNameLength(this IEnumerable<WpfApplication1.Entity1> source)
        {
            throw new NotImplementedException();
        }	
    
        [IncludeMethod]
        public static WpfApplication1.Entity1 WithNameLength(this WpfApplication1.Entity1 source)
        {
            throw new NotImplementedException();
        }	
    
        public static async Task<int> LoadNameLengthAsync(this WpfApplication1.Entity1 entity, MergeOption? mergeOption = null)
        {
            var entitySet = (IClientEntitySet<IWAQSModelClientContext, WpfApplication1.Entity1>)ClientEntitySetExtensions.GetClientEntitySet(entity);
            if (entitySet == null)
                throw new InvalidOperationException("Load method only works with tracking entities");
            var value = await entitySet.AsAsyncQueryable().Where(e => e.Id == entity.Id).Select(e => e.NameLength).First().ExecuteAsync(mergeOption);
            if (entity.Specifications == null)
                entity.Specifications = new WpfApplication1.Entity1.Entity1Specifications();
            entity.Specifications.HasNameLength = true;
            entity.Specifications.NameLength = value;
            return value;
        }	
    
            [IncludeMethod]
            public static IAsyncQueryable<WpfApplication1.Entity1> IncludeForNameLength(this IAsyncQueryable<WpfApplication1.Entity1> query)
            {
                bool done = false;
                IncludeForNameLengthCustomQueryable(ref query, ref done);
                return query;
            }
            static partial void IncludeForNameLengthCustomQueryable(ref IAsyncQueryable<WpfApplication1.Entity1> query, ref bool done);
    
            [IncludeMethod]
            public static IAsyncQueryableValue<WpfApplication1.Entity1> IncludeForNameLength(this IAsyncQueryableValue<WpfApplication1.Entity1> query)
            {
                bool done = false;
                IncludeForNameLengthCustomQueryableValue(ref query, ref done);
                return query;
            }
            static partial void IncludeForNameLengthCustomQueryableValue(ref IAsyncQueryableValue<WpfApplication1.Entity1> query, ref bool done);
    
            [IncludeMethod]
            public static IEnumerable<WpfApplication1.Entity1> IncludeForNameLength(this IEnumerable<WpfApplication1.Entity1> source)
            {
                throw new InvalidOperationException();
            }
    
            [IncludeMethod]
            public static WpfApplication1.Entity1 IncludeForNameLength(this WpfApplication1.Entity1 source)
            {
                throw new InvalidOperationException();
            }
    }
}
