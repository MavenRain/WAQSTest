//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using WCFAsyncQueryableServices.Entities;

namespace WCFAsyncQueryableServices.DAL.Interfaces
{
    public class ReplaceTypeRewriter<OldT, NewT> : ExpressionVisitor
    {
        protected override Expression VisitConstant(ConstantExpression expression)
        {
            Type newType = ReplaceType(expression.Type);
            if (newType != expression.Type)
                return Expression.Constant(expression.Value, newType);
            return base.VisitConstant(expression);
        }
    
        protected override Expression VisitLambda<T>(Expression<T> expression)
        {
            Type newType = ReplaceType(expression.ReturnType);
            if (newType != expression.ReturnType)
                return Expression.Lambda(Visit(expression.Body), expression.Parameters.Select(p => (ParameterExpression)Visit(p)));
            return base.VisitLambda(expression);
        }
    
        protected override Expression VisitMember(MemberExpression expression)
        {
            Type newType = ReplaceType(expression.Member.DeclaringType);
            if (newType != expression.Member.DeclaringType)
                return Expression.MakeMemberAccess(Visit(expression.Expression), newType.GetProperty(expression.Member.Name));
            return base.VisitMember(expression);
        }
            
        protected override Expression VisitMethodCall(MethodCallExpression expression)
        {
            Type newType = ReplaceType(expression.Method.DeclaringType);
            MethodInfo method;
            if (newType == expression.Method.DeclaringType)
            {
                method = expression.Method;
                if (!method.IsGenericMethod)
                    return base.VisitMethodCall(expression);
                method = method.GetGenericMethodDefinition();
            }
            else
                method = newType.GetMethod(expression.Method.Name, expression.Method.GetParameters().Select(p => ReplaceType(p.ParameterType)).ToArray());
            if (method.IsGenericMethod)
                method = method.MakeGenericMethod(expression.Method.GetGenericArguments().Select(ga => ReplaceType(ga)).ToArray());
            return Expression.Call(Visit(expression.Object), method, expression.Arguments.Select(p => Visit(p)));
        }
            
        protected override Expression VisitParameter(ParameterExpression expression)
        {
            Type newType = ReplaceType(expression.Type);
            if (newType != expression.Type)
                return Expression.Parameter(newType, expression.Name);
            return base.VisitParameter(expression);
        }
            
        private static Type ReplaceType(Type type)
        {
            if (type == typeof(OldT))
                return typeof(NewT);
            if (type.IsGenericType)
                return type.GetGenericTypeDefinition().MakeGenericType(type.GetGenericArguments().Select(t => ReplaceType(t)).ToArray());
            return type;
        }
    }
}
