//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System.Data.Entity.Infrastructure;
using System.Threading;
using System.Threading.Tasks;
using WCFAsyncQueryableServices.DAL.Interfaces;

namespace WCFAsyncQueryableServices.DAL
{
    public class EFAsyncEnumerator : IAsyncEnumerator
    {
        private IDbAsyncEnumerator _asyncEnumerator;
    
        public EFAsyncEnumerator(IDbAsyncEnumerator asyncEnumerator)
        {
            _asyncEnumerator = asyncEnumerator;
        }
    
        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return _asyncEnumerator.MoveNextAsync(cancellationToken);
        }
    
        public object Current
        {
            get { return _asyncEnumerator.Current; }
        }
    
        public void Dispose()
        {
            _asyncEnumerator.Dispose();
        }
    }
    
    public class EFAsyncEnumerator<T> : EFAsyncEnumerator, IAsyncEnumerator<T>
    {
        private IDbAsyncEnumerator<T> _asyncEnumerator;
    
        public EFAsyncEnumerator(IDbAsyncEnumerator<T> asyncEnumerator)
            : base(asyncEnumerator)
        {
            _asyncEnumerator = asyncEnumerator;
        }
    
        public new T Current
        {
            get { return _asyncEnumerator.Current; }
        }
    }
}
