
<#@import namespace="System.Text.RegularExpressions"#><#@ assembly name="System.Core" #><#@ assembly name="System.Data" #><#@ assembly name="System.Data.Entity" #><#@ assembly name="System.Data.Entity.Design" #><#@ assembly name="System.Xml" #><#@ assembly name="System.Xml.Linq"#><#@ assembly name="EnvDTE"#><#@ import namespace="System" #><#@ import namespace="System.Linq" #><#@ import namespace="System.IO" #><#@ import namespace="System.Collections.Generic" #><#@ import namespace="System.Data.Objects" #><#@ import namespace="System.Data.Objects.DataClasses" #><#@ import namespace="System.Xml" #><#@ import namespace="System.Xml.Linq" #><#@ import namespace="System.Globalization" #><#@ import namespace="System.Reflection" #><#@ import namespace="System.Data.Metadata.Edm" #><#@ import namespace="System.Data.Mapping" #><#@ import namespace="System.Data.Entity.Design" #><#@ import namespace="System.CodeDom" #><#@ import namespace="System.CodeDom.Compiler" #><#@ import namespace="Microsoft.CSharp"#><#@ import namespace="System.Text"#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"#><#@ template language="C#" debug="false" hostspecific="true"#><#@ output extension=".txt"#>
<#+// Copyright (c) Microsoft Corporation.  All rights reserved.
// Copyright (c) Matthieu MEZIL.  All rights reserved.

public class EdmxElements
{
    private EdmxElements(ITextTemplatingEngineHost host, string edmxPath, string namespaceName)
    {
        EdmxPath = edmxPath;
        Code = new CodeGenerationTools(this);
        NamespaceName = namespaceName ?? Code.VsNamespaceSuggestion();
        MetadataTools = new MetadataTools(this);
        Loader = new MetadataLoader(this);
        ItemCollection = Loader.CreateEdmItemCollection(EdmxPath);
        EdmxName = Path.GetFileNameWithoutExtension(EdmxPath);
        Container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
        EntityTypes = ItemCollection.GetItems<EntityType>().ToList();
        ComplexTypes = ItemCollection.GetItems<ComplexType>().ToList();
        EdmTypes = EntityTypes.Cast<StructuralType>().Union(ComplexTypes).ToList();
        EntitySets = Container.BaseEntitySets.OfType<EntitySet>().ToList();
        FunctionImports = Container.FunctionImports.ToList();
    }

    private EdmxElements()
    {
    }

    public static EdmxElements Get(ITextTemplatingEngineHost host, string edmxPath, string namespaceName = null)
    {
        return Get(host, ref edmxPath, namespaceName);
    }

    public static EdmxElements Get(ITextTemplatingEngineHost host, ref string edmxPath, string namespaceName = null)
    {
        edmxPath = Path.GetFullPath(host.ResolvePath(edmxPath));
        return new EdmxElements(host, edmxPath, namespaceName);
    }

    public string EdmxPath { get; private set; }
    public string NamespaceName { get; private set; }
    public string EdmxName { get; private set; }
    public MetadataTools MetadataTools { get; private set; }
    public CodeGenerationTools Code { get; private set; }
    public MetadataLoader Loader { get; private set; }
    public EdmItemCollection ItemCollection { get; private set; }
    public List<EntityType> EntityTypes { get; private set; }
    public List<ComplexType> ComplexTypes { get; private set; }
    public List<StructuralType> EdmTypes { get; private set; }
    public List<EntitySet> EntitySets { get; private set; }
    public List<EdmFunction> FunctionImports { get; private set; }
    public EntityContainer Container { get; private set; }

    private StoreItemCollection _storeItemCollection;
    public StoreItemCollection StoreItemCollection
    {
        get 
        {
            if (_storeItemCollection == null)
                Loader.TryCreateStoreItemCollection(EdmxPath, out _storeItemCollection);
            return _storeItemCollection; 
        }
    }

    private EntityContainer _storeContainer;
    public EntityContainer StoreContainer
    {
        get { return _storeContainer ?? (_storeContainer = StoreItemCollection.GetItems<EntityContainer>().First()); }
    }

    private string _storeContainerName;
    public string StoreContainerName 
    {
        get { return _storeContainerName ?? (_storeContainerName = StoreContainer.Name); }
    }

    private StorageMappingItemCollection _mappingCollection;
    public StorageMappingItemCollection MappingCollection
    {
        get 
        { 
            if (_mappingCollection == null)
                Loader.TryCreateStorageMappingItemCollection(EdmxPath, ItemCollection, StoreItemCollection, out _mappingCollection);
            return _mappingCollection;
        }
    }
}


partial class WritingFunctions
{
    private Action<string> _write;

    public WritingFunctions(Action<string> write)
    {
        _write = write;
    }

    public void Write(string text)
    {
        _write(text);
    }
}

public static class EdmFunctionExtensions
{
    public static string GetParameters(EdmFunction edmFunction, EdmxElements edmxElements)
    {
        FunctionImportParameter[] parameters;
        return GetParameters(edmFunction, edmxElements, out parameters);
    }
    public static string GetParameters(EdmFunction edmFunction, EdmxElements edmxElements, out FunctionImportParameter[] parameters)
    {
        parameters = FunctionImportParameter.Create(edmFunction.Parameters, edmxElements.Code, edmxElements.MetadataTools).ToArray();
        return String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName));
    }

    public static string GetReturnTypeName(EdmFunction edmFunction, EdmxElements edmxElements)
    {
        TypeUsage returnType;
        return GetReturnTypeName(edmFunction, edmxElements, out returnType);
    }
    public static string GetReturnTypeName(EdmFunction edmFunction, EdmxElements edmxElements, out TypeUsage returnType)
    {
        returnType = edmxElements.MetadataTools.GetElementType(edmFunction.ReturnParameter.TypeUsage);
        if (returnType == null)
            return null;
        return edmxElements.Code.Escape(returnType);
    }
}

public static string GetPlurial(string entityTypeName)
{
    return entityTypeName.EndsWith("y") ? entityTypeName.Substring(0, entityTypeName.Length - 1) + "ies" : entityTypeName.EndsWith("s") ? entityTypeName + "es" : entityTypeName + "s";
}

public static string GetPlurial(CodeGenerationTools code, EntityContainer container, EdmType edmType)
{
    var entityType = edmType as EntityType;

    EntitySet entitySet;
    if (entityType != null && (entitySet = GetEntitySet(container, entityType)) != null && entitySet.ElementType == entityType)
        return code.Escape(entitySet);
    return GetPlurial(code.Escape(edmType));
}

public static string GetContainerNameWithoutEntitiesName(EntityContainer container)
{
    string containerName = container.Name;
    string containerWithoutEntitiesName = containerName;
    if (containerWithoutEntitiesName.EndsWith("Entities") && containerWithoutEntitiesName.Length > 8)
        containerWithoutEntitiesName = containerWithoutEntitiesName.Substring(0, containerWithoutEntitiesName.Length - 8);
    return containerWithoutEntitiesName;
}

public static string PropertyAccessibilityAndVirtual(EdmMember member)
{
    string accessibility = Accessibility.ForProperty(member);
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}

public static bool IsConcurrencyFixed(EdmMember edmMember)
{
    return edmMember.TypeUsage.Facets.Any(f => f.Name == "ConcurrencyMode" && f.Value.ToString() == "Fixed");
}

public static int? MaxLength(EdmMember edmMember)
{
    var maxLengthFacet = edmMember.TypeUsage.Facets.FirstOrDefault(f => f.Name == "MaxLength");
    if (maxLengthFacet != null && maxLengthFacet.Value != null && maxLengthFacet.Value.ToString() != "Max")
        return (int)maxLengthFacet.Value;
    return null;
}

public static bool FixedLength(EdmMember edmMember)
{
    return edmMember.TypeUsage.Facets.Any(f => f.Name == "FixedLength" && f.Value!=null && (bool)f.Value);
}

public static string ReadOnlyPropertyAccessibilityAndVirtual(EdmMember member)
{
    string accessibility = Accessibility.ForReadOnlyProperty(member);
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}

public static string AccessibilityAndVirtual(string accessibility)
{
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}

public static EntitySet GetEntitySet(EntityContainer container, EntityType entityType)
{
    EntitySet value = container.BaseEntitySets.OfType<EntitySet>().FirstOrDefault(es => es.ElementType == entityType);
    if (value != null)
        return value;
    if (entityType.BaseType != null)
        return GetEntitySet(container, (EntityType)entityType.BaseType);
    return null;
}

public static EntitySet GetEntitySet(EntityContainer container, EdmItemCollection itemCollection, string entityTypeName)
{
    return GetEntitySet(container, itemCollection.GetItems<EntityType>().First(et => et.Name == entityTypeName));
}

public static NavigationProperty GetNavigationPropertyFromFK(EdmProperty property)
{
    var entityType = (EntityType)property.DeclaringType;
    foreach (NavigationProperty navigationProperty in entityType.NavigationProperties.Where(n => Accessibility.ForReadOnlyProperty(n) == "public"))
    {
        var association = (AssociationType)navigationProperty.RelationshipType;
        var associationEndMembers = association.AssociationEndMembers.Where(aem => aem.GetEntityType() == entityType);
        var referentialConstraint = association.ReferentialConstraints.FirstOrDefault();
        if (referentialConstraint == null)
            return null;
        if (referentialConstraint != null && associationEndMembers.Contains(referentialConstraint.ToRole) && referentialConstraint.ToProperties.Contains(property) && navigationProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
        {
            return navigationProperty;
        }
    }
    return null;
}

public static NavigationProperty GetOtherNavigationProperty(NavigationProperty navigationProperty)
{
    var association = (AssociationType)navigationProperty.RelationshipType;
    return navigationProperty.ToEndMember.GetEntityType().NavigationProperties.FirstOrDefault(np => np.RelationshipType == association && np != navigationProperty);
}

public static IEnumerable<EdmProperty> GetFKsFromNavigationProperty(NavigationProperty navigationProperty)
{
    var association = (AssociationType)navigationProperty.RelationshipType;
    var referentialConstraint = association.ReferentialConstraints.FirstOrDefault();
    if (referentialConstraint != null)
    {
        if (navigationProperty.FromEndMember == referentialConstraint.FromRole)
            return referentialConstraint.ToProperties; 
        else
            return referentialConstraint.FromProperties; 
    }
    return new EdmProperty[0];
}

public static IEnumerable<EntityType> GetSubEntityTypes(EdmItemCollection itemCollection, EntityType entityType, string accessibility = "public")
{
    return GetSubEntityTypes(itemCollection, entityType.Name, accessibility);
}

public static IEnumerable<EntityType> GetSubEntityTypes(EdmItemCollection itemCollection, string entityTypeName, string accessibility = "public")
{
    IEnumerable<EntityType> subEntityTypes = itemCollection.GetItems<EntityType>().OrderBy(e => e.Name).Where(e => e.BaseType != null && e.BaseType.Name == entityTypeName);
    if (accessibility != null)
        subEntityTypes = subEntityTypes.Where(e => Accessibility.ForType(e) == accessibility);
    foreach (EntityType et in subEntityTypes)
    {
        foreach (EntityType subEntityType in GetSubEntityTypes(itemCollection, et, accessibility))
            yield return subEntityType;
        yield return et;
    }
}

public EntityType GetEntityType(EdmItemCollection itemCollection, string entityTypeName)
{
    return itemCollection.GetItems<EntityType>().FirstOrDefault(et => et.Name == entityTypeName);
}

public static IEnumerable<EntityType> GetEntityTypes(EdmItemCollection itemCollection, EntitySet entitySet)
{
    var entityType = (EntityType)entitySet.ElementType;
    foreach (var subEntityType in GetSubEntityTypes(itemCollection, entityType))
        yield return subEntityType;
    yield return entityType;
}

public static IEnumerable<EntityType> GetDescendantsThenAscendantsEntityTypes(EdmItemCollection itemCollection, EntityType entityType)
{
    foreach (var subEntityType in GetSubEntityTypes(itemCollection, entityType))
        yield return subEntityType;
    yield return entityType;
    while ((entityType = (EntityType)entityType.BaseType) != null)
        yield return entityType;
}

public static void DefineMetadata()
{
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_NAME] = "CSharpSelfTracking.Types";
    TemplateMetadata[MetadataConstants.TT_TEMPLATE_VERSION] = "5.0";
    TemplateMetadata[MetadataConstants.TT_MINIMUM_ENTITY_FRAMEWORK_VERSION] = "4.0";
}

void WriteHeader(string namespaceName, CodeGenerationTools code, params string[] usings)
{
    new WritingFunctions(Write).WriteHeader(PushIndent, namespaceName, code, usings);
}
partial class WritingFunctions
{
public void WriteHeader(Action<string> pushIndent, string namespaceName, CodeGenerationTools code, params string[] usings)
{
    WriteHeaderWithExternAliases(pushIndent, namespaceName, code, new string[0], usings);
}
}

void WriteCopyright()
{
    new WritingFunctions(Write).WriteCopyright();
}
partial class WritingFunctions
{
public void WriteCopyright()
{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

<#+
}
}

void WriteHeaderWithExternAliases(string namespaceName, CodeGenerationTools code, string[] aliases, string[] usings)
{
    new WritingFunctions(Write).WriteHeaderWithExternAliases(PushIndent, namespaceName, code, aliases, usings);
}
partial class WritingFunctions
{
public void WriteHeaderWithExternAliases(Action<string> pushIndent, string namespaceName, CodeGenerationTools code, string[] aliases, string[] usings)
{
    CodeRegion region = new CodeRegion(this);
    WriteCopyright();
    foreach (var a in aliases.Where(al => al != null).Distinct())
    {
#>
extern alias <#=a#>;
<#+
    }	
#>
 
<#+
    foreach (var u in usings.Where(us => ! string.IsNullOrEmpty(us)).Distinct())
    {
#>
using <#=u#>;
<#+
    }	
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>

namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        pushIndent(CodeRegion.GetIndent(1));
    }
}
}

void WriteFooter(string namespaceName)
{
    new WritingFunctions(Write).WriteFooter(PopIndent, namespaceName);
}
partial class WritingFunctions
{
public void WriteFooter(Func<string> popIndent, string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        popIndent();
#>
}
<#+
    }
}
}

public partial class OriginalValueMembers
{
    private readonly HashSet<EdmProperty> _concurrencyMembers;

    public OriginalValueMembers(bool recordRequiredOriginalValuesOnly, MetadataWorkspace metadataWorkspace, MetadataTools metadataTools)
    {
        if (recordRequiredOriginalValuesOnly)
            try
            {
                _concurrencyMembers = new HashSet<EdmProperty>();
                foreach (EntityContainer container in metadataWorkspace.GetItems<EntityContainer>(DataSpace.CSpace))
                {
                    ILookup<EntityType, EntityType> directSubTypeLookup = metadataWorkspace.GetItems<EntityType>(DataSpace.CSpace).ToLookup(e => (EntityType)e.BaseType);
                    foreach (EntitySetBase eSet in container.BaseEntitySets.Where(es => es.BuiltInTypeKind == BuiltInTypeKind.EntitySet))
                    {
                        List<EntityType> subTypes = new List<EntityType>();
                        GetSubtypes(directSubTypeLookup, (EntityType)eSet.ElementType, subTypes);
                        foreach (EntityType eType in subTypes)
                            foreach (EdmProperty member in GetRelevantMembersForUpdate(metadataWorkspace, eSet, eType, true))
                                _concurrencyMembers.Add(member);
                    }
                }

                foreach (AssociationType assoc in metadataWorkspace.GetItems<AssociationType>(DataSpace.CSpace).Where(a => a.IsForeignKey))
                    foreach (EdmProperty toProperty in assoc.ReferentialConstraints[0].ToProperties)
                        _concurrencyMembers.Add(toProperty);
            }
            catch (Exception)
            {
                _concurrencyMembers = null;
            }
    }

    public bool IsOriginalValueMember(EdmProperty edmProperty)
    {
        return _concurrencyMembers == null || _concurrencyMembers.Contains(edmProperty);
    }

    private static void GetSubtypes(ILookup<EntityType, EntityType> lookup, EntityType eType, List<EntityType> subTypes)
    {
        subTypes.Add(eType);
        foreach (EntityType subType in lookup[eType])
            GetSubtypes(lookup, subType, subTypes);
    }
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
            continue;

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
            alreadySeen.Add(type.FullName, true);
    }

    return true;
}

// True if the association for the specified navigation property is an identifying relationship or a foreign key relationship.
public static bool IsForeignKeyOrIdentifyingRelationship(MetadataTools tools, NavigationProperty navProperty)
{
    if (tools == null)
        throw new ArgumentNullException("tools");

    if (navProperty == null)
        throw new ArgumentNullException("navProperty");

    return IsForeignKeyOrIdentifyingRelationship(tools, (AssociationType)navProperty.RelationshipType);
}

// True if the specified association is an identifying relationship or a foreign key relationship.
public static bool IsForeignKeyOrIdentifyingRelationship(MetadataTools tools, AssociationType association)
{
    if (tools == null)
        throw new ArgumentNullException("tools");

    if (association == null)
        throw new ArgumentNullException("association");

    return association.IsForeignKey || tools.IsIdentifyingRelationship(association);
}

public static bool IsPublic(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter == "public" && setter == "public" && (member.TypeUsage.EdmType is ComplexType ? Accessibility.ForType(member.TypeUsage.EdmType) == "public" : true);
}
public static bool IsPublicOrInternal(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);
    string typeAccessibility;
    return (getter == "public" || getter == "internal") && (setter == "public" || setter == "internal") && (member.TypeUsage.EdmType is ComplexType ? ((typeAccessibility = Accessibility.ForType(member.TypeUsage.EdmType)) == "public" || typeAccessibility == "internal") : true);
}

public static bool IsPublic(EdmFunction method)
{
    return Accessibility.ForMethod(method) == "public";
}
public static bool IsPublicOrInternal(EdmFunction method)
{
    string methodAccessibility = Accessibility.ForMethod(method);
    return methodAccessibility == "public" || methodAccessibility == "internal";
}

public static bool IsPublic(NavigationProperty np)
{
    if (np == null || np.ToEndMember == null)
        return false;
    return IsPublic((EdmMember)np) && Accessibility.ForType(np.ToEndMember.GetEntityType()) == "public";
}
public static bool IsPublicOrInternal(NavigationProperty np)
{
    if (np == null || np.ToEndMember == null)
        return false;
    string typeAccessibility;
    return IsPublicOrInternal((EdmMember)np) && ((typeAccessibility = Accessibility.ForType(np.ToEndMember.GetEntityType())) == "public" || typeAccessibility == "internal");
}

public static bool IsPublic(EdmType type)
{
    return Accessibility.ForType(type) == "public";
}

public static IEnumerable<EdmProperty> GetCSDLIdentityProperties(EntityType entityType)
{
    return entityType.Properties.Where(p => p.MetadataProperties.Select(mp => mp.Value).OfType<string>().Any(sgp => sgp == "Identity"));
}

public static IEnumerable<EdmProperty> GetCSDLComputedProperties(EntityType entityType)
{
    return entityType.Properties.Where(p => p.MetadataProperties.Select(mp => mp.Value).OfType<string>().Any(sgp => sgp == "Computed"));
}

public IEnumerable<string> GetIdentityProperties(string inputFile, EntityType entityType)
{
    return GetIdentityProperties(inputFile, entityType, HostResolvePath);
}
public static IEnumerable<string> GetIdentityProperties(string inputFile, EntityType entityType, Func<string, string> hostResolvePath)
{
    return GetStoreGeneratedPropertiesPrivate(inputFile, entityType, "Identity", hostResolvePath).Distinct();
}

public bool HasTemporaryKeys(string inputFile, EntityType entityType)
{
    return HasTemporaryKeys(inputFile, entityType, HostResolvePath);
}
public static bool HasTemporaryKeys(string inputFile, EntityType entityType, Func<string, string> hostResolvePath)
{
    return GetStoreGeneratedPropertiesPrivate(inputFile, entityType, "Identity", hostResolvePath).Any() || entityType.NavigationProperties.Any(np => np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && HasTemporaryKeys(inputFile, np.ToEndMember.GetEntityType(), hostResolvePath));
}

public string HostResolvePath(string path)
{
    return Host.ResolvePath(path);
}

public bool CouldHaveCSDLTemporaryKeys(EntityType entityType)
{
    return CouldHaveCSDLTemporaryKeys(entityType, HostResolvePath);
}
public static bool CouldHaveCSDLTemporaryKeys(EntityType entityType, Func<string, string> hostResolvePath, List<NavigationProperty> navigationProperties = null)
{
    if (navigationProperties == null)
        navigationProperties = new List<NavigationProperty>();
    return HasCSDLTemporaryKeys(entityType, hostResolvePath) || CouldHaveCSDLTemporaryKeysNps(entityType, hostResolvePath, navigationProperties).Any();
}

public IEnumerable<NavigationProperty> CouldHaveCSDLTemporaryKeysNps(EntityType entityType)
{
    return CouldHaveCSDLTemporaryKeysNps(entityType, HostResolvePath);
}
public static IEnumerable<NavigationProperty> CouldHaveCSDLTemporaryKeysNps(EntityType entityType, Func<string, string> hostResolvePath, List<NavigationProperty> navigationProperties = null)
{
    if (navigationProperties == null)
        navigationProperties = new List<NavigationProperty>();
    return entityType.NavigationProperties.Where(np => 
        {
            if (navigationProperties.Contains(np) || !np.GetDependentProperties().Any())
                return false;
            navigationProperties.Add(np);
            IEnumerable<EdmProperty> fromProperties, toProperties;
            GetNavigationPropertyReferentialConstraintsEnumerables(np, out fromProperties, out toProperties);
            return np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many && fromProperties.Any(f => entityType.KeyMembers.Contains(f)) && CouldHaveCSDLTemporaryKeys(np.ToEndMember.GetEntityType(), hostResolvePath, navigationProperties);
        });
}

public IEnumerable<EdmMember> TemporaryKeys(EntityType entityType)
{
    return TemporaryKeys(entityType, HostResolvePath);
}
public static IEnumerable<EdmMember> TemporaryKeys(EntityType entityType, Func<string, string> hostResolvePath, List<NavigationProperty> navigationProperties = null)
{
    if (navigationProperties == null)
        navigationProperties = new List<NavigationProperty>();
    return GetCSDLIdentityProperties(entityType).Cast<EdmMember>().Intersect(entityType.KeyMembers).Union(CouldHaveCSDLTemporaryKeysNps(entityType, hostResolvePath).SelectMany<NavigationProperty, EdmMember>(np => 
        {
            if (navigationProperties.Contains(np))
                return new EdmMember[0];
            navigationProperties.Add(np);
            IEnumerable<EdmProperty> fromProperties, toProperties;
            GetNavigationPropertyReferentialConstraintsEnumerables(np, out fromProperties, out toProperties);
            var toTemporaryKeys = TemporaryKeys(np.ToEndMember.GetEntityType(), hostResolvePath, navigationProperties).Intersect(toProperties);
            IEnumerator<EdmProperty> fromPropertiesEnumerator = fromProperties.GetEnumerator(), toPropertiesEnumerator = toProperties.GetEnumerator();
            var result = new List<EdmMember>();
            while (fromPropertiesEnumerator.MoveNext() && toPropertiesEnumerator.MoveNext())
                if (toTemporaryKeys.Contains(toPropertiesEnumerator.Current))
                    result.Add(fromPropertiesEnumerator.Current);
            return result;
        })).Distinct();
}

public bool HasCSDLTemporaryKeys(EntityType entityType)
{
    return HasCSDLTemporaryKeys(entityType, HostResolvePath);
}
public static bool HasCSDLTemporaryKeys(EntityType entityType, Func<string, string> hostResolvePath)
{
    return GetCSDLIdentityProperties(entityType).Any() || entityType.NavigationProperties.Any(np => np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && HasCSDLTemporaryKeys(np.ToEndMember.GetEntityType(), hostResolvePath));
}

public IEnumerable<string> GetComputedProperties(string inputFile, EntityType entityType)
{
    return GetComputedProperties(inputFile, entityType, HostResolvePath);
}
public static IEnumerable<string> GetComputedProperties(string inputFile, EntityType entityType, Func<string, string> hostResolvePath)
{
    return GetStoreGeneratedPropertiesPrivate(inputFile, entityType, "Computed", hostResolvePath).Distinct();
}

public IEnumerable<string> GetStoreGeneratedPropertiesPrivate(string inputFile, EntityType entityType, string storeGeneratedPattern)
{
    return GetStoreGeneratedPropertiesPrivate(inputFile, entityType, storeGeneratedPattern, HostResolvePath);
}
public static IEnumerable<string> GetStoreGeneratedPropertiesPrivate(string inputFile, EntityType entityType, string storeGeneratedPattern, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string msl_ns = GetMSL_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    for (var entityTypeLoop = entityType ; entityTypeLoop != null ; entityTypeLoop = (EntityType)entityTypeLoop.BaseType)
    {
        var entityTypeMapping = runtime.Element(XName.Get("Mappings", edm_ns)).Element(XName.Get("Mapping", msl_ns)).Descendants(XName.Get("EntityTypeMapping", msl_ns)).FirstOrDefault(etm => Regex.IsMatch(etm.Attribute("TypeName").Value, string.Concat(@"^(?:IsTypeOf\()?", entityTypeLoop.NamespaceName, ".", entityTypeLoop.Name, @"(?:\))?$")));
        if (entityTypeMapping != null) 
            foreach (var mappingFragment in entityTypeMapping.Elements(XName.Get("MappingFragment", msl_ns)))
            {
                foreach (var storeGeneratedProp in GetStoreGeneratedPropertiesPrivate(runtime, mappingFragment, mappingFragment.Attribute("StoreEntitySet").Value, storeGeneratedPattern, edm_ns, msl_ns, ssdl_ns))
                    yield return storeGeneratedProp;
            }
    }
}

public static IEnumerable<string> GetStoreGeneratedPropertiesPrivate(XElement runtime, XElement mappingParent, string table, string storeGeneratedPattern, string edm_ns, string msl_ns, string ssdl_ns, string prefix = "")
{
    foreach (var scalarProperty in mappingParent.Elements(XName.Get("ScalarProperty", msl_ns)))
    {
        var column = scalarProperty.Attribute("ColumnName").Value;
        XAttribute storeGeneratedPatternAttribute;
        if ((storeGeneratedPatternAttribute = runtime.Element(XName.Get("StorageModels", edm_ns)).Element(XName.Get("Schema", ssdl_ns)).Elements(XName.Get("EntityType", ssdl_ns)).First(et => et.Attribute("Name").Value == table).Elements(XName.Get("Property", ssdl_ns)).First(p => p.Attribute("Name").Value == column).Attribute("StoreGeneratedPattern")) != null && storeGeneratedPatternAttribute.Value == storeGeneratedPattern)
            yield return prefix + scalarProperty.Attribute("Name").Value;
    }
    foreach (var complexProperty in mappingParent.Elements(XName.Get("ComplexProperty", msl_ns)))
        foreach (var storeGeneratedProp in GetStoreGeneratedPropertiesPrivate(runtime, complexProperty, table, storeGeneratedPattern, edm_ns, msl_ns, ssdl_ns, prefix = complexProperty.Attribute("Name").Value + "."))
            yield return storeGeneratedProp;
}

public static string InitializedTrackingField(EdmProperty property, CodeGenerationTools code)
{
    string namePart = property.Name + "Initialized";
    if (code.CamelCaseFields)
        namePart = code.CamelCase(namePart);
    return "_" + namePart;
}

public static bool IsSaveReference(MetadataTools tools, NavigationProperty navProperty)
{
    return !IsForeignKeyOrIdentifyingRelationship(tools, navProperty) && navProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many && navProperty.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.One;
}

public static string CreateFixupMethodName(RelationshipEndMember endMember)
{
    return String.Format(CultureInfo.InvariantCulture, "Fixup{0}_{1}_{2}Keys", endMember.DeclaringType.NamespaceName.Replace(".", "_"), endMember.DeclaringType.Name, endMember.Name);
}

public static string CreateKeyNameVariable(string keyName)
{
    return String.Format(CultureInfo.InvariantCulture, "{0}KeyName", keyName);
}

public static string CreateReferenceValueLookupKey(AssociationEndMember endMember, string keyName)
{
    return String.Format(CultureInfo.InvariantCulture, "Navigate({0}.{1}).{2}", endMember.DeclaringType.FullName, endMember.Name, keyName);
}

public static string CreateReferenceValueLookupKey(NavigationProperty navProp, string keyName)
{
    return String.Format(CultureInfo.InvariantCulture, "{0}.{1}", navProp.Name, keyName);
}

public IEnumerable<string> GetTablesMappedTo(string inputFile, EntityType entityType)
{
    return GetTablesMappedTo(inputFile, entityType, HostResolvePath);
}
public static IEnumerable<string> GetTablesMappedTo(string inputFile, EntityType entityType, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string msl_ns = GetMSL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    for (var entityTypeLoop = entityType ; entityTypeLoop != null ; entityTypeLoop = (EntityType)entityTypeLoop.BaseType)
    {
        var entityTypeMapping = runtime.Element(XName.Get("Mappings", edm_ns)).Element(XName.Get("Mapping", msl_ns)).Descendants(XName.Get("EntityTypeMapping", msl_ns)).FirstOrDefault(etm => Regex.IsMatch(etm.Attribute("TypeName").Value, string.Concat(@"^(?:IsTypeOf\()?", entityTypeLoop.NamespaceName, ".", entityTypeLoop.Name, @"(?:\))?$")));
        if (entityTypeMapping != null)
            foreach (var mappingFragment in entityTypeMapping.Elements(XName.Get("MappingFragment", msl_ns)))
                yield return mappingFragment.Attribute("StoreEntitySet").Value;
    }	
}

public IEnumerable<XElement> GetDependentTablesAssociation(string inputFile, string table)
{
    return GetDependentTablesAssociation(inputFile, table, HostResolvePath);
}
public static IEnumerable<XElement> GetDependentTablesAssociation(string inputFile, string table, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    foreach (var association in runtime.Element(XName.Get("StorageModels", edm_ns)).Element(XName.Get("Schema", ssdl_ns)).Elements(XName.Get("Association", ssdl_ns)))
    {
        XElement end;
        if ((end = association.Elements(XName.Get("End", ssdl_ns)).FirstOrDefault(r => r.Attribute("Type").Value.EndsWith("." + table))) != null && end.Attribute("Role").Value == association.Element(XName.Get("ReferentialConstraint", ssdl_ns)).Element(XName.Get("Principal", ssdl_ns)).Attribute("Role").Value)
            yield return association;
    }
}

public IEnumerable<XElement> GetDependentTablesAssociation(string inputFile, List<string> tables, string table)
{
    return GetDependentTablesAssociation(inputFile, tables, table, HostResolvePath);
}
public static IEnumerable<XElement> GetDependentTablesAssociation(string inputFile, List<string> tables, string table, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    foreach (var association in runtime.Element(XName.Get("StorageModels", edm_ns)).Element(XName.Get("Schema", ssdl_ns)).Elements(XName.Get("Association", ssdl_ns)))
    {
        XElement end;
        if ((end = association.Elements(XName.Get("End", ssdl_ns)).FirstOrDefault(e => e.Attribute("Type").Value.EndsWith("." + table))) != null && end.Attribute("Role").Value == association.Element(XName.Get("ReferentialConstraint", ssdl_ns)).Element(XName.Get("Principal", ssdl_ns)).Attribute("Role").Value && tables.Contains(Regex.Match(association.Elements(XName.Get("End", ssdl_ns)).First(e => e != end).Attribute("Type").Value, "[^.]+$").Value))
            yield return association;
    }
}

public IEnumerable<string> TableWithoutPrincipal(string inputFile, List<string> tables)
{
    return TableWithoutPrincipal(inputFile, tables, HostResolvePath);
}
public static IEnumerable<string> TableWithoutPrincipal(string inputFile, List<string> tables, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    return tables.Where(table => ! runtime.Element(XName.Get("StorageModels", edm_ns)).Element(XName.Get("Schema", ssdl_ns)).Elements(XName.Get("Association", ssdl_ns)).Any(association => 
    {
        XElement end;
        return (end = association.Elements(XName.Get("End", ssdl_ns)).FirstOrDefault(e => e.Attribute("Type").Value.EndsWith("." + table))) != null && end.Attribute("Role").Value == association.Element(XName.Get("ReferentialConstraint", ssdl_ns)).Element(XName.Get("Dependent", ssdl_ns)).Attribute("Role").Value && tables.Contains(Regex.Match(association.Elements(XName.Get("End", ssdl_ns)).First(e => e != end).Attribute("Type").Value, "[^.]+$").Value);
    }));
}

public string GetMappedColumn(string inputFile, EntityType entityType, string table, EdmMember prop)
{
    return GetMappedColumn(inputFile, entityType, table, prop, HostResolvePath);
}
public static string GetMappedColumn(string inputFile, EntityType entityType, string table, EdmMember prop, Func<string, string> hostResolvePath)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    var edm_ns = GetEDM_NS(root);
    string msl_ns = GetMSL_NS(root);
    string ssdl_ns = GetSSDL_NS(root);
    var runtime = root.Element(XName.Get("Runtime", edm_ns));
    if (entityType != null)
    {
        var entityTypeMapping = runtime.Element(XName.Get("Mappings", edm_ns)).Element(XName.Get("Mapping", msl_ns)).Descendants(XName.Get("EntityTypeMapping", msl_ns)).FirstOrDefault(etm => Regex.IsMatch(etm.Attribute("TypeName").Value, string.Concat(@"^(?:IsTypeOf\()?", entityType.NamespaceName, ".", entityType.Name, @"(?:\))?$")));
        if (entityTypeMapping == null)
            return null;
        var storeEntitySetMapping = entityTypeMapping.Elements(XName.Get("MappingFragment", msl_ns)).FirstOrDefault(mf => mf.Attribute("StoreEntitySet").Value == table);
        if (storeEntitySetMapping == null)
        { 
            if (entityType.BaseType == null)
                return null;
            return GetMappedColumn(inputFile, (EntityType)entityType.BaseType, table, prop, hostResolvePath);
        }
        return storeEntitySetMapping.Elements(XName.Get("ScalarProperty", msl_ns)).First(sp => sp.Attribute("Name").Value == prop.Name).Attribute("ColumnName").Value;
    }
    return null;
}

public bool IsHorizontalEntitySplittingCondition(string inputFile, EntityType entityType, EdmMember prop)
{
    return IsHorizontalEntitySplittingCondition(inputFile, entityType, prop, HostResolvePath);
}
public void GetEdmxRuntimeAndEDMAndMSLNamespaces(string inputFile, out string edm_ns, out string msl_ns, out XElement runtime)
{
    GetEdmxRuntimeAndEDMAndMSLNamespaces(inputFile, HostResolvePath, out edm_ns, out msl_ns, out runtime);
}
public static void GetEdmxRuntimeAndEDMAndMSLNamespaces(string inputFile, Func<string, string> hostResolvePath, out string edm_ns, out string msl_ns, out XElement runtime)
{
    var root = XElement.Load(hostResolvePath(inputFile));
    edm_ns = GetEDM_NS(root);
    msl_ns = GetMSL_NS(root);
    runtime = root.Element(XName.Get("Runtime", edm_ns));
}
public static bool IsHorizontalEntitySplittingCondition(string inputFile, EntityType entityType, EdmMember prop, Func<string, string> hostResolvePath)
{
    string edm_ns, msl_ns;
    XElement runtime;
    GetEdmxRuntimeAndEDMAndMSLNamespaces(inputFile, hostResolvePath, out edm_ns, out msl_ns, out runtime);
    return IsHorizontalEntitySplittingCondition(inputFile, entityType, prop, edm_ns, msl_ns, runtime);
}
public static bool IsHorizontalEntitySplittingCondition(string inputFile, EntityType entityType, EdmMember prop, string edm_ns, string msl_ns, XElement runtime)
{
    for (var entityTypeLoop = entityType ; entityTypeLoop != null ; entityTypeLoop = (EntityType)entityTypeLoop.BaseType)
    {
        var entityTypeMapping = runtime.Element(XName.Get("Mappings", edm_ns)).Element(XName.Get("Mapping", msl_ns)).Descendants(XName.Get("EntityTypeMapping", msl_ns)).FirstOrDefault(etm => Regex.IsMatch(etm.Attribute("TypeName").Value, string.Concat(@"^(?:IsTypeOf\()?", entityType.NamespaceName, ".", entityType.Name, @"(?:\))?$")));
        if (entityTypeMapping == null)
            return false;
        if (entityTypeMapping.Elements(XName.Get("MappingFragment", msl_ns)).Any(mf => mf.Elements(XName.Get("Condition", msl_ns)).Any(c => 
            {
                var nameAttribute = c.Attribute("Name");
                if (nameAttribute == null)
                    return false;
                if (nameAttribute.Value == prop.Name)
                    return true;
                return false;
            })))
            return true;
    }
    return false;
}

public static void GetNavigationPropertyReferentialConstraintsEnumerables(NavigationProperty navigationProperty, out IEnumerable<EdmProperty> fromEnumerable, out IEnumerable<EdmProperty> toEnumerable)
{
    ReferentialConstraint referentialConstraint;
    GetNavigationPropertyReferentialConstraintsEnumerables(navigationProperty, out referentialConstraint, out fromEnumerable, out toEnumerable);
}
public static void GetNavigationPropertyReferentialConstraintsEnumerables(NavigationProperty navigationProperty, out ReferentialConstraint referentialConstraint, out IEnumerable<EdmProperty> fromEnumerable, out IEnumerable<EdmProperty> toEnumerable)
{
    var association = (AssociationType)navigationProperty.RelationshipType;
    referentialConstraint = association.ReferentialConstraints.FirstOrDefault();
    if (referentialConstraint != null)
    {
        if (navigationProperty.FromEndMember == referentialConstraint.FromRole)
        {
            fromEnumerable = referentialConstraint.FromProperties;
            toEnumerable = referentialConstraint.ToProperties; 
        }
        else
        {
            fromEnumerable = referentialConstraint.ToProperties;
            toEnumerable = referentialConstraint.FromProperties; 
        }
        return;
    }
    fromEnumerable = new EdmProperty[0];
    toEnumerable = new EdmProperty[0];
}

public static void GetNavigationPropertyReferentialConstraintsEnumerators(NavigationProperty navigationProperty, out IEnumerator<EdmProperty> fromEnumerator, out IEnumerator<EdmProperty> toEnumerator)
{
    ReferentialConstraint referentialConstraint;
    GetNavigationPropertyReferentialConstraintsEnumerators(navigationProperty, out referentialConstraint, out fromEnumerator, out toEnumerator);
}
public static void GetNavigationPropertyReferentialConstraintsEnumerators(NavigationProperty navigationProperty, out ReferentialConstraint referentialConstraint, out IEnumerator<EdmProperty> fromEnumerator, out IEnumerator<EdmProperty> toEnumerator)
{
    IEnumerable<EdmProperty> fromEnumerable, toEnumerable;
    GetNavigationPropertyReferentialConstraintsEnumerables(navigationProperty, out referentialConstraint, out fromEnumerable, out toEnumerable);
    fromEnumerator = fromEnumerable.GetEnumerator();
    toEnumerator = toEnumerable.GetEnumerator();
}

public static  bool IsStruct(EdmProperty property)
{
    return IsStruct(property.TypeUsage);
}
public static bool IsStruct(TypeUsage type)
{
    switch (type.ToString())
    {
        case "Edm.Byte":
        case "Edm.DateTime":
        case "Edm.DateTimeOffset":
        case "Edm.Time":
        case "Edm.Decimal":
        case "Edm.Double":
        case "Edm.Single":
        case "Edm.Int16":
        case "Edm.Int32":
        case "Edm.Int64":
        case "Edm.SByte":
            return true;
    }
    return false;
}

public static IEnumerable<Tuple<string, string>> GetKeysProperties(CodeGenerationTools code, EntityType entityType, int? index = null)
{
    foreach (var km in entityType.KeyMembers)
    {
        string typeName = code.Escape(km.TypeUsage);
        string key = string.Concat(code.Escape(entityType), index, code.Escape(km));
        yield return new Tuple<string, string>(typeName, key);
    }
} 

public bool HasPublicManyToManyRelationship(EdmxElements edmxElements)
{
    return edmxElements.EntityTypes.Any(e => IsPublic(e) && e.NavigationProperties.Any(np => IsPublic(np) && IsPublic(np) && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many));
}

public IEnumerable<string> WriteKeysTypes(EdmxElements edmxElements, EntityFrameworkTemplateFileManager fileManager, string entitiesNamespace, string edmxName, string relativePath)
{
    fileManager.StartNewFile("Includes.tt");
    string beginTag = "<" + "#";
    string endTag = "#" + ">";
    var edmxUtilityTTIncludeNameValue = edmxUtilityTTIncludeName;
    if (! string.IsNullOrEmpty(relativePath))
        edmxUtilityTTIncludeNameValue = Regex.Replace(edmxUtilityTTIncludeName, @"^((.?)*)\.ttinclude$", m => string.Concat(relativePath, m.Groups[1].Value, ".merge.ttinclude"));
#>
<#="<" + "#@"#> template language="C#" hostspecific="true"<#=endTag#>
<#="<" + "#@"#> include file="<#=edmxUtilityTTIncludeNameValue#>"<#=endTag#>
<#="<" + "#@"#> output extension=".txt"<#=endTag#>
<#=beginTag#>var fileManager = EntityFrameworkTemplateFileManager.Create(this);<#=endTag#>
<#+
    var code = edmxElements.Code;
    var typeNames = new List<string>();
    string @namespace = edmxElements.NamespaceName + ".Query.Include";
    foreach (EntityType entityType in edmxElements.EntityTypes.Where(e => IsPublic(e)))
    {
        string entityTypeName = code.Escape(entityType);
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np) && IsPublic(np) && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
        {
            var typeNameSB = new StringBuilder();
            var properties = new List<Tuple<string, string>>();
            typeNameSB.Append("Include");
            foreach (var p in GetKeysProperties(code, entityType, 1).Union(GetKeysProperties(code, (EntityType)navigationProperty.ToEndMember.GetEntityType(), 2)))
            {
                typeNameSB.Append(p.Item2);
                properties.Add(p);
            }
            string typeName = typeNameSB.ToString();
            if (typeNames.Contains(typeName))
                continue;
            typeNames.Add(typeName);
#>
<#=beginTag#>fileManager.StartNewFile("<#=typeName#>.cs");<#=endTag#>
<#+
            WriteHeader(@namespace, code, "System", "System.Runtime.Serialization");
#>
[DataContract(Namespace = "http://<#=edmxName#>/QueryInclude")]
public class <#=typeName#>
{
<#+
            foreach (var p in properties)
            {
#>
    [DataMember]
    public <#=p.Item1#> <#=p.Item2#> { get; set; }

<#+
            }
#>
}
<#+
            WriteFooter(@namespace);
            yield return typeName;

            var fromProperties = GetKeysProperties(code, entityType).ToList();
            typeNameSB = new StringBuilder();
            typeNameSB.Append("Include");
            foreach (var p in fromProperties)
                typeNameSB.Append(p.Item2);
            typeNameSB.Append("To");
            var toTypeName = code.Escape(navigationProperty.ToEndMember.GetEntityType());
            typeNameSB.Append(toTypeName);
            typeName = typeNameSB.ToString();

#>
<#=beginTag#>fileManager.StartNewFile("<#=typeName + ".cs"#>");<#=endTag#>
<#+
            WriteHeader(@namespace, code, "System", "System.Runtime.Serialization");
#>
[DataContract(Namespace = "http://<#=edmxName#>/QueryInclude")]
public class <#=typeName#>
{
<#+
            foreach (var p in fromProperties)
            {
#>
    [DataMember]
    public <#=p.Item1#> <#=p.Item2#> { get; set; }

<#+
            }
#>
    [DataMember]
    public <#=entitiesNamespace#>.<#=toTypeName#> To { get; set; }
}
<#+
            WriteFooter(@namespace);
            yield return typeName;
        }
    }
#>
<#=beginTag#>fileManager.Process();<#=endTag#>
<#+
}

public static IEnumerable<string> GetKeysTypes(EdmxElements edmxElements)
{
    var code = edmxElements.Code;
    var typeNames = new List<string>();
    foreach (EntityType entityType in edmxElements.EntityTypes.Where(e => IsPublic(e)))
    {
        string entityTypeName = code.Escape(entityType);
        foreach (var navigationProperty in entityType.NavigationProperties.Where(np => IsPublic(np) && IsPublic(np) && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many))
        {
            var typeNameSB = new StringBuilder();
            typeNameSB.Append("Include");
            foreach (var p in GetKeysProperties(code, entityType, 1).Union(GetKeysProperties(code, (EntityType)navigationProperty.ToEndMember.GetEntityType(), 2)))
                typeNameSB.Append(p.Item2);
            string typeName = typeNameSB.ToString();
            if (typeNames.Contains(typeName))
                continue;
            typeNames.Add(typeName);
            yield return typeName;

            var fromProperties = GetKeysProperties(code, entityType).ToList();
            typeNameSB = new StringBuilder();
            typeNameSB.Append("Include");
            foreach (var p in fromProperties)
                typeNameSB.Append(p.Item2);
            typeNameSB.Append("To");
            var toTypeName = code.Escape(navigationProperty.ToEndMember.GetEntityType());
            typeNameSB.Append(toTypeName);
            yield return typeNameSB.ToString();
        }
    }
}

public static class EdmxChanges
{
    public static bool EdmxApplyChanges(string edmxPath, XElement edmx)
    {
        if (File.Exists(edmxPath + ".changes.xml"))
        {
            var changes = XElement.Load(edmxPath + ".changes.xml");
            ApplyChanges(edmx, changes);
            return true;
        }
        return false;
    }

    private static void ApplyChanges(XElement original, XElement change)
    {
        if (original.Name != change.Name || original.Attribute("Name") != null && original.Attribute("Name").Value != change.Attribute("Name").Value)
            throw new NotImplementedException();
        foreach (var addedAttribute in change.Attributes())
        {
            XAttribute originalAttribute = original.Attribute(addedAttribute.Name);
            if (originalAttribute == null)
                original.Add(addedAttribute);
            else
                originalAttribute.Value = addedAttribute.Value;
        }
        foreach (var changesChild in change.Elements())
        {
            var originalChild = original.Elements().FirstOrDefault(o => o.Name == changesChild.Name && (o.Attribute("Name") == null || o.Attribute("Name").Value == changesChild.Attribute("Name").Value));
            if (originalChild == null)
            {
                switch (changesChild.Name.LocalName)
                {
                    case "add":
                        foreach (var changesSubChild in changesChild.Elements())
                            original.Add(changesSubChild);
                        break;
                    case "remove":
                        foreach (var changesSubChild in changesChild.Elements())
                        {
                            originalChild = original.Elements().First(o => o.Name == changesSubChild.Name && (o.Attribute("Name") == null || o.Attribute("Name").Value == changesSubChild.Attribute("Name").Value));
                            originalChild.Remove();
                        }
                        break;
                    case "replace":
                        foreach (var changesSubChild in changesChild.Elements())
                        {
                            originalChild = original.Elements().First(o => o.Name == changesSubChild.Name && (o.Attribute("Name") == null || o.Attribute("Name").Value == changesSubChild.Attribute("Name").Value));
                            originalChild.Remove();
                            original.Add(changesSubChild);
                        }
                        break;
                    default:
                        throw new NotImplementedException();
                }
            }
            else
            {
                ApplyChanges(originalChild, changesChild);
            }
        }
    }
}

void TestKeys(CodeGenerationTools code, EntityType entityType, string e1, string e2, string prefix1 = null, string prefix2 = null)
{
    var keysEnumerator = entityType.KeyMembers.GetEnumerator();
    keysEnumerator.MoveNext();
    for(;;)
    {
        string key = code.Escape(keysEnumerator.Current);
#><#=e1#>.<#=prefix1 ?? ""#><#=key#> == <#=e2#>.<#=prefix2 ?? ""#><#=key#><#+
        if (keysEnumerator.MoveNext())
        {
#> && <#+
        }
        else
            break;		
    }
}


void WriteIncludeTypeKeys(CodeGenerationTools code, EntityType entityType, NavigationProperty navigationProperty)
{
    var entityTypeName = code.Escape(entityType);
    foreach (var km in entityType.KeyMembers)
    {
#><#=entityTypeName#>1<#=code.Escape(km)#><#+
    }
    var toEntityType = navigationProperty.ToEndMember.GetEntityType();
    var toEntityTypeName = code.Escape(toEntityType);
    foreach (var km in toEntityType.KeyMembers)
    {
#><#=toEntityTypeName#>2<#=code.Escape(km)#><#+
    }
}

void WriteIncludeTo(CodeGenerationTools code, EntityType entityType, NavigationProperty navigationProperty)
{
    var entityTypeName = code.Escape(entityType);
    foreach (var km in entityType.KeyMembers)
    {
#><#=entityTypeName#><#=code.Escape(km)#><#+
    }
#>To<#=code.Escape(navigationProperty.ToEndMember.GetEntityType())#><#+
}

void InitKeys(CodeGenerationTools code, EntityType entityType, string e, int? index = null, string prefixName = null)
{
    var keysEnumerator = entityType.KeyMembers.GetEnumerator();
    keysEnumerator.MoveNext();
    for(;;)
    {
        string key = code.Escape(keysEnumerator.Current);
#><#=prefixName ?? ""#><#=index == null ? "" : index.Value.ToString()#><#=key#> = <#=e#>.<#=key#><#+
        if (keysEnumerator.MoveNext())
        {
#>, <#+
        }
        else
            break;		
    }
}

void TestNavigationKeys(CodeGenerationTools code, NavigationProperty navigationProperty, string e1 = "e1", string e2 = "e2")
{
    IEnumerator<EdmProperty> fromEnumerator, toEnumerator;
    ReferentialConstraint referentialConstraint;
    GetNavigationPropertyReferentialConstraintsEnumerators(navigationProperty, out referentialConstraint, out fromEnumerator, out toEnumerator);
    if (referentialConstraint != null)
    {
        bool hasNext = fromEnumerator.MoveNext() & toEnumerator.MoveNext(); 
        while (hasNext)
        {
#><#=e1#>.<#=fromEnumerator.Current#> == <#=e2#>.<#=toEnumerator.Current#><#+
            hasNext = fromEnumerator.MoveNext() & toEnumerator.MoveNext(); 
            if (! hasNext)
                break;
#> && <#+
        }
    }
}
#>
<#+// Copyright (c) Microsoft Corporation.  All rights reserved.

public static Dictionary<string, string> TemplateMetadata = new Dictionary<string, string>();

/// <summary>
/// Responsible for helping to create source code that is
/// correctly formated and functional
/// </summary>
public class CodeGenerationTools
{
	private readonly DynamicTextTransformation _textTransformation;
	private readonly CSharpCodeProvider _code;
	private readonly MetadataTools _ef;

	private CodeGenerationTools()
	{
	}

	/// <summary>
	/// Initializes a new CodeGenerationTools object with the TextTransformation (T4 generated class)
	/// that is currently running
	/// </summary>
	public CodeGenerationTools(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
		_code = new CSharpCodeProvider();
		_ef = new MetadataTools(_textTransformation);
		FullyQualifySystemTypes = false;
		CamelCaseFields = true;
	}

	/// <summary>
	/// When true, all types that are not being generated
	/// are fully qualified to keep them from conflicting with
	/// types that are being generated. Useful when you have
	/// something like a type being generated named System.
	///
	/// Default is false.
	/// </summary>
	public bool FullyQualifySystemTypes { get; set; }

	/// <summary>
	/// When true, the field names are Camel Cased,
	/// otherwise they will preserve the case they
	/// start with.
	///
	/// Default is true.
	/// </summary>
	public bool CamelCaseFields { get; set; }

	/// <summary>
	/// Returns the NamespaceName suggested by VS if running inside VS.  Otherwise, returns
	/// null.
	/// </summary>
	public string VsNamespaceSuggestion()
	{
		string suggestion = _textTransformation.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
		if (String.IsNullOrEmpty(suggestion))
		{
			return null;
		}

		return suggestion;
	}

	/// <summary>
	/// Returns a string that is safe for use as an identifier in C#.
	/// Keywords are escaped.
	/// </summary>
	public string Escape(string name)
	{
		if (name == null)
		{
			return null;
		}

		return _code.CreateEscapedIdentifier(name);
	}

	/// <summary>
	/// Returns the name of the TypeUsage's EdmType that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(TypeUsage typeUsage)
	{
		if (typeUsage == null)
		{
			return null;
		}

		if (typeUsage.EdmType is ComplexType ||
			typeUsage.EdmType is EntityType)
		{
			return Escape(typeUsage.EdmType.Name);
		}
		else if (typeUsage.EdmType is SimpleType)
		{
			Type clrType = _ef.UnderlyingClrType(typeUsage.EdmType);
			string typeName = typeUsage.EdmType is EnumType ? Escape(typeUsage.EdmType.Name) : Escape(clrType);
			if (clrType.IsValueType && _ef.IsNullable(typeUsage))
			{
				return String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName);
			}

			return typeName;
		}
		else if (typeUsage.EdmType is CollectionType)
		{
			return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", Escape(((CollectionType)typeUsage.EdmType).TypeUsage));
		}

		throw new ArgumentException("typeUsage");
	}

	/// <summary>
	/// Returns the name of the EdmMember that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		return Escape(member.Name);
	}

	/// <summary>
	/// Returns the name of the EdmType that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EdmType type)
	{
		if (type == null)
		{
			return null;
		}

		return Escape(type.Name);
	}

	/// <summary>
	/// Returns the name of the EdmFunction that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EdmFunction function)
	{
		if (function == null)
		{
			return null;
		}

		return Escape(function.Name);
	}

	/// <summary>
	/// Returns the name of the EnumMember that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EnumMember member)
	{
		if (member == null)
		{
			return null;
		}

		return Escape(member.Name);
	}

	/// <summary>
	/// Returns the name of the EntityContainer that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EntityContainer container)
	{
		if (container == null)
		{
			return null;
		}

		return Escape(container.Name);
	}

	/// <summary>
	/// Returns the name of the EntitySet that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(EntitySet set)
	{
		if (set == null)
		{
			return null;
		}

		return Escape(set.Name);
	}

	/// <summary>
	/// Returns the name of the StructuralType that is safe for
	/// use as an identifier.
	/// </summary>
	public string Escape(StructuralType type)
	{
		if (type == null)
		{
			return null;
		}

		return Escape(type.Name);
	}

	/// <summary>
	/// Returns the NamespaceName with each segment safe to
	/// use as an identifier.
	/// </summary>
	public string EscapeNamespace(string namespaceName)
	{
		if (String.IsNullOrEmpty(namespaceName))
		{
			return namespaceName;
		}

		string[] parts = namespaceName.Split('.');
		namespaceName = String.Empty;
		foreach (string part in parts)
		{
			if (namespaceName != String.Empty)
			{
				namespaceName += ".";
			}

			namespaceName += Escape(part);
		}

		return namespaceName;
	}

	/// <summary>
	/// Returns the name of the EdmMember formatted for
	/// use as a field identifier.
	///
	/// This method changes behavior based on the CamelCaseFields
	/// setting.
	/// </summary>
	public string FieldName(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		return FieldName(member.Name);
	}

	/// <summary>
	/// Returns the name of the EntitySet formatted for
	/// use as a field identifier.
	///
	/// This method changes behavior based on the CamelCaseFields
	/// setting.
	/// </summary>
	public string FieldName(EntitySet set)
	{
		if (set == null)
		{
			return null;
		}

		return FieldName(set.Name);

	}

	private string FieldName(string name)
	{
		if (CamelCaseFields)
		{
			return "_" + CamelCase(name);
		}
		else
		{
			return "_" + name;
		}
	}

	/// <summary>
	/// Returns the name of the Type object formatted for
	/// use in source code.
	///
	/// This method changes behavior based on the FullyQualifySystemTypes
	/// setting.
	/// </summary>
	public string Escape(Type clrType)
	{
		return Escape(clrType, FullyQualifySystemTypes);
	}

	/// <summary>
	/// Returns the name of the Type object formatted for
	/// use in source code.
	/// </summary>
	public string Escape(Type clrType, bool fullyQualifySystemTypes)
	{
		if(clrType == null)
		{
			return null;
		}

		string typeName;
		if (fullyQualifySystemTypes)
		{
			typeName = "global::" + clrType.FullName;
		}
		else
		{
			typeName = _code.GetTypeOutput(new CodeTypeReference(clrType));
		}
		return typeName;
	}

	/// <summary>
	/// Returns the abstract option if the entity is Abstract, otherwise returns String.Empty
	/// </summary>
	public string AbstractOption(EntityType entity)
	{
		if (entity.Abstract)
		{
			return "abstract";
		}
		return String.Empty;
	}

	/// <summary>
	/// Returns the passed in identifier with the first letter changed to lowercase
	/// </summary>
	public string CamelCase(string identifier)
	{
		if (String.IsNullOrEmpty(identifier))
		{
			return identifier;
		}

		if (identifier.Length == 1)
		{
			return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant();
		}

		return identifier[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + identifier.Substring(1);
	}

	/// <summary>
	/// If the value parameter is null or empty an empty string is returned,
	/// otherwise it retuns value with a single space concatenated on the end.
	/// </summary>
	public string SpaceAfter(string value)
	{
		return StringAfter(value, " ");
	}

	/// <summary>
	/// If the value parameter is null or empty an empty string is returned,
	/// otherwise it retuns value with a single space concatenated on the end.
	/// </summary>
	public string SpaceBefore(string value)
	{
		return StringBefore(" ", value);
	}

	/// <summary>
	/// If the value parameter is null or empty an empty string is returned,
	/// otherwise it retuns value with append concatenated on the end.
	/// </summary>
	public string StringAfter(string value, string append)
	{
		if (String.IsNullOrEmpty(value))
		{
			return String.Empty;
		}

			return value + append;
	}

	/// <summary>
	/// If the value parameter is null or empty an empty string is returned,
	/// otherwise it retuns value with prepend concatenated on the front.
	/// </summary>
	public string StringBefore(string prepend, string value)
	{
		if (String.IsNullOrEmpty(value))
		{
			return String.Empty;
		}

		return prepend + value;
	}

	/// <summary>
	/// Returns false and shows an error if the supplied type names aren't case-insensitively unique,
	/// otherwise returns true.
	/// </summary>
	public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
	{
		return VerifyCaseInsensitiveUniqueness(types, t => string.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"), t), sourceFile);
	}

	/// <summary>
	/// Returns false and shows an error if the supplied strings aren't case-insensitively unique,
	/// otherwise returns true.
	/// </summary>
	private bool VerifyCaseInsensitiveUniqueness(IEnumerable<string> items, Func<string, string> formatMessage, string sourceFile)
	{
		HashSet<string> hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
		foreach (string item in items)
		{
			if (!hash.Add(item))
			{
				_textTransformation.Errors.Add(new System.CodeDom.Compiler.CompilerError(sourceFile, -1, -1, "6023", formatMessage(item)));
				return false;
			}
		}
		return true;
	}

	/// <summary>
	/// Returns the names of the items in the supplied collection that correspond to O-Space types.
	/// </summary>
	public IEnumerable<string> GetAllGlobalItems(EdmItemCollection itemCollection)
	{
		return itemCollection.GetItems<GlobalItem>().Where(i => i is EntityType || i is ComplexType || i is EnumType || i is EntityContainer).Select(g => GetGlobalItemName(g));
	}

	/// <summary>
	/// Returns the name of the supplied GlobalItem.
	/// </summary>
	public string GetGlobalItemName(GlobalItem item)
	{
		if (item is EdmType)
		{
			return ((EdmType)item).Name;
		}
		else
		{
			return ((EntityContainer)item).Name;
		}
	}

	/// <summary>
	/// Retuns as full of a name as possible, if a namespace is provided
	/// the namespace and name are combined with a period, otherwise just
	/// the name is returned.
	/// </summary>
	public string CreateFullName(string namespaceName, string name)
	{
		if (String.IsNullOrEmpty(namespaceName))
		{
			return name;
		}

		return namespaceName + "." + name;
	}

	/// <summary>
	/// Retuns a literal representing the supplied value.
	/// </summary>
	public string CreateLiteral(object value)
	{
		if (value == null)
		{
			return string.Empty;
		}

		Type type = value.GetType();
		if (type.IsEnum)
		{
			return type.FullName + "." + value.ToString();
		}
		if (type == typeof(Guid))
		{
			return string.Format(CultureInfo.InvariantCulture, "new Guid(\"{0}\")",
								 ((Guid)value).ToString("D", CultureInfo.InvariantCulture));
		}
		else if (type == typeof(DateTime))
		{
			return string.Format(CultureInfo.InvariantCulture, "new DateTime({0}, DateTimeKind.Unspecified)",
								 ((DateTime)value).Ticks);
		}
		else if (type == typeof(byte[]))
		{
			var arrayInit = string.Join(", ", ((byte[])value).Select(b => b.ToString(CultureInfo.InvariantCulture)).ToArray());
			return string.Format(CultureInfo.InvariantCulture, "new Byte[] {{{0}}}", arrayInit);
		}
		else if (type == typeof(DateTimeOffset))
		{
			var dto = (DateTimeOffset)value;
			return string.Format(CultureInfo.InvariantCulture, "new DateTimeOffset({0}, new TimeSpan({1}))",
								 dto.Ticks, dto.Offset.Ticks);
		}
		else if (type == typeof(TimeSpan))
		{
			return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})",
								 ((TimeSpan)value).Ticks);
		}

		var expression = new CodePrimitiveExpression(value);
		var writer = new StringWriter();
		CSharpCodeProvider code = new CSharpCodeProvider();
		code.GenerateCodeFromExpression(expression, writer, new CodeGeneratorOptions());
		return writer.ToString();
	}

	/// <summary>
	/// Returns a resource string from the System.Data.Entity.Design assembly.
	/// </summary>
	public static string GetResourceString(string resourceName, CultureInfo culture = null)
	{
		if(_resourceManager == null)
		{
			_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design",
				typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
		}

		return _resourceManager.GetString(resourceName, culture);
	}
	static System.Resources.ResourceManager _resourceManager;

	private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

	/// <summary>
	/// Gets the entity, complex, or enum types for which code should be generated from the given item collection.
	/// Any types for which an ExternalTypeName annotation has been applied in the conceptual model
	/// metadata (CSDL) are filtered out of the returned list.
	/// </summary>
	/// <typeparam name="T">The type of item to return.</typeparam>
	/// <param name="itemCollection">The item collection to look in.</param>
	/// <returns>The items to generate.</returns>
	public IEnumerable<T> GetItemsToGenerate<T>(ItemCollection itemCollection) where T: GlobalItem
	{
		return itemCollection.GetItems<T>().Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName));
	}

	/// <summary>
	/// Returns the escaped type name to use for the given usage of a c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="typeUsage">The c-space type usage to get a name for.</param>
	/// <returns>The type name to use.</returns>
	public string GetTypeName(TypeUsage typeUsage)
	{
		return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
	}

	/// <summary>
	/// Returns the escaped type name to use for the given c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="edmType">The c-space type to get a name for.</param>
	/// <returns>The type name to use.</returns>
	public string GetTypeName(EdmType edmType)
	{
		return GetTypeName(edmType, isNullable: null, modelNamespace: null);
	}

	/// <summary>
	/// Returns the escaped type name to use for the given usage of an c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="typeUsage">The c-space type usage to get a name for.</param>
	/// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
	/// fully qualified name will be returned.</param>
	/// <returns>The type name to use.</returns>
	public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
	{
		return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
	}

	/// <summary>
	/// Returns the escaped type name to use for the given c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="edmType">The c-space type to get a name for.</param>
	/// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
	/// fully qualified name will be returned.</param>
	/// <returns>The type name to use.</returns>
	public string GetTypeName(EdmType edmType, string modelNamespace)
	{
		return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
	}

	/// <summary>
	/// Returns the escaped type name to use for the given c-space type in o-space. This might be
	/// an external type name if the ExternalTypeName annotation has been specified in the
	/// conceptual model metadata (CSDL).
	/// </summary>
	/// <param name="edmType">The c-space type to get a name for.</param>
	/// <param name="isNullable">Set this to true for nullable usage of this type.</param>
	/// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
	/// fully qualified name will be returned.</param>
	/// <returns>The type name to use.</returns>
	private string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
	{
		if (edmType == null)
		{
			return null;
		}

		var collectionType = edmType as CollectionType;
		if (collectionType != null)
		{
			return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
		}

		// Try to get an external type name, and if that is null, then try to get escape the name from metadata,
		// possibly namespace-qualifying it.
		var typeName = Escape(edmType.MetadataProperties
							  .Where(p => p.Name == ExternalTypeNameAttributeName)
							  .Select(p => (string)p.Value)
							  .FirstOrDefault())
			??
			(modelNamespace != null && edmType.NamespaceName != modelNamespace ?
			 CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)) :
			 Escape(edmType));

		if (edmType is StructuralType)
		{
			return typeName;
		}

		if (edmType is SimpleType)
		{
			var clrType = _ef.UnderlyingClrType(edmType);
			if (!(edmType is EnumType))
			{
				typeName = Escape(clrType);
			}

			return clrType.IsValueType && isNullable == true ?
				String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
				typeName;
		}

		throw new ArgumentException("typeUsage");
	}
}

/// <summary>
/// Responsible for making the Entity Framework Metadata more
/// accessible for code generation.
/// </summary>
public class MetadataTools
{
	private readonly DynamicTextTransformation _textTransformation;

	private MetadataTools()
	{
	}

	/// <summary>
	/// Initializes an MetadataTools Instance  with the
	/// TextTransformation (T4 generated class) that is currently running
	/// </summary>
	public MetadataTools(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
	}

	/// <summary>
	/// This method returns the underlying CLR type of the o-space type corresponding to the supplied <paramref name="typeUsage"/>
	/// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
	/// </summary>
	public Type ClrType(TypeUsage typeUsage)
	{
		return UnderlyingClrType(typeUsage.EdmType);
	}

	/// <summary>
	/// This method returns the underlying CLR type given the c-space type.
	/// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
	/// </summary>
	public Type UnderlyingClrType(EdmType edmType)
	{
		var primitiveType = edmType as PrimitiveType;
		if (primitiveType != null)
		{
			return primitiveType.ClrEquivalentType;
		}

		var enumType = edmType as EnumType;
		if (enumType != null)
		{
			return enumType.UnderlyingType.ClrEquivalentType;
		}

		return typeof(object);
	}

	/// <summary>
	/// True if the EdmProperty is a key of its DeclaringType, False otherwise.
	/// </summary>
	public bool IsKey(EdmProperty property)
	{
		if (property != null && property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
		{
			return ((EntityType)property.DeclaringType).KeyMembers.Contains(property);
		}

		return false;
	}

	/// <summary>
	/// True if the EdmProperty TypeUsage is Nullable, False otherwise.
	/// </summary>
	public bool IsNullable(EdmProperty property)
	{
		return property != null && IsNullable(property.TypeUsage);
	}

	/// <summary>
	/// True if the TypeUsage is Nullable, False otherwise.
	/// </summary>
	public bool IsNullable(TypeUsage typeUsage)
	{
		Facet nullableFacet = null;
		if (typeUsage != null &&
			typeUsage.Facets.TryGetValue("Nullable", true, out nullableFacet))
		{
			return (bool)nullableFacet.Value;
		}

		return false;
	}

	/// <summary>
	/// If the passed in TypeUsage represents a collection this method returns final element
	/// type of the collection, otherwise it returns the value passed in.
	/// </summary>
	public TypeUsage GetElementType(TypeUsage typeUsage)
	{
		if (typeUsage == null)
		{
			return null;
		}

		if (typeUsage.EdmType is CollectionType)
		{
			return GetElementType(((CollectionType)typeUsage.EdmType).TypeUsage);
		}
		else
		{
			return typeUsage;
		}
	}

	/// <summary>
	/// Returns the NavigationProperty that is the other end of the same association set if it is
	/// available, otherwise it returns null.
	/// </summary>
	public NavigationProperty Inverse(NavigationProperty navProperty)
	{
		if(navProperty == null)
		{
			return null;
		}

		EntityType toEntity = navProperty.ToEndMember.GetEntityType();
		return toEntity.NavigationProperties
			.SingleOrDefault(n => Object.ReferenceEquals(n.RelationshipType, navProperty.RelationshipType) && !Object.ReferenceEquals(n, navProperty));
	}

	/// <summary>
	/// Given a property on the dependent end of a referential constraint, returns the corresponding property on the principal end.
	/// Requires: The association has a referential constraint, and the specified dependentProperty is one of the properties on the dependent end.
	/// </summary>
	public EdmProperty GetCorrespondingPrincipalProperty(NavigationProperty navProperty, EdmProperty dependentProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		if (dependentProperty == null)
		{
			throw new ArgumentNullException("dependentProperty");
		}

		ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
		ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
		return fromProperties[toProperties.IndexOf(dependentProperty)];
	}

	/// <summary>
	/// Given a property on the principal end of a referential constraint, returns the corresponding property on the dependent end.
	/// Requires: The association has a referential constraint, and the specified principalProperty is one of the properties on the principal end.
	/// </summary>
	public EdmProperty GetCorrespondingDependentProperty(NavigationProperty navProperty, EdmProperty principalProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		if (principalProperty == null)
		{
			throw new ArgumentNullException("principalProperty");
		}

		ReadOnlyMetadataCollection<EdmProperty> fromProperties = GetPrincipalProperties(navProperty);
		ReadOnlyMetadataCollection<EdmProperty> toProperties = GetDependentProperties(navProperty);
		return toProperties[fromProperties.IndexOf(principalProperty)];
	}

	/// <summary>
	/// Gets the collection of properties that are on the principal end of a referential constraint for the specified navigation property.
	/// Requires: The association has a referential constraint.
	/// </summary>
	public ReadOnlyMetadataCollection<EdmProperty> GetPrincipalProperties(NavigationProperty navProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].FromProperties;
	}

	/// <summary>
	/// Gets the collection of properties that are on the dependent end of a referential constraint for the specified navigation property.
	/// Requires: The association has a referential constraint.
	/// </summary>
	public ReadOnlyMetadataCollection<EdmProperty> GetDependentProperties(NavigationProperty navProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		return ((AssociationType)navProperty.RelationshipType).ReferentialConstraints[0].ToProperties;
	}

	/// <summary>
	/// True if this entity type requires the HandleCascadeDelete method defined and the method has
	/// not been defined on any base type
	/// </summary>
	public bool NeedsHandleCascadeDeleteMethod(ItemCollection itemCollection, EntityType entity)
	{
		bool needsMethod = ContainsCascadeDeleteAssociation(itemCollection, entity);
		// Check to make sure no base types have already declared this method
		EntityType baseType = entity.BaseType as EntityType;
		while(needsMethod && baseType != null)
		{
			needsMethod = !ContainsCascadeDeleteAssociation(itemCollection, baseType);
			baseType = baseType.BaseType as EntityType;
		}
		return needsMethod;
	}

	/// <summary>
	/// True if this entity type participates in any relationships where the other end has an OnDelete
	/// cascade delete defined, or if it is the dependent in any identifying relationships
	/// </summary>
	private bool ContainsCascadeDeleteAssociation(ItemCollection itemCollection, EntityType entity)
	{
		return itemCollection.GetItems<AssociationType>().Where(a =>
				((RefType)a.AssociationEndMembers[0].TypeUsage.EdmType).ElementType.Name == entity.Name && IsCascadeDeletePrincipal(a.AssociationEndMembers[1]) ||
				((RefType)a.AssociationEndMembers[1].TypeUsage.EdmType).ElementType.Name == entity.Name && IsCascadeDeletePrincipal(a.AssociationEndMembers[0])).Any();
	}

	/// <summary>
	/// True if the source end of the specified navigation property is the principal in an identifying relationship.
	/// or if the source end has cascade delete defined.
	/// </summary>
	public bool IsCascadeDeletePrincipal(NavigationProperty navProperty)
	{
		if (navProperty == null)
		{
			throw new ArgumentNullException("navProperty");
		}

		return IsCascadeDeletePrincipal((AssociationEndMember)navProperty.FromEndMember);
	}

	/// <summary>
	/// True if the specified association end is the principal in an identifying relationship.
	/// or if the association end has cascade delete defined.
	/// </summary>
	public bool IsCascadeDeletePrincipal(AssociationEndMember associationEnd)
	{
		if (associationEnd == null)
		{
			throw new ArgumentNullException("associationEnd");
		}

		return associationEnd.DeleteBehavior == OperationAction.Cascade || IsPrincipalEndOfIdentifyingRelationship(associationEnd);
	}

	/// <summary>
	/// True if the specified association end is the principal end in an identifying relationship.
	/// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
	/// </summary>
	public bool IsPrincipalEndOfIdentifyingRelationship(AssociationEndMember associationEnd)
	{
		if (associationEnd == null)
		{
			throw new ArgumentNullException("associationEnd");
		}

		ReferentialConstraint refConstraint = ((AssociationType)associationEnd.DeclaringType).ReferentialConstraints.Where(rc => rc.FromRole == associationEnd).SingleOrDefault();
		if (refConstraint != null)
		{
			EntityType entity = refConstraint.ToRole.GetEntityType();
			return !refConstraint.ToProperties.Where(tp => !entity.KeyMembers.Contains(tp)).Any();
		}
		return false;
	}

	/// <summary>
	/// True if the specified association type is an identifying relationship.
	/// In order to be an identifying relationship, the association must have a referential constraint where all of the dependent properties are part of the dependent type's primary key.
	/// </summary>
	public bool IsIdentifyingRelationship(AssociationType association)
	{
		if (association == null)
		{
			throw new ArgumentNullException("association");
		}

		return IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[0]) || IsPrincipalEndOfIdentifyingRelationship(association.AssociationEndMembers[1]);
	}

	/// <summary>
	/// requires: firstType is not null
	/// effects: if secondType is among the base types of the firstType, return true,
	/// otherwise returns false.
	/// when firstType is same as the secondType, return false.
	/// </summary>
	public bool IsSubtypeOf(EdmType firstType, EdmType secondType)
	{
		if (secondType == null)
		{
			return false;
		}

		// walk up firstType hierarchy list
		for (EdmType t = firstType.BaseType; t != null; t = t.BaseType)
		{
			if (t == secondType)
				return true;
		}
		return false;
	}

	/// <summary>
	/// Returns the subtype of the EntityType in the current itemCollection
	/// </summary>
	public IEnumerable<EntityType> GetSubtypesOf(EntityType type, ItemCollection itemCollection, bool includeAbstractTypes)
	{
		if (type != null)
		{
			IEnumerable<EntityType> typesInCollection = itemCollection.GetItems<EntityType>();
			foreach (EntityType typeInCollection in typesInCollection)
			{
				if (type.Equals(typeInCollection) == false && this.IsSubtypeOf(typeInCollection, type))
				{
					if ( includeAbstractTypes || !typeInCollection.Abstract)
					{
						yield return typeInCollection;
					}
			   }
			}
		}
	}

	public static bool TryGetStringMetadataPropertySetting(MetadataItem item, string propertyName, out string value)
	{
		value = null;
		MetadataProperty property = item.MetadataProperties.FirstOrDefault(p => p.Name == propertyName);
		if (property != null)
		{
			value = (string)property.Value;
		}
		return value != null;
	}
}

/// <summary>
/// Responsible for loading an EdmItemCollection from a .edmx file or .csdl files
/// </summary>
public class MetadataLoader
{
	private readonly DynamicTextTransformation _textTransformation;

	private MetadataLoader()
	{
	}

	/// <summary>
	/// Initializes an MetadataLoader Instance  with the
	/// TextTransformation (T4 generated class) that is currently running
	/// </summary>
	public MetadataLoader(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
	}

	/// <summary>
	/// Load the metadata for Edm, Store, and Mapping collections and register them
	/// with a new MetadataWorkspace, returns false if any of the parts can't be
	/// created, some of the ItemCollections may be registered and usable even if false is
	/// returned
	/// </summary>
	public bool TryLoadAllMetadata(string inputFile, out MetadataWorkspace metadataWorkspace)
	{
		metadataWorkspace = new MetadataWorkspace();

		EdmItemCollection edmItemCollection = CreateEdmItemCollection(inputFile);
		metadataWorkspace.RegisterItemCollection(edmItemCollection);

		StoreItemCollection storeItemCollection = null;
		if (TryCreateStoreItemCollection(inputFile, out storeItemCollection))
		{
			StorageMappingItemCollection storageMappingItemCollection = null;
			if (TryCreateStorageMappingItemCollection(inputFile, edmItemCollection, storeItemCollection, out storageMappingItemCollection))
			{
				metadataWorkspace.RegisterItemCollection(storeItemCollection);
				metadataWorkspace.RegisterItemCollection(storageMappingItemCollection);
				return true;
			}
		}

		return false;
	}

	/// <summary>
	/// Create an EdmItemCollection loaded with the metadata provided
	/// </summary>
	public EdmItemCollection CreateEdmItemCollection(string sourcePath, params string[] referenceSchemas)
	{
		EdmItemCollection edmItemCollection;
		if(TryCreateEdmItemCollection(sourcePath, referenceSchemas, out edmItemCollection))
		{
			return edmItemCollection;
		}

		return new EdmItemCollection();
	}

	/// <summary>
	/// Attempts to create a EdmItemCollection from the specified metadata file
	/// </summary>
	public bool TryCreateEdmItemCollection(string sourcePath, out EdmItemCollection edmItemCollection)
	{
		return TryCreateEdmItemCollection(sourcePath, null, out edmItemCollection);
	}

	/// <summary>
	/// Attempts to create a EdmItemCollection from the specified metadata file
	/// </summary>
	public bool TryCreateEdmItemCollection(string sourcePath, string[] referenceSchemas, out EdmItemCollection edmItemCollection)
	{
		edmItemCollection = null;

		if (!ValidateInputPath(sourcePath, _textTransformation))
		{
			return false;
		}

		if (referenceSchemas == null)
		{
			referenceSchemas = new string[0];
		}

		ItemCollection itemCollection = null;
		sourcePath = _textTransformation.Host.ResolvePath(sourcePath);
		EdmItemCollectionBuilder collectionBuilder = new EdmItemCollectionBuilder(_textTransformation, referenceSchemas.Select(s => _textTransformation.Host.ResolvePath(s)).Where(s => s != sourcePath));
		if (collectionBuilder.TryCreateItemCollection(sourcePath, out itemCollection))
		{
			edmItemCollection = (EdmItemCollection)itemCollection;
		}

		return edmItemCollection != null;
	}

	/// <summary>
	/// Attempts to create a StoreItemCollection from the specified metadata file
	/// </summary>
	public bool TryCreateStoreItemCollection(string sourcePath, out StoreItemCollection storeItemCollection)
	{
		storeItemCollection = null;

		if (!ValidateInputPath(sourcePath, _textTransformation))
		{
			return false;
		}

		ItemCollection itemCollection = null;
		StoreItemCollectionBuilder collectionBuilder = new StoreItemCollectionBuilder(_textTransformation);
		if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
		{
			storeItemCollection = (StoreItemCollection)itemCollection;
		}
		return storeItemCollection != null;
	}

	/// <summary>
	/// Attempts to create a StorageMappingItemCollection from the specified metadata file, EdmItemCollection, and StoreItemCollection
	/// </summary>
	public bool TryCreateStorageMappingItemCollection(string sourcePath, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection, out StorageMappingItemCollection storageMappingItemCollection)
	{
		storageMappingItemCollection = null;

		if (!ValidateInputPath(sourcePath, _textTransformation))
		{
			return false;
		}

		if (edmItemCollection == null)
		{
			throw new ArgumentNullException("edmItemCollection");
		}

		if (storeItemCollection == null)
		{
			throw new ArgumentNullException("storeItemCollection");
		}

		ItemCollection itemCollection = null;
		StorageMappingItemCollectionBuilder collectionBuilder = new StorageMappingItemCollectionBuilder(_textTransformation, edmItemCollection, storeItemCollection);
		if (collectionBuilder.TryCreateItemCollection(_textTransformation.Host.ResolvePath(sourcePath), out itemCollection))
		{
			storageMappingItemCollection = (StorageMappingItemCollection)itemCollection;
		}
		return storageMappingItemCollection != null;
	}

	/// <summary>
	/// Gets the Model Namespace from the provided schema file.
	/// </summary>
	public string GetModelNamespace(string sourcePath)
	{
		if (!ValidateInputPath(sourcePath, _textTransformation))
		{
			return String.Empty;
		}

		EdmItemCollectionBuilder builder = new EdmItemCollectionBuilder(_textTransformation);
		XElement model;
		if(builder.TryLoadRootElement(_textTransformation.Host.ResolvePath(sourcePath), out model))
		{
			XAttribute attribute = model.Attribute("Namespace");
			if (attribute != null)
			{
				return attribute.Value;
			}
		}

		return String.Empty;
	}

	/// <summary>
	/// Returns true if the specified file path is valid
	/// </summary>
	private static bool ValidateInputPath(string sourcePath, DynamicTextTransformation textTransformation)
	{
		if (String.IsNullOrEmpty(sourcePath))
		{
			throw new ArgumentException("sourcePath");
		}

		if(sourcePath == "$edmxInputFile$")
		{
			textTransformation.Errors.Add(new CompilerError(textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), 0, 0, string.Empty,
				CodeGenerationTools.GetResourceString("Template_ReplaceVsItemTemplateToken")));
			return false;
		}

		return true;
	}

	/// <summary>
	/// Base class for ItemCollectionBuilder classes that
	/// loads the specific types of metadata
	/// </summary>
	private abstract class ItemCollectionBuilder
	{
		private readonly DynamicTextTransformation _textTransformation;
		private readonly string _fileExtension;
		private readonly string _edmxSectionName;
		private readonly string  _rootElementName;

		/// <summary>
		/// FileExtension for individual (non-edmx) metadata file for this
		/// specific ItemCollection type
		/// </summary>
		public string FileExtension
		{
			get { return _fileExtension; }
		}

		/// <summary>
		/// The name of the XmlElement in the .edmx <Runtime> element
		/// to find this ItemCollection's metadata
		/// </summary>
		public string EdmxSectionName
		{
			get { return _edmxSectionName; }
		}

		/// <summary>
		/// The name of the root element of this ItemCollection's metadata
		/// </summary>
		public string RootElementName
		{
			get { return _rootElementName; }
		}

		/// <summary>
		/// Method to build the appropriate ItemCollection
		/// </summary>
		protected abstract ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors);

		/// <summary>
		/// Ctor to setup the ItemCollectionBuilder members
		/// </summary>
		protected ItemCollectionBuilder(DynamicTextTransformation textTransformation, string fileExtension, string edmxSectionName, string rootElementName)
		{
			_textTransformation = textTransformation;
			_fileExtension = fileExtension;
			_edmxSectionName = edmxSectionName;
			_rootElementName = rootElementName;
		}

		/// <summary>
		/// Selects a namespace from the supplied constants.
		/// </summary>
		protected abstract string GetNamespace(SchemaConstants constants);

		/// <summary>
		/// Try to create an ItemCollection loaded with the metadata provided
		/// </summary>
		public bool TryCreateItemCollection(string sourcePath, out ItemCollection itemCollection)
		{
			itemCollection = null;

			if (!ValidateInputPath(sourcePath, _textTransformation))
			{
				return false;
			}

			XElement schemaElement = null;
			if (TryLoadRootElement(sourcePath, out schemaElement))
			{
				List<XmlReader> readers = new List<XmlReader>();
				try
				{
					var providerManifestToken = schemaElement.Attribute("ProviderManifestToken");
					int providerManifestTokenValue;
					if (providerManifestToken != null && int.TryParse(providerManifestToken.Value, out providerManifestTokenValue) && providerManifestTokenValue > 2008)
						providerManifestToken.Value = "2008";
					readers.Add(schemaElement.CreateReader());
					IList<EdmSchemaError> errors = null;

					ItemCollection tempItemCollection = CreateItemCollection(readers, out errors);
					if (ProcessErrors(errors, sourcePath))
					{
						return false;
					}

					itemCollection = tempItemCollection;
					return true;
				}
				finally
				{
					foreach (XmlReader reader in readers)
					{
						((IDisposable)reader).Dispose();
					}
				}
			}

			return false;
		}

		/// <summary>
		/// Tries to load the root element from the metadata file provided
		/// </summary>
		public bool TryLoadRootElement(string sourcePath, out XElement schemaElement)
		{
			schemaElement = null;
			string extension = Path.GetExtension(sourcePath);
			if (extension.Equals(".edmx", StringComparison.InvariantCultureIgnoreCase))
			{
				return TryLoadRootElementFromEdmx(sourcePath, out schemaElement);
			}
			else if(extension.Equals(FileExtension, StringComparison.InvariantCultureIgnoreCase))
			{
				// load from single metadata file (.csdl, .ssdl, or .msl)
				schemaElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
				return true;
			}

			return false;
		}

		/// <summary>
		/// Tries to load the root element from the provided edmxDocument
		/// </summary>
		private bool TryLoadRootElementFromEdmx(XElement edmxDocument, SchemaConstants schemaConstants, string sectionName, string rootElementName, out XElement rootElement)
		{
			rootElement = null;

			XNamespace edmxNs = schemaConstants.EdmxNamespace;
			XNamespace sectionNs = GetNamespace(schemaConstants);

			XElement runtime = edmxDocument.Element(edmxNs  + "Runtime");
			if (runtime == null)
			{
				return false;
			}

			XElement section = runtime.Element(edmxNs + sectionName);
			if (section == null)
			{
				return false;
			}

			string templateVersion;

			if (!TemplateMetadata.TryGetValue(MetadataConstants.TT_TEMPLATE_VERSION, out templateVersion))
			{
				templateVersion = MetadataConstants.DEFAULT_TEMPLATE_VERSION;
			}

			if (schemaConstants.MinimumTemplateVersion > new Version(templateVersion))
			{
				_textTransformation.Errors.Add(new CompilerError(
					_textTransformation.Host.TemplateFile ?? CodeGenerationTools.GetResourceString("Template_CurrentlyRunningTemplate"), 0, 0, string.Empty,
						CodeGenerationTools.GetResourceString("Template_UnsupportedSchema"))
				{IsWarning = true});
			}

			rootElement = section.Element(sectionNs + rootElementName);
			return rootElement != null;
		}

		/// <summary>
		/// Tries to load the root element from the provided .edmx metadata file
		/// </summary>
		private bool TryLoadRootElementFromEdmx(string edmxPath, out XElement rootElement)
		{
			rootElement = null;

			XElement element = XElement.Load(edmxPath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);

			EdmxChanges.EdmxApplyChanges(edmxPath, element);

			return TryLoadRootElementFromEdmx(element, MetadataConstants.V3_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
				|| TryLoadRootElementFromEdmx(element, MetadataConstants.V2_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement)
				|| TryLoadRootElementFromEdmx(element, MetadataConstants.V1_SCHEMA_CONSTANTS, EdmxSectionName, RootElementName, out rootElement);
		}

		/// <summary>
		/// Takes an Enumerable of EdmSchemaErrors, and adds them
		/// to the errors collection of the template class
		/// </summary>
		private bool ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
		{
			bool foundErrors = false;
			foreach (EdmSchemaError error in errors)
			{
				CompilerError newError = new CompilerError(error.SchemaLocation, error.Line, error.Column,
												 error.ErrorCode.ToString(CultureInfo.InvariantCulture),
												 error.Message);
				newError.IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning;
				foundErrors |= error.Severity == EdmSchemaErrorSeverity.Error;
				if (error.SchemaLocation == null)
				{
					newError.FileName = sourceFilePath;
				}
				_textTransformation.Errors.Add(newError);
			}

			return foundErrors;
		}
	}

	/// <summary>
	/// Builder class for creating a StorageMappingItemCollection
	/// </summary>
	private class StorageMappingItemCollectionBuilder : ItemCollectionBuilder
	{
		private readonly EdmItemCollection _edmItemCollection;
		private readonly StoreItemCollection _storeItemCollection;

		public StorageMappingItemCollectionBuilder(DynamicTextTransformation textTransformation, EdmItemCollection edmItemCollection, StoreItemCollection storeItemCollection)
			: base(textTransformation, MetadataConstants.MSL_EXTENSION, MetadataConstants.MSL_EDMX_SECTION_NAME, MetadataConstants.MSL_ROOT_ELEMENT_NAME)
		{
			_edmItemCollection = edmItemCollection;
			_storeItemCollection = storeItemCollection;
		}

		protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
		{
			return MetadataItemCollectionFactory.CreateStorageMappingItemCollection(_edmItemCollection, _storeItemCollection, readers, out errors);
		}

		/// <summary>
		/// Selects a namespace from the supplied constants.
		/// </summary>
		protected override string GetNamespace(SchemaConstants constants)
		{
			return constants.MslNamespace;
		}
	}

	/// <summary>
	/// Builder class for creating a StoreItemCollection
	/// </summary>
	private class StoreItemCollectionBuilder : ItemCollectionBuilder
	{
		public StoreItemCollectionBuilder(DynamicTextTransformation textTransformation)
			: base(textTransformation, MetadataConstants.SSDL_EXTENSION, MetadataConstants.SSDL_EDMX_SECTION_NAME, MetadataConstants.SSDL_ROOT_ELEMENT_NAME)
		{
		}

		protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
		{
			return MetadataItemCollectionFactory.CreateStoreItemCollection(readers, out errors);
		}

		/// <summary>
		/// Selects a namespace from the supplied constants.
		/// </summary>
		protected override string GetNamespace(SchemaConstants constants)
		{
			return constants.SsdlNamespace;
		}
	}

	/// <summary>
	/// Builder class for creating a EdmItemCollection
	/// </summary>
	private class EdmItemCollectionBuilder : ItemCollectionBuilder
	{
		private List<string> _referenceSchemas = new List<string>();

		public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation)
			: base(textTransformation, MetadataConstants.CSDL_EXTENSION, MetadataConstants.CSDL_EDMX_SECTION_NAME, MetadataConstants.CSDL_ROOT_ELEMENT_NAME)
		{
		}

		public EdmItemCollectionBuilder(DynamicTextTransformation textTransformation, IEnumerable<string> referenceSchemas)
			: this(textTransformation)
		{
			_referenceSchemas.AddRange(referenceSchemas);
		}

		protected override ItemCollection CreateItemCollection(IEnumerable<XmlReader> readers, out IList<EdmSchemaError> errors)
		{
			List<XmlReader> ownedReaders = new List<XmlReader>();
			List<XmlReader> allReaders = new List<XmlReader>();
			try
			{
				allReaders.AddRange(readers);
				foreach (string path in _referenceSchemas.Distinct())
				{
					XElement reference;
					if(TryLoadRootElement(path, out reference))
					{
						XmlReader reader = reference.CreateReader();
						allReaders.Add(reader);
						ownedReaders.Add(reader);
					}
				}

				return MetadataItemCollectionFactory.CreateEdmItemCollection(allReaders, out errors);
			}
			finally
			{
				foreach (XmlReader reader in ownedReaders)
				{
					((IDisposable)reader).Dispose();
				}
			}
		}

		/// <summary>
		/// Selects a namespace from the supplied constants.
		/// </summary>
		protected override string GetNamespace(SchemaConstants constants)
		{
			return constants.CsdlNamespace;
		}
	}
}

/// <summary>
/// Responsible for encapsulating the retrieval and translation of the CodeGeneration
/// annotations in the EntityFramework Metadata to a form that is useful in code generation.
/// </summary>
public static class Accessibility
{
	private const string GETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:GetterAccess";
	private const string SETTER_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:SetterAccess";
	private const string TYPE_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:TypeAccess";
	private const string METHOD_ACCESS = "http://schemas.microsoft.com/ado/2006/04/codegeneration:MethodAccess";
	private const string ACCESS_PROTECTED = "Protected";
	private const string ACCESS_INTERNAL = "Internal";
	private const string ACCESS_PRIVATE = "Private";
	private static readonly Dictionary<string, int> AccessibilityRankIdLookup = new Dictionary<string, int>
		{
			{ "private", 1},
			{ "internal", 2},
			{ "protected", 3},
			{ "public", 4},
		};

	/// <summary>
	/// Gets the accessibility that should be applied to a type being generated from the provided GlobalItem.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForType(GlobalItem item)
	{
		if (item == null)
		{
			return null;
		}

		return GetAccessibility(item, TYPE_ACCESS);
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the property level for a property being
	/// generated from the provided EdmMember.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForProperty(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		string getterAccess, setterAccess, propertyAccess;
		CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
		return propertyAccess;
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the property level for a Read-Only property being
	/// generated from the provided EdmMember.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForReadOnlyProperty(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		return GetAccessibility(member, GETTER_ACCESS);
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the property level for a property being
	/// generated from the provided EntitySet.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForReadOnlyProperty(EntitySet set)
	{
		if (set == null)
		{
			return null;
		}

		return GetAccessibility(set, GETTER_ACCESS);
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the property level for a Write-Only property being
	/// generated from the provided EdmMember.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForWriteOnlyProperty(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		return GetAccessibility(member, SETTER_ACCESS);
	}


	/// <summary>
	/// Gets the accessibility that should be applied at the get level for a property being
	/// generated from the provided EdmMember.
	///
	/// defaults to empty if no annotation is found or the accessibility is the same as the property level.
	/// </summary>
	public static string ForGetter(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		string getterAccess, setterAccess, propertyAccess;
		CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
		return getterAccess;
	}

	/// <summary>
	/// Gets the accessibility that should be applied at the set level for a property being
	/// generated from the provided EdmMember.
	///
	/// defaults to empty if no annotation is found or the accessibility is the same as the property level.
	/// </summary>
	public static string ForSetter(EdmMember member)
	{
		if (member == null)
		{
			return null;
		}

		string getterAccess, setterAccess, propertyAccess;
		CalculatePropertyAccessibility(member, out propertyAccess, out getterAccess, out setterAccess);
		return setterAccess;
	}

	/// <summary>
	/// Gets the accessibility that should be applied to a method being generated from the provided EdmFunction.
	///
	/// defaults to public if no annotation is found.
	/// </summary>
	public static string ForMethod(EdmFunction function)
	{
		if (function == null)
		{
			return null;
		}

		return GetAccessibility(function, METHOD_ACCESS);
	}

	private static void CalculatePropertyAccessibility(MetadataItem item,
		out string propertyAccessibility,
		out string getterAccessibility,
		out string setterAccessibility)
	{
		getterAccessibility = GetAccessibility(item, GETTER_ACCESS);
		int getterRank = AccessibilityRankIdLookup[getterAccessibility];

		setterAccessibility = GetAccessibility(item, SETTER_ACCESS);
		int setterRank = AccessibilityRankIdLookup[setterAccessibility];

		int propertyRank = Math.Max(getterRank, setterRank);
		if (setterRank == propertyRank)
		{
			setterAccessibility = String.Empty;
		}

		if (getterRank == propertyRank)
		{
			getterAccessibility = String.Empty;
		}

		propertyAccessibility = AccessibilityRankIdLookup.Where(v => v.Value == propertyRank).Select(v => v.Key).Single();
	}

	private static string GetAccessibility(MetadataItem item, string name)
	{
		string accessibility;
		if (MetadataTools.TryGetStringMetadataPropertySetting(item, name, out accessibility))
		{
			return TranslateUserAccessibilityToCSharpAccessibility(accessibility);
		}

		return "public";
	}

	private static string TranslateUserAccessibilityToCSharpAccessibility(string userAccessibility)
	{
		if (userAccessibility == ACCESS_PROTECTED)
		{
			return "protected";
		}
		else if (userAccessibility == ACCESS_INTERNAL)
		{
			return "internal";
		}
		else if (userAccessibility == ACCESS_PRIVATE)
		{
			return "private";
		}
		else
		{
			// default to public
			return "public";
		}
	}
}

/// <summary>
/// Responsible for creating source code regions in code when the loop inside
/// actually produces something.
/// </summary>
public class CodeRegion
{
	private const int STANDARD_INDENT_LENGTH = 4;

	private readonly DynamicTextTransformation _textTransformation;
	private int _beforeRegionLength;
	private int _emptyRegionLength;
	private int _regionIndentLevel = -1;

	/// <summary>
	/// Initializes an CodeRegion instance with the
	/// TextTransformation (T4 generated class) that is currently running
	/// </summary>
	public CodeRegion(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
	}

	/// <summary>
	/// Initializes an CodeRegion instance with the
	/// TextTransformation (T4 generated class) that is currently running,
	/// and the indent level to start the first region at.
	/// </summary>
	public CodeRegion(object textTransformation, int firstIndentLevel)
		: this(textTransformation)
	{
		if (firstIndentLevel < 0)
		{
			throw new ArgumentException("firstIndentLevel");
		}

		_regionIndentLevel = firstIndentLevel - 1;
	}

	/// <summary>
	/// Starts the begining of a region
	/// </summary>
	public void Begin(string regionName)
	{
		if (regionName == null)
		{
			throw new ArgumentNullException("regionName");
		}

		Begin(regionName, 1);
	}

	/// <summary>
	/// Start the begining of a region, indented
	/// the numbers of levels specified
	/// </summary>
	public void Begin(string regionName, int levelsToIncreaseIndent)
	{
		if (regionName == null)
		{
			throw new ArgumentNullException("regionName");
		}

		_beforeRegionLength = _textTransformation.GenerationEnvironment.Length;
		_regionIndentLevel += levelsToIncreaseIndent;
		_textTransformation.Write(GetIndent(_regionIndentLevel));
		_textTransformation.WriteLine("#region " + regionName);
		_emptyRegionLength = _textTransformation.GenerationEnvironment.Length;
	}

	/// <summary>
	/// Ends a region, or totaly removes it if nothing
	/// was generted since the begining of the region.
	/// </summary>
	public void End()
	{
		End(1);
	}

	/// <summary>
	/// Ends a region, or totaly removes it if nothing
	/// was generted since the begining of the region, also outdents
	/// the number of levels specified.
	/// </summary>
	public void End(int levelsToDecrease)
	{
		int indentLevel = _regionIndentLevel;
		_regionIndentLevel -= levelsToDecrease;

		if (_emptyRegionLength == _textTransformation.GenerationEnvironment.Length)
			_textTransformation.GenerationEnvironment.Length = _beforeRegionLength;
		else
		{
			_textTransformation.WriteLine(String.Empty);
			_textTransformation.Write(GetIndent(indentLevel));
			_textTransformation.WriteLine("#endregion");
			_textTransformation.WriteLine(String.Empty);
		}
	}

	/// <summary>
	/// Gets the current indent level that the next end region statement will be written
	/// at
	/// </summary>
	public int CurrentIndentLevel { get { return _regionIndentLevel; } }

	/// <summary>
	/// Get a string of spaces equivelent to the number of indents
	/// desired.
	/// </summary>
	public static string GetIndent(int indentLevel)
	{
		if (indentLevel < 0)
		{
			throw new ArgumentException("indentLevel");
		}

		return String.Empty.PadLeft(indentLevel * STANDARD_INDENT_LENGTH);
	}
}


/// <summary>
/// Responsible for collecting together the actual method parameters
/// and the parameters that need to be sent to the Execute method.
/// </summary>
public class FunctionImportParameter
{
	public FunctionParameter Source { get; set; }
	public string RawFunctionParameterName { get; set; }
	public string FunctionParameterName { get; set; }
	public string FunctionParameterType { get; set; }
	public string LocalVariableName { get; set; }
	public string RawClrTypeName { get; set; }
	public string ExecuteParameterName { get; set; }
	public string EsqlParameterName { get; set; }
	public bool NeedsLocalVariable { get; set; }
	public bool IsNullableOfT { get; set; }


	/// <summary>
	/// Creates a set of FunctionImportParameter objects from the parameters passed in.
	/// </summary>
	public static IEnumerable<FunctionImportParameter> Create(IEnumerable<FunctionParameter> parameters, CodeGenerationTools code, MetadataTools ef)
	{
		if (parameters == null)
		{
			throw new ArgumentNullException("parameters");
		}

		if (code == null)
		{
			throw new ArgumentNullException("code");
		}

		if (ef == null)
		{
			throw new ArgumentNullException("ef");
		}

		UniqueIdentifierService unique = new UniqueIdentifierService();
		List<FunctionImportParameter> importParameters = new List<FunctionImportParameter>();
		foreach (FunctionParameter parameter in parameters)
		{
			FunctionImportParameter importParameter = new FunctionImportParameter();
			importParameter.Source = parameter;
			importParameter.RawFunctionParameterName = unique.AdjustIdentifier(code.CamelCase(parameter.Name));
			importParameter.FunctionParameterName = code.Escape(importParameter.RawFunctionParameterName);
			if (parameter.Mode == ParameterMode.In)
			{
				TypeUsage typeUsage = parameter.TypeUsage;
				importParameter.NeedsLocalVariable = true;
				importParameter.FunctionParameterType = code.GetTypeName(typeUsage);
				importParameter.EsqlParameterName = parameter.Name;
				Type clrType = ef.UnderlyingClrType(parameter.TypeUsage.EdmType);
				importParameter.RawClrTypeName = typeUsage.EdmType is EnumType ? code.GetTypeName(typeUsage.EdmType) : code.Escape(clrType);
				importParameter.IsNullableOfT = clrType.IsValueType;
			}
			else
			{
				importParameter.NeedsLocalVariable = false;
				importParameter.FunctionParameterType = "ObjectParameter";
				importParameter.ExecuteParameterName = importParameter.FunctionParameterName;
			}
			importParameters.Add(importParameter);
		}

		// we save the local parameter uniquification for a second pass to make the visible parameters
		// as pretty and sensible as possible
		for (int i = 0; i < importParameters.Count; i++)
		{
			FunctionImportParameter importParameter = importParameters[i];
			if (importParameter.NeedsLocalVariable)
			{
				importParameter.LocalVariableName = unique.AdjustIdentifier(importParameter.RawFunctionParameterName + "Parameter");
				importParameter.ExecuteParameterName = importParameter.LocalVariableName;
			}
		}

		return importParameters;
	}

	//
	// Class to create unique variables within the same scope
	//
	private sealed class UniqueIdentifierService
	{
		private readonly HashSet<string> _knownIdentifiers;

		public UniqueIdentifierService()
		{
			_knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
		}

		/// <summary>
		/// Given an identifier, makes it unique within the scope by adding
		/// a suffix (1, 2, 3, ...), and returns the adjusted identifier.
		/// </summary>
		public string AdjustIdentifier(string identifier)
		{
			// find a unique name by adding suffix as necessary
			int numberOfConflicts = 0;
			string adjustedIdentifier = identifier;

			while (!_knownIdentifiers.Add(adjustedIdentifier))
			{
				++numberOfConflicts;
				adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
			}

			return adjustedIdentifier;
		}
	}
}

/// <summary>
/// Responsible for marking the various sections of the generation,
/// so they can be split up into separate files
/// </summary>
public class EntityFrameworkTemplateFileManager
{
	/// <summary>
	/// Creates the VsEntityFrameworkTemplateFileManager if VS is detected, otherwise
	/// creates the file system version.
	/// </summary>
	public static EntityFrameworkTemplateFileManager Create(object textTransformation)
	{
		DynamicTextTransformation transformation = DynamicTextTransformation.Create(textTransformation);
		IDynamicHost host = transformation.Host;

#if !PREPROCESSED_TEMPLATE
		var hostServiceProvider = host.AsIServiceProvider();

		if (hostServiceProvider != null)
		{
			EnvDTE.DTE dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));

			if (dte != null)
			{
				return new VsEntityFrameworkTemplateFileManager(transformation);
			}
		}
#endif
		return new EntityFrameworkTemplateFileManager(transformation);
	}

	private sealed class Block
	{
		public String Name;
		public int Start, Length;
	}

	private readonly List<Block> files = new List<Block>();
	private readonly Block footer = new Block();
	private readonly Block header = new Block();
	private readonly DynamicTextTransformation _textTransformation;

	// reference to the GenerationEnvironment StringBuilder on the
	// TextTransformation object
	private readonly StringBuilder _generationEnvironment;

	private Block currentBlock;

	/// <summary>
	/// Initializes an EntityFrameworkTemplateFileManager Instance  with the
	/// TextTransformation (T4 generated class) that is currently running
	/// </summary>
	private EntityFrameworkTemplateFileManager(object textTransformation)
	{
		if (textTransformation == null)
		{
			throw new ArgumentNullException("textTransformation");
		}

		_textTransformation = DynamicTextTransformation.Create(textTransformation);
		_generationEnvironment = _textTransformation.GenerationEnvironment;
	}

	/// <summary>
	/// Marks the end of the last file if there was one, and starts a new
	/// and marks this point in generation as a new file.
	/// </summary>
	public void StartNewFile(string name)
	{
		if (name == null)
		{
			throw new ArgumentNullException("name");
		}

		CurrentBlock = new Block { Name = name };
	}

	public void StartFooter()
	{
		CurrentBlock = footer;
	}

	public void StartHeader()
	{
		CurrentBlock = header;
	}

	public void EndBlock()
	{
		if (CurrentBlock == null)
		{
			return;
		}

		CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start;

		if (CurrentBlock != header && CurrentBlock != footer)
		{
			files.Add(CurrentBlock);
		}

		currentBlock = null;
	}

	/// <summary>
	/// Produce the template output files.
	/// </summary>
	public virtual IEnumerable<string> Process(bool split = true)
	{
		var generatedFileNames = new List<string>();

		if (split)
		{
			EndBlock();

			var headerText = _generationEnvironment.ToString(header.Start, header.Length);
			var footerText = _generationEnvironment.ToString(footer.Start, footer.Length);
			var outputPath = Path.GetDirectoryName(_textTransformation.Host.TemplateFile);

			files.Reverse();

			foreach (var block in files)
			{
				var fileName = Path.Combine(outputPath, block.Name);
				var content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText;

				generatedFileNames.Add(fileName);
				CreateFile(fileName, content);
				_generationEnvironment.Remove(block.Start, block.Length);
			}
		}

		return generatedFileNames;
	}

	protected virtual void CreateFile(string fileName, string content)
	{
		if (IsFileContentDifferent(fileName, content))
		{
			File.WriteAllText(fileName, content);
		}
	}

	protected bool IsFileContentDifferent(String fileName, string newContent)
	{
		return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
	}

	private Block CurrentBlock
	{
		get { return currentBlock; }
		set
		{
			if (CurrentBlock != null)
			{
				EndBlock();
			}

			if (value != null)
			{
				value.Start = _generationEnvironment.Length;
			}

			currentBlock = value;
		}
	}

#if !PREPROCESSED_TEMPLATE
	private sealed class VsEntityFrameworkTemplateFileManager : EntityFrameworkTemplateFileManager
	{
		private EnvDTE.ProjectItem templateProjectItem;
		private EnvDTE.DTE dte;
		private Action<string> checkOutAction;
		private Action<IEnumerable<string>> projectSyncAction;

		/// <summary>
		/// Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance
		/// </summary>
		public VsEntityFrameworkTemplateFileManager(object textTemplating)
			: base(textTemplating)
		{
			var hostServiceProvider = _textTransformation.Host.AsIServiceProvider();
			if (hostServiceProvider == null)
			{
				throw new ArgumentNullException("Could not obtain hostServiceProvider");
			}

			dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
			if (dte == null)
			{
				throw new ArgumentNullException("Could not obtain DTE from host");
			}

			templateProjectItem = dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile);

			checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
			projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
		}

		public override IEnumerable<string> Process(bool split)
		{
			if (templateProjectItem.ProjectItems == null)
			{
				return new List<string>();
			}

			var generatedFileNames = base.Process(split);

			projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));

			return generatedFileNames;
		}

		protected override void CreateFile(string fileName, string content)
		{
			if (IsFileContentDifferent(fileName, content))
			{
				CheckoutFileIfRequired(fileName);
				File.WriteAllText(fileName, content);
			}
		}

		private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<string> keepFileNames)
		{
			var keepFileNameSet = new HashSet<string>(keepFileNames);
			var projectFiles = new Dictionary<string, EnvDTE.ProjectItem>();
			var originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]);

			foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
			{
				projectFiles.Add(projectItem.FileNames[0], projectItem);
			}

			// Remove unused items from the project
			foreach (var pair in projectFiles)
			{
				if (!keepFileNames.Contains(pair.Key)
					&& !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + "."))
				{
					pair.Value.Delete();
				}
			}

			// Add missing files to the project
			foreach (string fileName in keepFileNameSet)
			{
				if (!projectFiles.ContainsKey(fileName))
				{
					templateProjectItem.ProjectItems.AddFromFile(fileName);
				}
			}
		}

		private void CheckoutFileIfRequired(string fileName)
		{
			if (dte.SourceControl == null
				|| !dte.SourceControl.IsItemUnderSCC(fileName)
					|| dte.SourceControl.IsItemCheckedOut(fileName))
			{
				return;
			}

			// run on worker thread to prevent T4 calling back into VS
			checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
		}
	}
#endif
}

/// <summary>
/// Responsible creating an instance that can be passed
/// to helper classes that need to access the TextTransformation
/// members.  It accesses member by name and signature rather than
/// by type.  This is necessary when the
/// template is being used in Preprocessed mode
/// and there is no common known type that can be
/// passed instead
/// </summary>
public class DynamicTextTransformation
{
	private object _instance;
	IDynamicHost _dynamicHost;

	private readonly MethodInfo _write;
	private readonly MethodInfo _writeLine;
	private readonly PropertyInfo _generationEnvironment;
	private readonly PropertyInfo _errors;
	private readonly PropertyInfo _host;

	private DynamicTextTransformation()
	{
	}

	/// <summary>
	/// Creates an instance of the DynamicTextTransformation class around the passed in
	/// TextTransformation shapped instance passed in, or if the passed in instance
	/// already is a DynamicTextTransformation, it casts it and sends it back.
	/// </summary>
	public static DynamicTextTransformation Create(object instance)
	{
		if (instance == null)
		{
			throw new ArgumentNullException("instance");
		}

		DynamicTextTransformation textTransformation = instance as DynamicTextTransformation;
		if (textTransformation != null)
		{
			return textTransformation;
		}

		return new DynamicTextTransformation(instance);
	}

	private DynamicTextTransformation(object instance)
	{
		_instance = instance;
		Type type = _instance.GetType();
		_write = type.GetMethod("Write", new Type[] { typeof(string) });
		_writeLine = type.GetMethod("WriteLine", new Type[] { typeof(string) });
		_generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance | BindingFlags.NonPublic);
		_host = type.GetProperty("Host");
		_errors = type.GetProperty("Errors");
	}

	/// <summary>
	/// Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
	/// </summary>
	public StringBuilder GenerationEnvironment { get { return (StringBuilder)_generationEnvironment.GetValue(_instance, null); } }

	/// <summary>
	/// Gets the value of the wrapped TextTranformation instance's Errors property
	/// </summary>
	public System.CodeDom.Compiler.CompilerErrorCollection Errors { get { return (System.CodeDom.Compiler.CompilerErrorCollection)_errors.GetValue(_instance, null); } }

	/// <summary>
	/// Calls the wrapped TextTranformation instance's Write method.
	/// </summary>
	public void Write(string text)
	{
		_write.Invoke(_instance, new object[] { text });
	}

	/// <summary>
	/// Calls the wrapped TextTranformation instance's WriteLine method.
	/// </summary>
	public void WriteLine(string text)
	{
		_writeLine.Invoke(_instance, new object[] { text });
	}

	/// <summary>
	/// Gets the value of the wrapped TextTranformation instance's Host property
	/// if available (shows up when hostspecific is set to true in the template directive) and returns
	/// the appropriate implementation of IDynamicHost
	/// </summary>
	public IDynamicHost Host
	{
		get
		{
			if (_dynamicHost == null)
			{
				if(_host == null)
				{
					_dynamicHost = new NullHost();
				}
				else
				{
					_dynamicHost = new DynamicHost(_host.GetValue(_instance, null));
				}
			}
			return _dynamicHost;
		}
	}
}


/// <summary>
/// Reponsible for abstracting the use of Host between times
/// when it is available and not
/// </summary>
public interface IDynamicHost
{
	/// <summary>
	/// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
	/// </summary>
	string ResolveParameterValue(string id, string name, string otherName);

	/// <summary>
	/// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
	/// </summary>
	string ResolvePath(string path);

	/// <summary>
	/// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
	/// </summary>
	string TemplateFile { get; }

	/// <summary>
	/// Returns the Host instance cast as an IServiceProvider
	/// </summary>
	IServiceProvider AsIServiceProvider();
}

/// <summary>
/// Reponsible for implementing the IDynamicHost as a dynamic
/// shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
/// rather than type dependent wrapper.  We don't use the
/// interface type so that the code can be run in preprocessed mode
/// on a .net framework only installed machine.
/// </summary>
public class DynamicHost : IDynamicHost
{
	private readonly object _instance;
	private readonly MethodInfo _resolveParameterValue;
	private readonly MethodInfo _resolvePath;
	private readonly PropertyInfo _templateFile;

	private DynamicHost()
	{
	}

	/// <summary>
	/// Creates an instance of the DynamicHost class around the passed in
	/// Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shapped instance passed in.
	/// </summary>
	public DynamicHost(object instance)
	{
		_instance = instance;
		Type type = _instance.GetType();
		_resolveParameterValue = type.GetMethod("ResolveParameterValue", new Type[] { typeof(string), typeof(string), typeof(string) });
		_resolvePath = type.GetMethod("ResolvePath", new Type[] { typeof(string) });
		_templateFile = type.GetProperty("TemplateFile");

	}

	/// <summary>
	/// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
	/// </summary>
	public string ResolveParameterValue(string id, string name, string otherName)
	{
		return (string)_resolveParameterValue.Invoke(_instance, new object[] { id, name, otherName });
	}

	/// <summary>
	/// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
	/// </summary>
	public string ResolvePath(string path)
	{
		return (string)_resolvePath.Invoke(_instance, new object[] { path });
	}

	/// <summary>
	/// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
	/// </summary>
	public string TemplateFile
	{
		get
		{
			return (string)_templateFile.GetValue(_instance, null);
		}
	}

	/// <summary>
	/// Returns the Host instance cast as an IServiceProvider
	/// </summary>
	public IServiceProvider AsIServiceProvider()
	{
		return _instance as IServiceProvider;
	}
}

/// <summary>
/// Reponsible for implementing the IDynamicHost when the
/// Host property is not available on the TextTemplating type. The Host
/// property only exists when the hostspecific attribute of the template
/// directive is set to true.
/// </summary>
public class NullHost : IDynamicHost
{
	/// <summary>
	/// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
	/// that simply retuns null.
	/// </summary>
	public string ResolveParameterValue(string id, string name, string otherName)
	{
		return null;
	}

	/// <summary>
	/// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
	/// that simply retuns the path passed in.
	/// </summary>
	public string ResolvePath(string path)
	{
		return path;
	}

	/// <summary>
	/// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
	/// that returns null.
	/// </summary>
	public string TemplateFile
	{
		get
		{
			return null;
		}
	}

	/// <summary>
	/// Returns null.
	/// </summary>
	public IServiceProvider AsIServiceProvider()
	{
		return null;
	}
}

/// <summary>
/// Responsible for encapsulating the constants defined in Metadata
/// </summary>
public static class MetadataConstants
{
	public const string CSDL_EXTENSION = ".csdl";

	public const string CSDL_EDMX_SECTION_NAME = "ConceptualModels";
	public const string CSDL_ROOT_ELEMENT_NAME = "Schema";
	public const string EDM_ANNOTATION_09_02 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";

	public const string SSDL_EXTENSION = ".ssdl";

	public const string SSDL_EDMX_SECTION_NAME = "StorageModels";
	public const string SSDL_ROOT_ELEMENT_NAME = "Schema";

	public const string MSL_EXTENSION = ".msl";

	public const string MSL_EDMX_SECTION_NAME = "Mappings";
	public const string MSL_ROOT_ELEMENT_NAME = "Mapping";

	public const string TT_TEMPLATE_NAME = "TemplateName";
	public const string TT_TEMPLATE_VERSION = "TemplateVersion";
	public const string TT_MINIMUM_ENTITY_FRAMEWORK_VERSION = "MinimumEntityFrameworkVersion";

	public const string DEFAULT_TEMPLATE_VERSION = "5.0";

	public static readonly SchemaConstants V1_SCHEMA_CONSTANTS = new SchemaConstants(
		"http://schemas.microsoft.com/ado/2007/06/edmx",
		"http://schemas.microsoft.com/ado/2006/04/edm",
		"http://schemas.microsoft.com/ado/2006/04/edm/ssdl",
		"urn:schemas-microsoft-com:windows:storage:mapping:CS",
		new Version("3.5"));

	public static readonly SchemaConstants V2_SCHEMA_CONSTANTS = new SchemaConstants(
		"http://schemas.microsoft.com/ado/2008/10/edmx",
		"http://schemas.microsoft.com/ado/2008/09/edm",
		"http://schemas.microsoft.com/ado/2009/02/edm/ssdl",
		"http://schemas.microsoft.com/ado/2008/09/mapping/cs",
		new Version("4.0"));

	public static readonly SchemaConstants V3_SCHEMA_CONSTANTS = new SchemaConstants(
		"http://schemas.microsoft.com/ado/2009/11/edmx",
		"http://schemas.microsoft.com/ado/2009/11/edm",
		"http://schemas.microsoft.com/ado/2009/11/edm/ssdl",
		"http://schemas.microsoft.com/ado/2009/11/mapping/cs",
		new Version("4.5"));
}

public struct SchemaConstants
{
	public SchemaConstants(string edmxNamespace, string csdlNamespace, string ssdlNamespace, string mslNamespace, Version minimumTemplateVersion) : this()
	{
		EdmxNamespace = edmxNamespace;
		CsdlNamespace = csdlNamespace;
		SsdlNamespace = ssdlNamespace;
		MslNamespace = mslNamespace;
		MinimumTemplateVersion = minimumTemplateVersion;
	}

	public string EdmxNamespace { get; private set; }
	public string CsdlNamespace { get; private set; }
	public string SsdlNamespace { get; private set; }
	public string MslNamespace { get; private set; }
	public Version MinimumTemplateVersion { get; private set; }
}
#>
<#+// Copyright (c) Matthieu MEZIL.  All rights reserved.

string edmxUtilityTTIncludeName = "WCFAsyncQueryableServices.VS12.Edmx.Utility.ttinclude";

private static string EDM_NS4 = "http://schemas.microsoft.com/ado/2008/10/edmx";
private static string SSDL_NS4 = "http://schemas.microsoft.com/ado/2009/02/edm/ssdl";
private static string CSDL_NS4 = "http://schemas.microsoft.com/ado/2008/09/edm";
private static string MSL_NS4 = "http://schemas.microsoft.com/ado/2008/09/mapping/cs";
private static string annotation_NS4 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";

private static string EDM_NS5 = "http://schemas.microsoft.com/ado/2009/11/edmx";
private static string SSDL_NS5 = "http://schemas.microsoft.com/ado/2009/11/edm/ssdl";
private static string CSDL_NS5 = "http://schemas.microsoft.com/ado/2009/11/edm";
private static string MSL_NS5 = "http://schemas.microsoft.com/ado/2009/11/mapping/cs";
private static string annotation_NS5 = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";

public static string GetEDM_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? EDM_NS4 : EDM_NS5;
}

public static string GetSSDL_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? SSDL_NS4 : SSDL_NS5;
}

public static string GetCSDL_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? CSDL_NS4 : CSDL_NS5;
}

public static string GetMSL_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? MSL_NS4 : MSL_NS5;
}

public static string GetAnnotation_NS(XElement root)
{
	return root.Element(XName.Get("Runtime", EDM_NS5)) == null ? annotation_NS4 : annotation_NS5;
}

public static IEnumerable<EdmType> GetAllTypes(EdmItemCollection itemCollection)
{
	return itemCollection.GetItems<EntityType>().Cast<EdmType>().Union(itemCollection.GetItems<ComplexType>()).Union(itemCollection.GetItems<EnumType>());
}

partial class OriginalValueMembers
{
	IEnumerable<EdmMember> GetRelevantMembersForUpdate(MetadataWorkspace metadataWorkspace, EntitySetBase entitySet, EntityTypeBase entityType, bool partialUpdateSupported)
	{
		return metadataWorkspace.GetRelevantMembersForUpdate(entitySet, entityType, true);   
	}
}
#>
<#+// Copyright (c) Matthieu MEZIL.  All rights reserved.
void WriteServerFxService(string serverFxSerializableExpressionsNamespace, string serverFxCommonNamespace, string serverFxEntitiesNamespace, string serverFxDALInterfacesNamespace, string serverFxServiceInterfacesNamespace, string serverFxSpecificationsNamespace, string namespaceName = null)
{
    string serverFxDALInterfacesL2ENamespace = serverFxDALInterfacesNamespace + ".L2E";

    CodeGenerationTools code = new CodeGenerationTools(this);
    MetadataLoader loader = new MetadataLoader(this);
    CodeRegion region = new CodeRegion(this, 1);
    if (namespaceName == null)
        namespaceName = code.VsNamespaceSuggestion();

    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

    fileManager.StartNewFile("SerializableExpressionToLINQExpressionConverter.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Reflection", "System.Text.RegularExpressions", "System.Text", serverFxSerializableExpressionsNamespace, serverFxCommonNamespace, serverFxSpecificationsNamespace);
#>
public static partial class SerializableExpressionToLINQExpressionConverter
{
    public static Expression ToLINQExpression(this SerializableExpression serializableExpression, IEnumerable<string> withSpecificationsProperties, ISerializableExpressionConverter serializableExpressionConverter)
    {
        var expressionReference = new Reference<Expression>();
        new Visitor(expressionReference, withSpecificationsProperties, serializableExpressionConverter).Visit(serializableExpression);
        return OptimizeSelect(expressionReference.Value, serializableExpressionConverter, type => type);
    }
        
    internal static Expression OptimizeSelect(Expression expression, ISerializableExpressionConverter serializableExpressionConverter, Func<Type, Type> getConstructorType)
    {
        var dependentProperties = new List<List<PropertyInfo>>();
        Expression queryableExpression = expression;
        MethodCallExpression previousMethodCallExpression;
        while ((previousMethodCallExpression = queryableExpression as MethodCallExpression) != null && previousMethodCallExpression.Method.DeclaringType == typeof(Enumerable))
            queryableExpression = previousMethodCallExpression.Arguments[0];
        if (expression == queryableExpression)
            return expression;
        new SelectOptimizerVisitor(queryableExpression, dependentProperties, serializableExpressionConverter).Visit(expression);
        if (dependentProperties.Count == 0)
            return expression;
        Type parameterType;
        var queryableType = queryableExpression.Type.GetGenericArguments()[0];
        if (expression.Type.IsGenericType ? expression.Type.GetGenericArguments()[0].IsAssignableFrom(queryableType) : expression.Type.IsAssignableFrom(queryableType))
            return expression;
        var newQueryableType = getConstructorType(queryableType);
        var selectParameter = Expression.Parameter(queryableType);
        List<string> properties = new List<string>();
        var distinctDependentProperties = dependentProperties.Select(ps =>
            {
                var sb = new StringBuilder();
                foreach (var p in ps)
                {
                    sb.Append(p.Name);
                    sb.Append(".");
                }
                string propertyName = sb.ToString();
                if (properties.Contains(propertyName))
                    return null;
                properties.Add(propertyName);
                return ps;
            }).Where(ps => ps != null).ToList();
        expression = expression.ReplaceExpression(queryableExpression, Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Select" && m.GetParameters().Length == 2 && (parameterType = m.GetParameters()[1].ParameterType).IsGenericType && (parameterType = parameterType.GetGenericArguments()[0]).IsGenericType && parameterType.GetGenericArguments().Length == 2).MakeGenericMethod(queryableType, newQueryableType), queryableExpression, Expression.Lambda(OptimizeSelectExpression(serializableExpressionConverter, getConstructorType, newQueryableType, distinctDependentProperties, selectParameter), selectParameter)));
        return expression;
    }
        
    private static Expression OptimizeSelectExpression(ISerializableExpressionConverter serializableExpressionConverter, Func<Type, Type> getConstructorType, Type newQueryableType, IEnumerable<IEnumerable<PropertyInfo>> dependentProperties, Expression selectParameter)
    {
        return Expression.MemberInit(Expression.New(newQueryableType), dependentProperties.GroupBy(dp => dp.First().Name).Select(ps =>
            {
                var p = ps.First().First();
                if (ps.Any(ps2 => ps2.Skip(1).Any()))
                {
                    if (ps.Any(ps2 => !ps2.Skip(1).Any()))
                        return Expression.Bind(p, Expression.MakeMemberAccess(selectParameter, p));
                    return Expression.Bind(p, OptimizeSelectExpression(serializableExpressionConverter, getConstructorType, getConstructorType(p.PropertyType), ps.Select(ps2 => ps2.Skip(1).ToList()).Where(ps2 => ps2.Count != 0), Expression.MakeMemberAccess(selectParameter, p)));
                }
                else
                {
                    if (p.GetCustomAttributes(typeof(SpecificationsAttribute), true).Length == 0)
                        return Expression.Bind(p, Expression.MakeMemberAccess(selectParameter, p));
                    var exp = (LambdaExpression)serializableExpressionConverter.GetSpecificationLINQExpression(p);
                    return Expression.Bind(p, exp.Body.ReplaceParameter(exp.Parameters[0], selectParameter));
                }
            }));
    }
        
    public static Expression GetConstantExpression(object value, Type type)
    {
        var expressionReference = new Reference<Expression>();
        new Visitor(expressionReference, null, null).VisitConstant(type, value);
        return expressionReference.Value;
    }
        
    public partial class Visitor : SerializableExpressionVisitor
    {
        protected Type _type;
        protected Reference<Expression> _expressionReference;
        protected IEnumerable<string> _withSpecificationsProperties;
        protected ISerializableExpressionConverter _serializableExpressionConverter;
        protected Dictionary<string, ParameterExpression> _lambdaParameters;
        protected Dictionary<Expression, bool> _isEnumerableExpressions;
        
        public Visitor(Reference<Expression> expressionReference, IEnumerable<string> withSpecificationsProperties, ISerializableExpressionConverter serializableExpressionConverter)
            : this(expressionReference, withSpecificationsProperties, serializableExpressionConverter, new Dictionary<string, ParameterExpression>(), false, new Dictionary<Expression, bool>())
        {
        }
        
        protected Visitor(Reference<Expression> expressionReference, IEnumerable<string> withSpecificationsProperties, ISerializableExpressionConverter serializableExpressionConverter, Dictionary<string, ParameterExpression> lambdaParameters, bool isEnumerable, Dictionary<Expression, bool> isEnumerableExpressions)
        {
            _expressionReference = expressionReference;
            _withSpecificationsProperties = withSpecificationsProperties;
            _serializableExpressionConverter = serializableExpressionConverter;
            _lambdaParameters = lambdaParameters;
            IsEnumerable = isEnumerable;
            _isEnumerableExpressions = isEnumerableExpressions;
        }
        
        public bool IsEnumerable { get; protected set; }
        
        private Func<Reference<Expression>, IEnumerable<string>, ISerializableExpressionConverter, Dictionary<string, ParameterExpression>, bool, Dictionary<Expression, bool>, Visitor> _visitorFactory;
        protected Func<Reference<Expression>, IEnumerable<string>, ISerializableExpressionConverter, Dictionary<string, ParameterExpression>, bool, Dictionary<Expression, bool>, Visitor> VisitorFactory
        {
            get { return _visitorFactory; }
            set { _visitorFactory = value; }
        }
        protected Visitor CreateNewVisitor(Reference<Expression> expressionReference, Dictionary<string, ParameterExpression> lambdaParameters = null)
        {
            return CreateNewVisitor(expressionReference, null, lambdaParameters);
        }
        protected Visitor CreateNewVisitor(Reference<Expression> expressionReference, IEnumerable<string> withSpecificationsProperties, Dictionary<string, ParameterExpression> lambdaParameters = null)
        {
            if (lambdaParameters == null)
                lambdaParameters = _lambdaParameters;
            if (VisitorFactory == null)
                return new Visitor(expressionReference, withSpecificationsProperties, _serializableExpressionConverter, lambdaParameters, IsEnumerable, _isEnumerableExpressions);
            return VisitorFactory(expressionReference, withSpecificationsProperties, _serializableExpressionConverter, lambdaParameters, IsEnumerable, _isEnumerableExpressions);
        }
        
        public override void Visit(SerializableExpression expression)
        {
            if (expression == null)
                return;
            base.Visit(expression);
            if (_withSpecificationsProperties != null && _withSpecificationsProperties.Any())
            {
                var parameterType = _expressionReference.Value.Type.GetGenericArguments()[0];
                Type genericType;
                var enumerableSelectParameter = Expression.Parameter(parameterType);
                var enumerableSelectMethod = typeof(Enumerable).GetMethods().First(m => m.Name == "Select" && m.GetParameters().Length == 2 && (genericType = m.GetParameters()[1].ParameterType).IsGenericType && genericType.GetGenericArguments().Length == 2);
                var properties = _withSpecificationsProperties.Select(wsp => _serializableExpressionConverter.GetProperty(parameterType, wsp)).Select(p => new { Property = p, Expression = _serializableExpressionConverter.GetSpecificationLINQExpression(p, parameterType) }).ToList();
                var queryableProperties = properties.Where(p => p.Expression != null).ToList();
                var enumerableProperties = properties.Where(p => p.Expression == null).Select(p => p.Property).ToList();
                if (queryableProperties.Count != 0)
                {
                    Expression originalQueryableExp;
                    ParameterExpression queryableSelectParameter = Expression.Parameter(parameterType);
                    Expression queryableSelectParameterExp = queryableSelectParameter;
                    if (IsEnumerable)
                    {
                        ParameterExpression queryableSelectParameterTmp;
                        originalQueryableExp = ExtractQueryable(_expressionReference.Value, out queryableSelectParameterExp, out queryableSelectParameterTmp);
                        if (queryableSelectParameterTmp != null)
                        {
                            if (queryableSelectParameterTmp.Type != queryableSelectParameter.Type || originalQueryableExp == null)
                            {
                                enumerableProperties.AddRange(queryableProperties.Select(p => p.Property));
                                queryableProperties.Clear();
                            }
                            else
                                queryableSelectParameterExp = queryableSelectParameterExp.ReplaceParameter(queryableSelectParameterTmp, queryableSelectParameter);
                        }
                        else
                            queryableSelectParameterExp = queryableSelectParameter;
                    }
                    else
                        originalQueryableExp = _expressionReference.Value;
                    if (queryableProperties.Count != 0)
                    {
                        var withType = _serializableExpressionConverter.GetWithType(parameterType);
                        var queryableExp = Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == "Select" && m.GetParameters().Length == 2 && (genericType = m.GetParameters()[1].ParameterType).IsGenericType && genericType.GetGenericArguments().Length == 1 && (genericType = genericType.GetGenericArguments()[0]).IsGenericType && genericType.GetGenericArguments().Length == 2).MakeGenericMethod(parameterType, withType), originalQueryableExp, Expression.Quote(Expression.Lambda(Expression.MemberInit(Expression.New(withType.GetConstructor(new Type[0])), new MemberBinding[] { Expression.Bind(withType.GetProperty((_serializableExpressionConverter.GetBaseType(parameterType) ?? parameterType).Name), queryableSelectParameter) }.Union(queryableProperties.Select(p =>
                                                        {
                                                            LambdaExpression lambda = (LambdaExpression)p.Expression;
                                                            return Expression.Bind(p.Property, lambda.Body.ReplaceParameter(lambda.Parameters[0], queryableSelectParameterExp));
                                                        }))), queryableSelectParameter)));
                        _isEnumerableExpressions.Add(queryableExp, false);
                        _expressionReference.Value = _expressionReference.Value.ReplaceExpression(originalQueryableExp, queryableExp);
                    }
                }
                if (enumerableProperties.Count != 0)
                {
                    _expressionReference.Value = Expression.Call(enumerableSelectMethod.MakeGenericMethod(parameterType, parameterType), _expressionReference.Value, Expression.Lambda(Expression.Block(/*enumerableProperties.Select(p => (Expression)Expression.Assign(Expression.MakeMemberAccess(enumerableSelectParameter, p), _serializableExpressionConverter.GetSpecificationMethod(enumerableSelectParameter, p))).Union(new Expression[] { enumerableSelectParameter })*/), enumerableSelectParameter));
                }
            }
            if (!_isEnumerableExpressions.ContainsKey(_expressionReference.Value))
                _isEnumerableExpressions.Add(_expressionReference.Value, IsEnumerable);
        }
        
        public virtual IEnumerable<KeyValuePair<PropertyInfo, Expression>> GetLINQUsableProperties(Type type, ParameterExpression selectParameter, out List<PropertyInfo> notSupportedLINQProperties)
        {
            var lambdaNotSupportedLINQProperties = notSupportedLINQProperties = new List<PropertyInfo>();
            return _serializableExpressionConverter.GetScalarAndComplexProperties(type).Select(p => new KeyValuePair<PropertyInfo, Expression>(p, Expression.MakeMemberAccess(selectParameter, p)))
                .Union(_withSpecificationsProperties.Select(p =>
                {
                    Type baseType = _serializableExpressionConverter.GetBaseType(type) ?? type;
                    var dalSpecification = (LambdaExpression)_serializableExpressionConverter.GetSpecificationLINQExpression(type.GetProperty(p));
                    if (dalSpecification == null)
                    {
                        var propertyInfo = type.GetProperty(p);
                        lambdaNotSupportedLINQProperties.Add(propertyInfo);
                        return new KeyValuePair<PropertyInfo, Expression>(propertyInfo, null);
                    }
                    return new KeyValuePair<PropertyInfo, Expression>(type.GetProperty(p), dalSpecification.Body.ReplaceParameter(dalSpecification.Parameters[0], selectParameter));
                }));
        }
        
        private ParameterExpression GetParameterExpression(SerializableParameterExpression expression, Dictionary<string, ParameterExpression> lambdaParameters = null)
        {
            if (lambdaParameters == null)
                lambdaParameters = _lambdaParameters;
            ParameterExpression value;
            if (!lambdaParameters.TryGetValue(expression.Name, out value))
                lambdaParameters.Add(expression.Name, value = Expression.Parameter(expression.Type.ToType(_serializableExpressionConverter), expression.Name));
            return value;
        }
        
        protected internal override void VisitTypeBinary(SerializableTypeBinaryExpression expression)
        {
            Reference<Expression> exp = new Reference<Expression>();
            var expVisitor = CreateNewVisitor(exp);
            expVisitor.Visit(expression.Expression);
            switch (EnumUtils.GetEnumValue<ExpressionType>(expression.NodeType))
            {
                case ExpressionType.TypeIs:
                    _expressionReference.Value = Expression.TypeIs(exp.Value, expression.TypeOperand.ToType(_serializableExpressionConverter));
                    break;
                case ExpressionType.TypeAs:
                    _expressionReference.Value = Expression.TypeAs(exp.Value, expression.TypeOperand.ToType(_serializableExpressionConverter));
                    break;
            }
        }
        
            
        protected internal override void VisitBinary(SerializableBinaryExpression expression)
        {
            Reference<Expression> leftExpression = new Reference<Expression>(), rightExpression = new Reference<Expression>();
            var leftVisitor = CreateNewVisitor(leftExpression);
            leftVisitor.Visit(expression.Left);
            var rightVisitor = CreateNewVisitor(rightExpression);
            rightVisitor.Visit(expression.Right);
            if (leftVisitor.IsEnumerable || rightVisitor.IsEnumerable)
                IsEnumerable = true;
            MakeBinary(expression, leftExpression.Value, rightExpression.Value);
        }
    
        protected virtual void MakeBinary(SerializableBinaryExpression source, Expression leftExpression, Expression rightExpression)
        {
            switch (source.NodeType)
            {
                case "Add":
                    if (leftExpression.Type == typeof(string))
                    {
                        _expressionReference.Value = Expression.Add(leftExpression, rightExpression, typeof(string).GetMethod("Concat", new Type[] { typeof(string), typeof(string) }));
                        return;
                    }
                    break;
            }
            _expressionReference.Value = Expression.MakeBinary(EnumUtils.GetEnumValue<ExpressionType>(source.NodeType), leftExpression, rightExpression);
        }
                
        protected internal override void VisitConstant(SerializableConstantExpression expression)
        {
            Type type = expression.Type.ToType(_serializableExpressionConverter);
            object value = expression.Value;
            VisitConstant(type, value);
        }
        
        public void VisitConstant(Type type, object value)
        {
            if (value == null)
                _expressionReference.Value = Expression.Constant(value);
            else if (type == typeof(int))
                VisitConstant<int>(value);
            else if (type == typeof(uint))
                VisitConstant<uint>(value);
            else if (type == typeof(short))
                VisitConstant<short>(value);
            else if (type == typeof(ushort))
                VisitConstant<ushort>(value);
            else if (type == typeof(byte))
                VisitConstant<byte>(value);
            else if (type == typeof(long))
                VisitConstant<long>(value);
            else if (type == typeof(ulong))
                VisitConstant<ulong>(value);
            else if (type == typeof(decimal))
                VisitConstant<decimal>(value);
            else if (type == typeof(double))
                VisitConstant<double>(value);
            else if (type == typeof(char))
                VisitConstant<char>(value);
            else if (type == typeof(DateTime))
                VisitConstant<DateTime>(value);
            else if (type == typeof(TimeSpan))
                VisitConstant<TimeSpan>(value);
            else if (type == typeof(int?))
                VisitConstant<int?>(value);
            else if (type == typeof(uint?))
                VisitConstant<uint?>(value);
            else if (type == typeof(short?))
                VisitConstant<short?>(value);
            else if (type == typeof(ushort?))
                VisitConstant<ushort?>(value);
            else if (type == typeof(byte?))
                VisitConstant<byte?>(value);
            else if (type == typeof(long?))
                VisitConstant<long?>(value);
            else if (type == typeof(ulong?))
                VisitConstant<ulong?>(value);
            else if (type == typeof(decimal?))
                VisitConstant<decimal?>(value);
            else if (type == typeof(double?))
                VisitConstant<double?>(value);
            else if (type == typeof(char?))
                VisitConstant<char?>(value);
            else if (type == typeof(DateTime?))
                VisitConstant<DateTime?>(value);
            else if (type == typeof(TimeSpan?))
                VisitConstant<TimeSpan?>(value);
            else if (type == typeof(string))
                VisitConstant<string>(value);
            else if (typeof(Enum).IsAssignableFrom(type) || type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>) && typeof(Enum).IsAssignableFrom(type.GetGenericArguments()[0]))
                typeof(Visitor).GetMethods(BindingFlags.NonPublic | BindingFlags.Instance).Single(m => m.Name == "VisitConstant" && m.IsGenericMethod).MakeGenericMethod(type).Invoke(this, new object[] { value });
            else
                _expressionReference.Value = Expression.Constant(value);
        }
        protected void VisitConstant<T>(dynamic value)
        {
            T constant = (T)value;
            Expression<Func<T>> exp = () => constant;
            _expressionReference.Value = exp.Body;
        }
        
        protected internal override void VisitConstructor(SerializableConstructorExpression expression)
        {
            _type = GetConstructorType(expression.Type.ToType(_serializableExpressionConverter));
            Expression value = GetConstructorExpression(_type, expression);
            if (value != null)
            {
                _expressionReference.Value = value;
                return;
            }
            if (expression.Arguments.Any(a =>
                {
                    Reference<Expression> argumentExpression = new Reference<Expression>();
                    var argumentVisitor = CreateNewVisitor(argumentExpression);
                    argumentVisitor.Visit(a);
                    return argumentVisitor.IsEnumerable;
                }))
                IsEnumerable = true;
            if (expression.Type.IsKnownByServer || expression.Arguments.Count == 0)
            {
                _expressionReference.Value = Expression.New(_type.GetConstructor(expression.ArgumentTypes.Select(at => at.ToType(_serializableExpressionConverter)).ToArray()), expression.Arguments.Select(a =>
                {
                    Reference<Expression> argumentExpression = new Reference<Expression>();
                    var argumentVisitor = CreateNewVisitor(argumentExpression);
                    argumentVisitor.IsEnumerable = IsEnumerable;
                    argumentVisitor.Visit(a);
                    return argumentExpression.Value;
                }));
                return;
            }
            var properties = _type.GetProperties();
            _expressionReference.Value = Expression.MemberInit(Expression.New(_type.GetConstructor(new Type[0])), expression.Arguments.Select((a, i) =>
            {
                Reference<Expression> argumentExpression = new Reference<Expression>();
                var argumentVisitor = CreateNewVisitor(argumentExpression);
                argumentVisitor.IsEnumerable = IsEnumerable;
                argumentVisitor.Visit(a);
                return Expression.Bind(properties[i], argumentExpression.Value);
            }));
        }
        
        protected virtual Expression GetConstructorExpression(Type type, SerializableConstructorExpression expression)
        {
            return null;
        }
        
        protected virtual Type GetConstructorType(Type type)
        {
            return type;
        }
        
        protected internal override void VisitEntitySet(SerializableEntitySetExpression expression)
        {
            _expressionReference.Value = _serializableExpressionConverter.GetEntitySetExpression(expression.EntitySetName);
        }
        
        protected internal override void VisitLambda(SerializableLambdaExpression expression)
        {
            Reference<Expression> bodyExpression = new Reference<Expression>();
            Dictionary<string, ParameterExpression> parameters = new Dictionary<string, ParameterExpression>(_lambdaParameters);
            var parameterExpressions = expression.Parameters.Select(p => GetParameterExpression(p, parameters)).ToArray();
            var bodyVisitor = CreateNewVisitor(bodyExpression, parameters);
            bodyVisitor.Visit(expression.Body);
            if (bodyVisitor.IsEnumerable)
                IsEnumerable = true;
            _expressionReference.Value = Expression.Lambda(Type.GetType("System.Func`" + (expression.Parameters.Count + 1).ToString()).MakeGenericType(GetLambdaGenericArguments(expression, bodyExpression.Value)), bodyExpression.Value, parameterExpressions);
        }
        
        protected virtual Type[] GetLambdaGenericArguments(SerializableLambdaExpression expression, Expression body)
        {
            var genericTypes = new Type[expression.Parameters.Count + (body.Type == null ? 0 : 1)];
            int index = 0;
            foreach (var p in expression.Parameters)
                genericTypes[index++] = p.Type.ToType(_serializableExpressionConverter);
            if (body.Type != null)
                genericTypes[index] = expression.ReturnType.ToType(_serializableExpressionConverter);
            return genericTypes;
        }
        
        protected internal override void VisitMemberInit(SerializableMemberInitExpression expression)
        {
            Reference<Expression> newExpression = new Reference<Expression>();
            var ctorVisitor = CreateNewVisitor(newExpression);
            ctorVisitor.Visit(expression.Constructor);
            if (ctorVisitor.IsEnumerable)
                IsEnumerable = true;
            Type type = ctorVisitor._type;
            List<MemberAssignment> memberAssignments = new List<MemberAssignment>();
            bool resetMemberAssignments = false;
            for (; ; )
            {
                foreach (var s in expression.Setters)
                {
                    Reference<Expression> setterExpression = new Reference<Expression>();
                    var memberAssignmentVisitor = CreateNewVisitor(setterExpression);
                    memberAssignmentVisitor.Visit(s.Value);
                    if (memberAssignmentVisitor.IsEnumerable && !IsEnumerable)
                    {
                        IsEnumerable = true;
                        resetMemberAssignments = true;
                        break;
                    }
                    memberAssignments.Add(Expression.Bind(type.GetProperty(s.MemberName), setterExpression.Value));
                }
                if (!resetMemberAssignments)
                    break;
                memberAssignments.Clear();
            }
            _expressionReference.Value = Expression.MemberInit((NewExpression)newExpression.Value, memberAssignments);
        }
        
        protected internal override void VisitMethodCall(SerializableMethodCallExpression expression)
        {
            Reference<Expression> source = new Reference<Expression>();
            if (expression.Source != null)
            {
                var sourceVisitor = CreateNewVisitor(source);
                sourceVisitor.Visit(expression.Source);
                if (sourceVisitor.IsEnumerable)
                    IsEnumerable = true;
            }
            var isParametersEnumerable = new List<int>();
            var method = GetMethodInfo(expression);
            bool parameterNull = false;
            List<Expression> parameters = expression.Parameters.Select((p, pi) =>
            {
                if (parameterNull)
                    return null;
                Visitor visitor;
                Reference<Expression> parameter = new Reference<Expression>();
                bool takeOneWithSpecification = false;
                switch (method.Name)
                {
                    case "First":
                    case "FirstOrDefault":
                    case "Single":
                    case "SingleOrDefault":
                    case "Last":
                    case "LastOrDefault":
                        if (method.DeclaringType == typeof(Queryable))
                        {
                            if (pi == 1)
                                return null;
                            if (expression.Parameters.Count == 2)
                            {
                                expression.MemberName = "Where";
                                expression.Signature = typeof(Queryable).GetMethods().First(m => m.Name == "Where" && m.GetParameters()[1].ParameterType.GetGenericArguments()[0].GetGenericArguments().Length == 2).ToString();
                                p = expression;
                                method = method.DeclaringType.GetMethods().First(m => m.Name == method.Name && m.GetParameters().Length == 1).MakeGenericMethod(method.GetGenericArguments());
                            }
                        }
                        visitor = CreateNewVisitor(parameter, _withSpecificationsProperties != null ? new List<string>(_withSpecificationsProperties) : null);
                        if (_withSpecificationsProperties != null)
                        {
                            if (! method.Name.StartsWith("Last"))
                                takeOneWithSpecification = true;
                            _withSpecificationsProperties = null;
                        }
                        break;
                    default:
                        visitor = CreateNewVisitor(parameter);
                        break;
                }
                SerializableConstantExpression serializableConstantExpression;
                if ((method.DeclaringType == typeof(Enumerable) || method.DeclaringType == typeof(Queryable)) && (method.Name == "Take" || method.Name == "Skip") && (serializableConstantExpression = p as SerializableConstantExpression) != null && serializableConstantExpression.Value is int)
                    return Expression.Constant(serializableConstantExpression.Value, typeof(int));
                visitor.Visit(p);
                if (visitor.IsEnumerable)
                {
                    MethodCallExpression arg0;
                    MethodCallExpression methodCall;
                    if (takeOneWithSpecification && (arg0 = (methodCall = (MethodCallExpression)parameter.Value).Arguments[0] as MethodCallExpression) != null && arg0.Method.Name == "Select" && arg0.Method.DeclaringType == typeof(Queryable))
                    {
                        var expSource = arg0.Arguments[0];
                        var genericType = arg0.Method.GetGenericArguments()[0];
                        if (expression.Parameters.Count == 2)
                        {
                            var expPredicateReference = new Reference<Expression>();
                            var expPredicateVisitor = CreateNewVisitor(expPredicateReference);
                            expPredicateVisitor.Visit(expression.Parameters[1]);
                            expSource = Expression.Call(typeof(Queryable).GetMethods().First(m => 
                                {
                                    ParameterInfo[] mParameters;
                                    if (m.Name != "Where" || (mParameters = m.GetParameters()).Length != 2)
                                        return false;
                                    Type[] genericArgs = mParameters[1].ParameterType.GetGenericArguments();
                                    return genericArgs.Length == 1 && genericArgs[0].GetGenericArguments().Length == 2;
                                }).MakeGenericMethod(genericType), expSource, Expression.Quote(expPredicateReference.Value));
                        }
                        expSource = Expression.Call(typeof(Queryable).GetMethod("Take").MakeGenericMethod(genericType), expSource, Expression.Constant(1));
                        _isEnumerableExpressions.Remove(parameter.Value);
                        var parameterSelectSource = Expression.Call(arg0.Method, expSource, arg0.Arguments[1]);
                        parameter.Value = Expression.Call(methodCall.Method, parameterSelectSource, methodCall.Arguments[1]);
                        _isEnumerableExpressions.Add(parameter.Value, true);
                        _isEnumerableExpressions.Add(parameterSelectSource, false);
                        parameterNull = true;
                    }
                    isParametersEnumerable.Add(pi);
                }
                return parameter.Value;
            }).Where(p => p != null).ToList();
            var value = VisitMethodCall(source.Value, method, parameters, isParametersEnumerable);
            if (value != null)
            {
                _expressionReference.Value = value;
                return;
            }
            if (isParametersEnumerable.Any() && method.DeclaringType == typeof(Queryable))
            {
                IsEnumerable = true;
                switch (method.Name)
                {
                    case "Where":
                        value = VisitWhereCallEnumerableAndQueryable(expression, method, parameters);
                        break;
                    case "ThenBy":
                    case "ThenByDescending":
                        value = VisitThenByOrThenByDescendingCallEnumerableAndQueryable(expression, method, parameters);
                        break;
                    case "Take":
                    case "Skip":
                        value = VisitTakeOrSkipCallEnumerableAndQueryable(expression, method, parameters);
                        break;
                    case "First":
                    case "FirstOrDefault":
                    case "Single":
                    case "SingleOrDefault":
                        value = VisitFirstOrFirstOrDefaultOrSingleOrSingleOrDefaultCallEnumerableAndQueryable(expression, method, parameters);
                        break;
                    case "Select":
                        break;
                }
                if (value != null)
                {
                    _expressionReference.Value = value;
                    return;
                }
                method = GetMethodInfo(expression);
                Type[] methodGenericArguments;
                if (method.GetParameters().Length == 2 && parameters.Count == 1 && (methodGenericArguments = method.GetGenericArguments()).Length == 1)
                    method = method.DeclaringType.GetMethods().First(m => m.Name == method.Name && m.GetParameters().Length == 1).MakeGenericMethod(methodGenericArguments[0]);
            }
            if (method.GetCustomAttributes(typeof(SpecificationsAttribute), true).Length == 0)
            {
                if (method.Name == "Contains" && source.Value != null && source.Value.Type != method.DeclaringType && source.Value.Type.GetInterfaces().Contains(typeof(IEnumerable)))
                {
                    method = typeof(Enumerable).GetMethods().First(m => m.Name == "Contains" && m.GetParameters().Length == 2).MakeGenericMethod(method.DeclaringType.GetGenericArguments()[0]);
                    parameters.Insert(0, source.Value);
                    source.Value = null;
                }
                _expressionReference.Value = Expression.Call(source.Value, method, parameters);
            }
            else
            {
                var dalSpecification = (LambdaExpression)_serializableExpressionConverter.GetSpecificationLINQExpression(method, parameters, source.Value.Type);
                if (dalSpecification == null || IsEnumerable)
                {
                    _expressionReference.Value = Expression.Call(source.Value, method, parameters);
                    IsEnumerable = true;
                }
                else
                    _expressionReference.Value = dalSpecification.Body.ReplaceParameter(dalSpecification.Parameters[0], source.Value);
            }
        }
        
        protected virtual Expression VisitMethodCall(Expression source, MethodInfo method, List<Expression> parameters, List<int> isParametersEnumerable)
        {
            return null;
        }
        
        protected virtual Expression GetQueryableExpression(Expression expression, Func<MethodCallExpression, bool?> allowedMethod)
        {
            Expression previousExpression = expression as MethodCallExpression;
            if (previousExpression == null)
                return null;
            MethodCallExpression previousMethodCallExpression;
            while ((previousMethodCallExpression = previousExpression as MethodCallExpression) != null)
            {
                switch (allowedMethod(previousMethodCallExpression))
                {
                    case true:
                        return previousExpression;
                    case false:
                        return null;
                }
                if ((previousExpression = previousMethodCallExpression.Arguments.FirstOrDefault()) == null)
                    break;
            }
            return previousExpression;
        }
        
        protected virtual Expression VisitWhereCallEnumerableAndQueryable(SerializableMethodCallExpression expression, MethodInfo method, List<Expression> parameters)
        {
            Expression selectExpressionBody;
            ParameterExpression selectExpressionParameter;
            Expression previousExpression = ExtractQueryable(parameters[0], out selectExpressionBody, out selectExpressionParameter);
        
            List<Expression> queryableExpressions = new List<Expression>();
            List<Expression> enumerableExpressions = new List<Expression>();
            Stack<Expression> predicateExpressions = new Stack<Expression>();
            LambdaExpression lambda = (LambdaExpression)parameters[1];
            var lambdaParameter = lambda.Parameters[0];
            predicateExpressions.Push(lambda.Body);
            if (_isEnumerableExpressions[parameters[1]])
                while (predicateExpressions.Any())
                {
                    var predicate = predicateExpressions.Pop();
                    BinaryExpression binaryExp = predicate as BinaryExpression;
                    if (binaryExp != null && predicate.NodeType == ExpressionType.AndAlso)
                    {
                        if (_isEnumerableExpressions[binaryExp.Left])
                            predicateExpressions.Push(binaryExp.Left);
                        else
                            queryableExpressions.Add(predicate);
                        if (_isEnumerableExpressions[binaryExp.Right])
                            predicateExpressions.Push(binaryExp.Right);
                        else
                            queryableExpressions.Add(binaryExp.Right);
                    }
                    else
                        enumerableExpressions.Add(predicate);
                }
            else
                queryableExpressions.Add(lambda.Body);
        
            if (queryableExpressions.Count == 0)
                return null;
        
            if (previousExpression == null || !_isEnumerableExpressions.ContainsKey(previousExpression) || _isEnumerableExpressions[previousExpression])
                throw new InvalidOperationException();
        
            _isEnumerableExpressions.Remove(parameters[1]);
        
            var whereParameter = Expression.Parameter(method.GetGenericArguments()[0]);
            _isEnumerableExpressions.Remove(parameters[0]);
            Func<Expression, Expression> whereLambdaSelector;
            if (selectExpressionBody == null)
                whereLambdaSelector = e => e.ReplaceParameter(lambda.Parameters[0], whereParameter);
            else
            {
                whereLambdaSelector = e => e.ReplaceParameter(lambda.Parameters[0], selectExpressionBody);
                whereParameter = selectExpressionParameter;
                method = method.GetGenericMethodDefinition().MakeGenericMethod(whereParameter.Type);
            }
            var queryableSource = Expression.Call(method, previousExpression, Expression.Quote(Expression.Lambda(queryableExpressions.Select(whereLambdaSelector).Aggregate((e1, e2) => Expression.AndAlso(e1, e2)), whereParameter)));
            _isEnumerableExpressions.Add(queryableSource, false);
            parameters[0] = parameters[0].ReplaceExpression(previousExpression, queryableSource);
            if (!_isEnumerableExpressions.ContainsKey(parameters[0]))
                _isEnumerableExpressions.Add(parameters[0], true);
            if (enumerableExpressions.Count == 0)
                return parameters[0];
        
            parameters[1] = (LambdaExpression)parameters[1].ReplaceExpression(lambda.Body, enumerableExpressions.Aggregate((e1, e2) => Expression.AndAlso(e1, e2)));
            _isEnumerableExpressions.Add(parameters[1], true);
            return null;
        }
        
        private Expression ExtractQueryable(Expression expression, out Expression selectExpressionBody, out ParameterExpression selectExpressionParameter)
        {
            Expression selectExpressionBodyValue = null;
            ParameterExpression selectExpressionParameterValue = null;
            Expression previousExpression = GetQueryableExpression(expression, m =>
            {
                if (m.Method.DeclaringType != typeof(Enumerable))
                    return true;
                switch (m.Method.Name)
                {
                    case "Select":
                        if (_isEnumerableExpressions[m.Arguments[1]])
                            return false;
                        var selectLambda = (LambdaExpression)m.Arguments[1];
                        if (selectExpressionBodyValue == null)
                            selectExpressionBodyValue = selectLambda.Body;
                        else
                            selectExpressionBodyValue = selectExpressionBodyValue.ReplaceParameter(selectExpressionParameterValue, selectLambda.Body);
                        selectExpressionParameterValue = selectLambda.Parameters[0];
                        break;
                    case "SelectMany":
                    case "GroupBy":
                    case "GroupJoin":
                    case "Join":
                    case "Reverse":
                    case "Union":
                    case "Take":
                    case "Skip":
                        return false;
                }
                return null;
            });
            selectExpressionBody = selectExpressionBodyValue;
            selectExpressionParameter = selectExpressionParameterValue;
            return previousExpression;
        }
        
        protected virtual Expression VisitThenByOrThenByDescendingCallEnumerableAndQueryable(SerializableMethodCallExpression expression, MethodInfo method, List<Expression> parameters)
        {
            expression.Signature = Regex.Replace(expression.Signature, @"ThenBy((?:Descending)?)(.*?)System.Linq.IOrderedQueryable", m =>
            {
                expression.MemberName = "OrderBy" + m.Groups[1].Value;
                return string.Concat(expression.MemberName, m.Groups[2].Value, "System.Collections.Generic.IEnumerable");
            });
            return null;
        }
        
        protected virtual Expression VisitTakeOrSkipCallEnumerableAndQueryable(SerializableMethodCallExpression expression, MethodInfo method, List<Expression> parameters)
        {
            Expression previousExpression = parameters[0];
            MethodCallExpression previousMethodCallExpression;
            MethodInfo previousMethod = null;
            while ((previousMethodCallExpression = previousExpression as MethodCallExpression) != null && (previousMethod = previousMethodCallExpression.Method).DeclaringType == typeof(Enumerable))
            {
                switch (previousMethod.Name)
                {
                    case "Where":
                    case "OrderBy":
                    case "OrderByDescending":
                    case "Take":
                    case "Skip":
                    case "SelectMany":
                    case "Distinct":
                    case "GroupBy":
                    case "GroupJoin":
                    case "Join":
                    case "Reverse":
                    case "Union":
                        return null;
                }
                if ((previousExpression = previousMethodCallExpression.Arguments.FirstOrDefault()) == null)
                    break;
            }
        
            if (previousExpression == null || !_isEnumerableExpressions.ContainsKey(previousExpression) || _isEnumerableExpressions[previousExpression])
                throw new InvalidOperationException();
        
            _isEnumerableExpressions.Remove(parameters[0]);
            var queryableValue = Expression.Call(method.GetGenericMethodDefinition().MakeGenericMethod(previousExpression.Type.GetGenericArguments()[0]), previousExpression, parameters[1]);
            _isEnumerableExpressions.Add(queryableValue, false);
            var value = parameters[0].ReplaceExpression(previousExpression, queryableValue);
            _isEnumerableExpressions.Add(value, true);
        
            return value;
        }
        
        protected virtual Expression VisitFirstOrFirstOrDefaultOrSingleOrSingleOrDefaultCallEnumerableAndQueryable(SerializableMethodCallExpression expression, MethodInfo method, List<Expression> parameters)
        {
            if (parameters.Count == 2)
                return null;
        
            Expression previousExpression = parameters[0];
            MethodCallExpression previousMethodCallExpression;
            MethodInfo previousMethod = null;
            while ((previousMethodCallExpression = previousExpression as MethodCallExpression) != null && (previousMethod = previousMethodCallExpression.Method).DeclaringType == typeof(Enumerable))
            {
                switch (previousMethod.Name)
                {
                    case "Where":
                    case "OrderBy":
                    case "OrderByDescending":
                    case "Take":
                    case "Skip":
                    case "SelectMany":
                    case "Distinct":
                    case "GroupBy":
                    case "GroupJoin":
                    case "Join":
                    case "Reverse":
                    case "Union":
                        return null;
                }
                if ((previousExpression = previousMethodCallExpression.Arguments.FirstOrDefault()) == null)
                    break;
            }
        
            if (previousExpression == null || !_isEnumerableExpressions.ContainsKey(previousExpression) || _isEnumerableExpressions[previousExpression])
                throw new InvalidOperationException();
        
            int take;
            switch (method.Name)
            {
                case "First":
                case "FirstOrDefault":
                    take = 1;
                    break;
                case "Single":
                case "SingleOrDefault":
                    take = 2;
                    break;
                default:
                    throw new InvalidOperationException();
            }
        
            _isEnumerableExpressions.Remove(parameters[0]);
            var queryableValue = Expression.Call(typeof(Queryable).GetMethod("Take").MakeGenericMethod(previousExpression.Type.GetGenericArguments()[0]), previousExpression, Expression.Constant(take, typeof(int)));
            _isEnumerableExpressions.Add(queryableValue, false);
            parameters[0] = parameters[0].ReplaceExpression(previousExpression, queryableValue);
            _isEnumerableExpressions.Add(parameters[0], true);
        
            return null;
        }
        
        protected MethodInfo GetMethodInfo(SerializableMethodCallExpression expression)
        {
            var declaringType = expression.MemberDeclaringType.ToType(_serializableExpressionConverter, false);
            if (declaringType == typeof(Queryable) && IsEnumerable)
            {
                declaringType = typeof(Enumerable);
                expression.Signature = Regex.Replace(Regex.Replace(expression.Signature, @"System.Linq.Expressions.Expression`1\[((?>[^\[\]]+|\[(?<DEPTH>)|\](?<-DEPTH>))*(?(DEPTH)(?!)))\]", m => m.Groups[1].Value), @"System.Linq.I(\w*)Queryable", m => m.Groups[1].Value.Length == 0 ? "System.Collections.Generic.IEnumerable" : string.Concat("System.Linq.I", m.Groups[1].Value, "Enumerable"));
            }
            var methodInfo = declaringType.GetMethods().Where(mi => mi.Name == expression.MemberName).Select(mi => mi.IsGenericMethod ? mi.GetGenericMethodDefinition() : mi).First(mi => expression.Signature == null || mi.ToString() == expression.Signature);
            if (expression.GenericArguments.Count != 0)
                methodInfo = methodInfo.MakeGenericMethod(expression.GenericArguments.Select(ga => ga.ToType(_serializableExpressionConverter)).ToArray());
            return methodInfo;
        }
        
        protected internal override void VisitParameter(SerializableParameterExpression expression)
        {
            _expressionReference.Value = GetParameterExpression(expression);
        }
        
        protected internal override void VisitPropertyGetter(SerializablePropertyGetterExpression expression)
        {
            Reference<Expression> source = new Reference<Expression>();
            if (expression.Source != null)
                CreateNewVisitor(source).Visit(expression.Source);
            if (expression.MemberName == "Count" && source.Value.Type.GetProperty(expression.MemberName) == null)
                _expressionReference.Value = Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Count" && m.GetParameters().Length == 1).MakeGenericMethod(source.Value.Type.GetGenericArguments()[0]), source.Value);
            else
            {
                if (source.Value == null)
                {
                    _expressionReference.Value = GetSpecificProperty(expression.MemberName);
                    return;
                }
                var property = source.Value.Type.GetProperty(expression.MemberName);
                if (property.GetCustomAttributes(typeof(SpecificationsAttribute), true).Length == 0)
                    _expressionReference.Value = GetPropertyGetterExpression(source.Value, property);
                else
                {
                    var dalSpecification = (LambdaExpression)_serializableExpressionConverter.GetSpecificationLINQExpression(property, source.Value.Type);
                    if (dalSpecification == null || IsEnumerable)
                    {
                        _expressionReference.Value = Expression.MakeMemberAccess(source.Value, property);
                        IsEnumerable = true;
                    }
                    else
                        _expressionReference.Value = dalSpecification.Body.ReplaceParameter(dalSpecification.Parameters[0], source.Value);
                }
            }
        }
        
        protected virtual Expression GetSpecificProperty(string propertyName)
        {
            Expression value = null;
            GetSpecificProperty(propertyName, ref value);
            if (value != null)
                return value;
            throw new InvalidOperationException();
        }
        partial void GetSpecificProperty(string propertyName, ref Expression expression);
        
        protected virtual Expression GetPropertyGetterExpression(Expression source, PropertyInfo property)
        {
            return _serializableExpressionConverter.GetCustomPropertyExpression(source, property) ?? Expression.MakeMemberAccess(source, property);
        }
        
        protected internal override void VisitUnary(SerializableUnaryExpression expression)
        {
            Reference<Expression> operand = new Reference<Expression>();
            var operandVisitor = CreateNewVisitor(operand);
            operandVisitor.Visit(expression.Operand);
            _expressionReference.Value = Expression.MakeUnary(EnumUtils.GetEnumValue<ExpressionType>(expression.NodeType), operand.Value, expression.Type.ToType(_serializableExpressionConverter));
            if (operandVisitor.IsEnumerable)
                IsEnumerable = true;
        }
        
        protected internal override void VisitConditional(SerializableConditionalExpression expression)
        {
            Reference<Expression> test = new Reference<Expression>();
            var testVisitor = CreateNewVisitor(test);
            testVisitor.Visit(expression.TestExpression);
            if (testVisitor.IsEnumerable)
                IsEnumerable = true;
            Reference<Expression> ifTrue = new Reference<Expression>();
            var trueVisitor = CreateNewVisitor(ifTrue);
            trueVisitor.Visit(expression.IfTrueExpression);
            if (trueVisitor.IsEnumerable && !IsEnumerable)
            {
                IsEnumerable = true;
                if (!testVisitor.IsEnumerable)
                {
                    testVisitor = CreateNewVisitor(test);
                    testVisitor.Visit(expression.TestExpression);
                }
            }
            Reference<Expression> ifFalse = new Reference<Expression>();
            var falseVisitor = CreateNewVisitor(ifFalse);
            falseVisitor.Visit(expression.IfFalseExpression);
            if (falseVisitor.IsEnumerable && !IsEnumerable)
            {
                IsEnumerable = true;
                if (!testVisitor.IsEnumerable)
                {
                    testVisitor = CreateNewVisitor(test);
                    testVisitor.Visit(expression.TestExpression);
                }
                if (!trueVisitor.IsEnumerable)
                {
                    trueVisitor = CreateNewVisitor(ifTrue);
                    trueVisitor.Visit(expression.IfTrueExpression);
                }
            }
            Type type = expression.Type.ToType(_serializableExpressionConverter);
            _expressionReference.Value = Expression.Condition(test.Value, ifTrue.Value, ifFalse.Value, type);
        }
    }
        
    private class SelectOptimizerVisitor : ExpressionVisitor
    {
        private Expression _queryableExpression;
        private List<List<PropertyInfo>> _dependentProperties;
        private ISerializableExpressionConverter _serializableExpressionConverter;
        private List<List<PropertyInfo>> _currentDependentProperties;
        private bool _isMember;
        
        public SelectOptimizerVisitor(Expression queryableExpression, List<List<PropertyInfo>> dependentProperties, ISerializableExpressionConverter serializableExpressionConverter)
        {
            _queryableExpression = queryableExpression;
            _dependentProperties = dependentProperties;
            _serializableExpressionConverter = serializableExpressionConverter;
        }
        
        public override Expression Visit(Expression node)
        {
            if (node == _queryableExpression)
                return node;
            _isMember = false;
            var value = base.Visit(node);
            if (!_isMember)
                _currentDependentProperties = null;
            return value;
        }
        
        protected override Expression VisitMember(MemberExpression node)
        {
            var propertyInfo = node.Member as PropertyInfo;
            if (propertyInfo != null)
                AddDependences(propertyInfo);
            Visit(node.Expression);
            return node;
        }
        
        protected override Expression VisitMethodCall(MethodCallExpression node)
        {
            var properties = _serializableExpressionConverter.GetDependentProperties(node.Method).ToList();
            if (properties.Count != 0)
            {
                if (node.Arguments.Count != 0)
                {
                    List<List<PropertyInfo>> argumentProperties = new List<List<PropertyInfo>>();
                    var visitor = new SelectOptimizerVisitor(null, argumentProperties, _serializableExpressionConverter);
                    visitor.Visit(node.Arguments[0]);
                    if (argumentProperties.Count != 0)
                        properties = (from p in argumentProperties
                                        from p2 in properties
                                        select p.Union(p2)).ToList();
                }
                AddDependences(properties);
                return node;
            }
            if (node.Method.DeclaringType == typeof(Enumerable))
            {
                switch (node.Method.Name)
                {
                    case "Select":
                    case "SelectMany":
                        Visit(node.Arguments[0]);
                        List<List<PropertyInfo>> argumentProperties = new List<List<PropertyInfo>>();
                        var visitor = new SelectOptimizerVisitor(null, argumentProperties, _serializableExpressionConverter);
                        visitor.Visit(node.Arguments[1]);
                        if (argumentProperties.Count != 0)
                        {
                            List<List<PropertyInfo>> dependentProperties;
                            if (_currentDependentProperties == null || _currentDependentProperties.Count == 0)
                                dependentProperties = argumentProperties;
                            else
                                dependentProperties = _currentDependentProperties.Union(argumentProperties).Select(ps => ps.ToList()).ToList();
                            AddDependences(argumentProperties, false);
                            _currentDependentProperties = dependentProperties;
                        }
                        return node;
                    default:
                        Visit(node.Arguments[0]);
                        IEnumerable<IEnumerable<PropertyInfo>> argumentPropertiesAggregation = new IEnumerable<PropertyInfo>[0];
                        foreach (var a in node.Arguments.Skip(1))
                        {
                            argumentProperties = new List<List<PropertyInfo>>();
                            visitor = new SelectOptimizerVisitor(null, argumentProperties, _serializableExpressionConverter);
                            visitor.Visit(a);
                            argumentPropertiesAggregation = argumentPropertiesAggregation.Union(argumentProperties);
                        }
                        AddDependences(argumentPropertiesAggregation, false);
                        return node;
                }
            }
            foreach (var a in node.Arguments)
            {
                List<List<PropertyInfo>> argumentProperties = new List<List<PropertyInfo>>();
                var visitor = new SelectOptimizerVisitor(null, argumentProperties, _serializableExpressionConverter);
                visitor.Visit(a);
                if (argumentProperties.Count != 0)
                    properties = (from p in argumentProperties
                                    from p2 in properties
                                    select p.Union(p2)).ToList();
                AddDependences(properties);
            }
            return node;
        }
        
        protected override MemberBinding VisitMemberBinding(MemberBinding node)
        {
            var memberAssignment = node as MemberAssignment;
            MemberExpression memberExpression;
            if (memberAssignment != null && (memberExpression = memberAssignment.Expression as MemberExpression) != null && memberAssignment.Member == memberExpression.Member)
                return node;
            return base.VisitMemberBinding(node);
        }
        
        private void AddDependences(PropertyInfo propertyInfo)
        {
            AddDependences(new List<IEnumerable<PropertyInfo>>() { new[] { propertyInfo } });
        }
        private void AddDependences(IEnumerable<IEnumerable<PropertyInfo>> propertyDependentProperties, bool applyOnCurrent = true)
        {
            _isMember = true;
            if (propertyDependentProperties == null || !propertyDependentProperties.Any())
                return;
            if (_currentDependentProperties == null)
            {
                var properties = propertyDependentProperties.Select(ps => ps.ToList()).ToList();
                if (applyOnCurrent)
                    _currentDependentProperties = properties;
                _dependentProperties.AddRange(properties);
            }
            else
            {
                if (applyOnCurrent)
                {
                    foreach (var currentDependentProperties in _currentDependentProperties)
                        _dependentProperties.Remove(currentDependentProperties);
                    _dependentProperties.AddRange(_currentDependentProperties = (from propertyDependentSubProperties in propertyDependentProperties
                                                                                    from currentDependentSubProperties in _currentDependentProperties
                                                                                    select propertyDependentSubProperties.Union(currentDependentSubProperties).ToList()).ToList());
                }
                else
                    _dependentProperties.AddRange((from propertyDependentSubProperties in _currentDependentProperties
                                                    from currentDependentSubProperties in propertyDependentProperties
                                                    select propertyDependentSubProperties.Union(currentDependentSubProperties).ToList()).ToList());
            }
        }
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("SerializableExpressionToL2EExpressionConverter.cs");
    WriteHeader(namespaceName + ".L2E", code, "System", "System.Collections.Concurrent", "System.Collections.Generic", "System.Collections.ObjectModel", "System.Linq", "System.Linq.Expressions", "System.Reflection", "System.Reflection.Emit", "System.Runtime.Serialization", "System.Threading", serverFxCommonNamespace, serverFxSerializableExpressionsNamespace, serverFxDALInterfacesL2ENamespace);
#>
public static partial class SerializableExpressionToL2EExpressionConverter
{
    public static Expression ToL2EExpression(this SerializableExpression serializableExpression, IEnumerable<string> withSpecificationsProperties, IObjectContext objectContext, ISerializableExpressionConverter serializableExpressionConverter)
    {
        var expressionReference = new Reference<Expression>();
        new Visitor(expressionReference, withSpecificationsProperties, objectContext, serializableExpressionConverter).Visit(serializableExpression);
        Dictionary<Type, int> constructorIndexes = new Dictionary<Type,int>();
        return SerializableExpressionToLINQExpressionConverter.OptimizeSelect(expressionReference.Value, serializableExpressionConverter, type =>
            {
                if (!serializableExpressionConverter.GetEntityOrComplexTypes().Any(t => t.IsAssignableFrom(type)))
                    return type;
                int index;
                if (constructorIndexes.TryGetValue(type, out index))
                    constructorIndexes[type] = ++index;
                else
                    constructorIndexes.Add(type, index = 0);
                return Visitor.GetOrBuildNewInheritedType(type, serializableExpressionConverter, index) ?? type;
            });
    }
                                
    public static object Convert(object obj)
    {
        return Visitor.Convert(obj);
    }
                    
    public static Type GetOriginalType(Type t)
    {
        return Visitor.GetOriginalType(t);
    }
                                
    public partial class Visitor : SerializableExpressionToLINQExpressionConverter.Visitor
    {
        private IObjectContext _objectContext;
        private static ConcurrentDictionary<Type, BlockingCollection<Type>> _entityToDTOTypeCache = new ConcurrentDictionary<Type, BlockingCollection<Type>>();
        private static ConcurrentDictionary<Type, Type> _dtoToEntityTypeCache = new ConcurrentDictionary<Type, Type>();
        private static ConcurrentDictionary<Type, Func<object, object>> _dtoToEntityCache = new ConcurrentDictionary<Type, Func<object, object>>();
                                
        public Visitor(Reference<Expression> expressionReference, IEnumerable<string> withSpecificationsProperties, IObjectContext objectContext, ISerializableExpressionConverter serializableExpressionConverter)
            : base(expressionReference, withSpecificationsProperties, serializableExpressionConverter)
        {
            InitVisitorFactory();
            _objectContext = objectContext;
        }
                            
        protected Visitor(Reference<Expression> expressionReference, IEnumerable<string> withSpecificationsProperties, ISerializableExpressionConverter serializableExpressionConverter, Dictionary<string, ParameterExpression> lambdaParameters, bool isEnumerable, Dictionary<Expression, bool> isEnumerableExpressions)
            : base(expressionReference, withSpecificationsProperties, serializableExpressionConverter, lambdaParameters, isEnumerable, isEnumerableExpressions)
        {
            InitVisitorFactory();
        }
                                
        private void InitVisitorFactory()
        {
            VisitorFactory = (er, wsp, sec, lp, ie, iee) => new Visitor(er, wsp, sec, lp, ie, iee) { _objectContext = _objectContext };
        }
                                
        protected override Expression GetConstructorExpression(Type type, SerializableConstructorExpression expression)
        {
            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>))
            {
                if (expression.Arguments.Count != 1)
                    throw new NotImplementedException();
                var argumentExpression = new Reference<Expression>();
                CreateNewVisitor(argumentExpression, _lambdaParameters).Visit(expression.Arguments[0]);
                return argumentExpression.Value;
            }
            return base.GetConstructorExpression(type, expression);
        }
                                
        protected override Type GetConstructorType(Type type)
        {
            return GetInheritedType(type, _serializableExpressionConverter) ?? base.GetConstructorType(type);
        }
    
        internal static Type GetInheritedType(Type type, ISerializableExpressionConverter serializableExpressionConverter)
        {
            Type inheritedType = serializableExpressionConverter.GetInheritedType(type);
            if (inheritedType == null)
                return null;
            _dtoToEntityTypeCache.TryAdd(inheritedType, type);
            _dtoToEntityCache.TryAdd(inheritedType, serializableExpressionConverter.GetBaseObject);
            return inheritedType;
        }
    
        internal static Type GetOrBuildNewInheritedType(Type type, ISerializableExpressionConverter serializableExpressionConverter, int index)
        {
            if (index == 0)
                return GetInheritedType(type, serializableExpressionConverter);
            BlockingCollection<Type> inheritedTypes;
            if (_entityToDTOTypeCache.TryGetValue(type, out inheritedTypes) && inheritedTypes.Count >= index)
                return inheritedTypes.ElementAt(index - 1);
            var assemblyName = new AssemblyName(type.Name + Guid.NewGuid().ToString());
            var appDomain = Thread.GetDomain();
            var assemblyBuilder = appDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);
            var moduleBuilder = assemblyBuilder.DefineDynamicModule(assemblyName.Name);
            var typeBuilder = moduleBuilder.DefineType(type.Name, TypeAttributes.Public, type);
            Type value = typeBuilder.CreateType();
            if (inheritedTypes == null && (!_entityToDTOTypeCache.TryAdd(type, inheritedTypes = new BlockingCollection<Type>()) && !_entityToDTOTypeCache.TryGetValue(type, out inheritedTypes)))
                throw new InvalidOperationException();
            inheritedTypes.Add(value);
            _dtoToEntityTypeCache.TryAdd(value, type);
            ParameterExpression parameter = Expression.Parameter(typeof(object));
            ParameterExpression parameterCast = Expression.Parameter(value);
            _dtoToEntityCache.TryAdd(value, Expression.Lambda<Func<object, object>>(
                Expression.Block(
                    new ParameterExpression[] { parameterCast },
                    Expression.Assign(parameterCast, Expression.Convert(parameter, value)),
                    Expression.MemberInit(
                        Expression.New(type),
                        value.GetProperties().Where(p => p.CanRead && p.CanWrite).Select(p => Expression.Bind(p, Expression.MakeMemberAccess(parameterCast, value.GetProperty(p.Name)))))),
                parameter).Compile());
            return value;
        }
                                
        protected override Type[] GetLambdaGenericArguments(SerializableLambdaExpression expression, Expression body)
        {
            Type[] genericArgumentTypes = base.GetLambdaGenericArguments(expression, body);
            for (int i = 0; i < genericArgumentTypes.Length; i++)
            {
                Type type = GetEntityType(genericArgumentTypes[i]);
                if (type != null)
                    genericArgumentTypes[i] = type;
            }
            return genericArgumentTypes;
        }
                                
        protected internal override void VisitMethodCall(SerializableMethodCallExpression expression)
        {
            var methodInfo = GetMethodInfo(expression);
            if (methodInfo.IsGenericMethod && (methodInfo.GetGenericMethodDefinition() == typeof(Enumerable).GetMethod("ToList") || methodInfo.GetGenericMethodDefinition() == typeof(Enumerable).GetMethod("ToArray")))
            {
                CreateNewVisitor(_expressionReference, _lambdaParameters).Visit(expression.Parameters[0]);
                Type parameterType = methodInfo.GetGenericArguments()[0];
                var expressionParameter = Expression.Parameter(parameterType);
                _expressionReference.Value = Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Select" && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(parameterType, parameterType), _expressionReference.Value, Expression.Lambda(expressionParameter, expressionParameter));
                return;
            }
            base.VisitMethodCall(expression);
        }
        
        protected override Expression VisitMethodCall(Expression source, MethodInfo method, List<Expression> parameters, List<int> isParametersEnumerable)
        {
            if (method.DeclaringType == typeof(Queryable))
            {
                switch (method.Name)
                {
                    case "OrderBy":
                    case "OrderByDescending":
                        if (!isParametersEnumerable.Any())
                        {
                            Expression previousExpression = parameters[0];
                            MethodCallExpression previousMethodCallExpression;
                            MethodInfo previousMethod;
                            while ((previousMethodCallExpression = previousExpression as MethodCallExpression) != null && (previousMethod = previousMethodCallExpression.Method).DeclaringType == typeof(Queryable))
                            {
                                switch (previousMethod.Name)
                                {
                                    case "Select":
                                    case "SelectMany":
                                    case "GroupBy":
                                    case "GroupJoin":
                                    case "Join":
                                    case "Reverse":
                                    case "Union":
                                    case "Take":
                                    case "Skip":
                                        return null;
                                    case "OrderBy":
                                    case "OrderByDescending":
                                        return parameters[0].ReplaceMethodCall(previousMethodCallExpression, Expression.Call(typeof(Queryable).GetMethods().First(m => m.Name == previousMethod.Name.Replace("OrderBy", "ThenBy") && m.GetParameters().Length == 2).MakeGenericMethod(previousMethod.GetGenericArguments()), Expression.Call(method, previousMethodCallExpression.Arguments[0], parameters[1]), previousMethodCallExpression.Arguments[1]));
                                }
                                if ((previousExpression = previousMethodCallExpression.Arguments.FirstOrDefault()) == null)
                                    break;
                            }
                        }
                        break;
                }
            }

            return WAQSL2EExpressionTransformation.TransformMethodCall(source, method, parameters, _objectContext) ?? base.VisitMethodCall(source, method, parameters, isParametersEnumerable); 
        }
                                
        protected override Expression GetPropertyGetterExpression(Expression source, PropertyInfo property)
        {
            if (property.Name == "Count" && source.Type.IsGenericType && typeof(Collection<>).MakeGenericType(source.Type.GetGenericArguments()[0]).IsAssignableFrom(source.Type))
                return Expression.Call(typeof(Enumerable).GetMethods().First(m => m.Name == "Count" && m.GetParameters().Length == 1).MakeGenericMethod(source.Type.GetGenericArguments()[0]), source);
            return WAQSL2EExpressionTransformation.TransformProperty(source, property, _objectContext) ?? base.GetPropertyGetterExpression(source, property);
        }
                            
        protected override Expression GetSpecificProperty(string propertyName)
        {
            switch (propertyName)
            {
                case "DbDateTime":
                    return _objectContext.GetDbDateTimeExpression();
            }
            Expression value = null;
            GetSpecificProperty(propertyName, ref value);
            return value ?? base.GetSpecificProperty(propertyName);
        }
        partial void GetSpecificProperty(string propertyName, ref Expression expression);
    
        protected internal override void VisitUnary(SerializableUnaryExpression expression)
        {
            base.VisitUnary(expression);
            var exp = (UnaryExpression)_expressionReference.Value;
            if (exp.NodeType == ExpressionType.Convert && exp.Type.GetCustomAttributes(typeof(DataContractAttribute), false).Any())
                _expressionReference.Value = Expression.TypeAs(exp.Operand, exp.Type);
        }
                                
        public Type GetEntityType(Type type)
        {
            return _serializableExpressionConverter.GetBaseType(type) ?? type;
        }
                                
        public static object Convert(object obj)
        {
            if (obj == null)
                return null;
                                
            Func<object, object> convert;
            if (_dtoToEntityCache.TryGetValue(obj.GetType(), out convert))
                return convert(obj);
            return obj;
        }
                    
        public static Type GetOriginalType(Type type)
        {
            Type value;
            return _dtoToEntityTypeCache.TryGetValue(type, out value) ? value : type;
        }

        protected override void MakeBinary(SerializableBinaryExpression source, Expression leftExpression, Expression rightExpression)
        {
            if ((_expressionReference.Value = WAQSL2EExpressionTransformation.TransformBinary(source.NodeType, leftExpression, rightExpression, _objectContext)) == null)
                base.MakeBinary(source, leftExpression, rightExpression);
        }
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("Reference.cs");
    WriteHeader(namespaceName, code);
#>
public class Reference<T>
{
    public T Value { get; set; }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("SerializableExpressionProvider.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", "System.Linq.Expressions", serverFxServiceInterfacesNamespace, serverFxSerializableExpressionsNamespace);
#>
public class SerializableExpressionProvider : ISerializableExpressionProvider
{
    private Func<SerializableExpression, IEnumerable<string>, Expression> _expressionConverter;
    private Func<object, object> _convert;
    private Func<Type, Type> _getOriginalType;
    
    public SerializableExpressionProvider(Func<SerializableExpression, IEnumerable<string>, Expression> expressionConverter, Func<object, object> convert, Func<Type, Type> getOriginalType)
    {
        _expressionConverter = expressionConverter;
        _convert = convert;
        _getOriginalType = getOriginalType;
    }
    
    public Expression ToExpression(SerializableExpression serializableExpression, IEnumerable<string> withSpecificationsProperties)
    {
        return _expressionConverter(serializableExpression, withSpecificationsProperties);
    }

    public virtual Type GetOriginalType(Type type)
    {
        return _getOriginalType(type);
    }

    public virtual object Convert(object p)
    {
        if (p == null)
            return null;
        return _convert(p);
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("ServiceBase.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections", "System.Collections.Generic", "System.IO", "System.Linq", "System.Linq.Expressions", "System.Reflection", "System.Runtime.Serialization", serverFxServiceInterfacesNamespace);
#>
public abstract partial class ServiceBase
{
    protected abstract Func<ISerializableExpressionProvider> SerializableExpressionProviderFactory { get; }
    
    protected static bool HasManyResult(Type type)
    {
        return type != typeof(string) && typeof(IEnumerable).IsAssignableFrom(type);
    }
    
    protected static bool IsGrouping(Type type)
    {
        return type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(IGrouping<,>) || type.GetGenericTypeDefinition().GetInterfaces().Any(i => i == typeof(IGrouping<,>)));
    }
    
    protected Type GetGenericType(Type type)
    {
        if (type.IsGenericType)
            return type.GetGenericArguments()[0];
        if (type.IsArray)
            return type.GetElementType();
        throw new NotImplementedException();
    }
    
    protected bool IsNullable(Type type)
    {
        return Expression.Lambda(Expression.Default(type)).Compile().DynamicInvoke() == null;
    }
    
    protected bool IsClientKnownType(Type type)
    {
        return type.Namespace != null && type.Namespace.StartsWith("System") && type.Assembly.ManifestModule.Name == "mscorlib.dll" || type.GetCustomAttributes(typeof(DataContractAttribute), true).OfType<DataContractAttribute>().Any();
    }
    
    
    protected Expression<Func<object, QueryResultRecord>> CreateQueryResultExpression(Type type, Type originalType)
    {
        var objectParameter = Expression.Parameter(typeof(object));
        var typedObjectParameter = Expression.Convert(objectParameter, type);
        var queryResultVariable = Expression.Variable(typeof(QueryResultRecord));
        bool isNullable = IsNullable(type);
    
        Expression lambdaBody;
        if (isNullable)
            lambdaBody = Expression.IfThenElse(
                Expression.Equal(
                    objectParameter,
                    Expression.Constant(null, typeof(object))),
                Expression.Assign(
                    queryResultVariable,
                    Expression.Constant(null, typeof(QueryResultRecord))),
                GetQueryResultExpression(type, originalType, typedObjectParameter, queryResultVariable));
        else
            lambdaBody = GetQueryResultExpression(type, originalType, typedObjectParameter, queryResultVariable);
    
        return Expression.Lambda<Func<object, QueryResultRecord>>(
            Expression.Block(
                new ParameterExpression[] { queryResultVariable },
                lambdaBody,
                queryResultVariable),
            objectParameter);
    }
    
    protected Expression GetQueryResultExpression(Type type, Type originalType, Expression obj, ParameterExpression queryResultVariable)
    {
        bool isNullable = IsNullable(type);
        var valueVariable = Expression.Variable(originalType);
        var serializableExpressionProvider = ((Expression<Func<ISerializableExpressionProvider>>)(() => SerializableExpressionProviderFactory())).Body;
    
        Expression lambdaBody1;
        if (isNullable && !IsClientKnownType(type))
        {
            if (IsGrouping(originalType))
                lambdaBody1 =
                    Expression.Assign(
                        queryResultVariable,
                        GetGroupingExpression(originalType, obj));
            else
                lambdaBody1 =
                    Expression.Assign(
                        queryResultVariable,
                        Expression.MemberInit(
                            Expression.New(typeof(QueryResultRecord)),
                            Expression.Bind(
                                typeof(QueryResultRecord).GetProperty("Properties"),
                                GetPropertiesExpression(type, valueVariable))));
        }
        else
            lambdaBody1 =
                Expression.Assign(
                    queryResultVariable,
                    Expression.MemberInit(
                        Expression.New(typeof(QueryResultRecord)),
                        Expression.Bind(
                            typeof(QueryResultRecord).GetProperty("SerializedValue"),
                            GetSerializedObject(type, valueVariable))));
    
        List<Expression> lambdaBodyExpressions = new List<Expression>()
            {
                isNullable ? 
                    Expression.IfThen(
                        Expression.NotEqual(
                            valueVariable,
                            Expression.Constant(null, typeof(object))),
                        lambdaBody1) : 
                    lambdaBody1
            };
    
        if (isNullable && originalType.IsClass)
            lambdaBodyExpressions.Insert(0,
                Expression.Assign(
                    valueVariable,
                    Expression.Convert(
                        Expression.Call(
                            serializableExpressionProvider,
                            typeof(ISerializableExpressionProvider).GetMethod("Convert", new Type[] { typeof(object) }),
                            obj),
                        originalType)));
        else
            lambdaBodyExpressions.Insert(0,
                Expression.Assign(
                    valueVariable,
                    obj));
    
        return Expression.Block(
            new ParameterExpression[] { valueVariable },
            lambdaBodyExpressions);
    }
    
    protected ListInitExpression GetPropertiesExpression(Type type, Expression obj)
    {
        return Expression.ListInit(
            Expression.New(typeof(List<QueryResultProperty>).GetConstructor(new Type[0])),
            type.GetProperties().Select(p =>
                Expression.ElementInit(
                    typeof(List<QueryResultProperty>).GetMethod("Add"),
                    GetPropertyExpression(
                        p,
                        obj))).ToArray());
    }
    
    protected Expression GetPropertyExpression(PropertyInfo p, Expression obj)
    {
        return GetPropertyExpression(p.Name, p.PropertyType, Expression.MakeMemberAccess(obj, p));
    }
    protected Expression GetPropertyExpression(string propertyName, Type propertyType, Expression obj)
    {
        var newQueryResultPropertyExpression = Expression.New(typeof(QueryResultProperty));
    
        if (!IsNullable(propertyType))
            return Expression.MemberInit(
                newQueryResultPropertyExpression,
                Expression.Bind(
                    typeof(QueryResultProperty).GetProperty("PropertyName"),
                    Expression.Constant(propertyName)),
                Expression.Bind(
                    typeof(QueryResultProperty).GetProperty("SerializedValue"),
                    GetSerializedObject(propertyType, obj)));
    
        if (HasManyResult(propertyType))
        {
            if (IsGrouping(propertyType))
                return Expression.MemberInit(
                    newQueryResultPropertyExpression,
                    Expression.Bind(
                        typeof(QueryResultProperty).GetProperty("PropertyName"),
                        Expression.Constant(propertyName)),
                    Expression.Bind(
                        typeof(QueryResultProperty).GetProperty("Value"),
                        GetGroupingExpression(propertyType, obj)));
            else
            {
                var elementType = GetGenericType(propertyType);
                var selectParameter = Expression.Parameter(elementType);
                var valueVariable = Expression.Variable(typeof(QueryResultRecord));
                return Expression.MemberInit(
                    newQueryResultPropertyExpression,
                    Expression.Bind(
                        typeof(QueryResultProperty).GetProperty("PropertyName"),
                        Expression.Constant(propertyName)),
                    Expression.Bind(
                        typeof(QueryResultProperty).GetProperty("Values"),
                        Expression.Call(
                            typeof(Enumerable).GetMethod("ToList").MakeGenericMethod(typeof(QueryResultRecord)),
                            Expression.Call(
                                typeof(Enumerable).GetMethods().First(m => m.Name == "Select" && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2).MakeGenericMethod(elementType, typeof(QueryResultRecord)),
                                obj,
                                Expression.Lambda(
                                    Expression.Block(
                                        new ParameterExpression[] { valueVariable },
                                        GetQueryResultExpression(elementType, SerializableExpressionProviderFactory().GetOriginalType(elementType), selectParameter, valueVariable),
                                        valueVariable),
                                    selectParameter)))));
            }
        }
        else
        {
            if (IsClientKnownType(propertyType))
            {
                return Expression.MemberInit(
                    newQueryResultPropertyExpression,
                    Expression.Bind(
                        typeof(QueryResultProperty).GetProperty("PropertyName"),
                        Expression.Constant(propertyName)),
                    Expression.Bind(
                        typeof(QueryResultProperty).GetProperty("SerializedValue"),
                        GetSerializedObject(propertyType, obj)));
            }
            else
            {
                return Expression.MemberInit(
                    newQueryResultPropertyExpression,
                    Expression.Bind(
                        typeof(QueryResultProperty).GetProperty("PropertyName"),
                        Expression.Constant(propertyName)),
                    Expression.Bind(
                        typeof(QueryResultProperty).GetProperty("Value"),
                        GetAnonymousType(propertyType, obj)));
            }
        }
    }
    
    protected Expression GetValue(Type type, Expression objExpression)
    {
        int indexEnumerable = 0;
        var typeLoop = type;
        var types = new List<Type>() { type };
        while (typeLoop.IsGenericType && typeLoop.GetGenericTypeDefinition() == typeof(IEnumerable<>))
        {
            indexEnumerable++;
            typeLoop = typeLoop.GetGenericArguments()[0];
            types.Insert(0, typeLoop);
        }
    
        var serializableExpressionProvider = SerializableExpressionProviderFactory();
        var serializableExpressionProviderExpression = ((Expression<Func<ISerializableExpressionProvider>>)(() => SerializableExpressionProviderFactory())).Body;
    
        var originalType = serializableExpressionProvider.GetOriginalType(typeLoop);
    
        if (!(originalType.IsClass || originalType.IsInterface))
            return objExpression;
    
        if (indexEnumerable == 0)
            return Expression.Convert(
                Expression.Call(
                    serializableExpressionProviderExpression,
                    typeof(ISerializableExpressionProvider).GetMethod("Convert", new Type[] { typeof(object) }),
                    objExpression),
                originalType);
    
        var originalTypes = new List<Type>() { originalType };
        for (int i = 0; i < indexEnumerable - 1; i++)
            originalTypes.Add(typeof(IEnumerable<>).MakeGenericType(originalTypes[i]));
    
        var selectMethod = typeof(Enumerable).GetMethods().First(m => m.Name == "Select" && m.GetParameters().Length == 2 && m.GetParameters()[1].ParameterType.IsGenericType && m.GetParameters()[1].ParameterType.GetGenericArguments().Length == 2);
    
        var selectLambdas = new List<LambdaExpression>();
        var convertParameter = Expression.Parameter(typeLoop);
        selectLambdas.Add(
            Expression.Lambda(
                Expression.Convert(
                        Expression.Call(
                            serializableExpressionProviderExpression,
                            typeof(ISerializableExpressionProvider).GetMethod("Convert", new Type[] { typeof(object) }),
                            convertParameter),
                        originalType), 
                convertParameter));
        for (int i = 0; i < indexEnumerable - 1; i++)
        {
            var parameterLoop = Expression.Parameter(typeof(IEnumerable<>).MakeGenericType(typeLoop));
            selectLambdas.Add(
                Expression.Lambda(
                    Expression.Call(
                        selectMethod.MakeGenericMethod(types[i], originalTypes[i]),
                        parameterLoop,
                        selectLambdas[i]),
                parameterLoop));
        }
        return Expression.Call(selectMethod.MakeGenericMethod(types[indexEnumerable - 1], originalTypes[indexEnumerable - 1]), objExpression, selectLambdas[selectLambdas.Count - 1]);
    }
    
    protected Expression GetSerializedObject(Type type, Expression obj)
    {
        obj = GetValue(type, obj);
    
        if (!(type.IsClass || type.IsInterface))
            obj = Expression.Convert(obj, typeof(object));
    
        var valueVariable = Expression.Variable(typeof(string));
        var memoryStreamVariable = Expression.Variable(typeof(MemoryStream));
        var streamReaderVariable = Expression.Variable(typeof(StreamReader));
        return Expression.Block(
            new ParameterExpression[] { valueVariable, memoryStreamVariable, streamReaderVariable },
            Expression.Assign(
                memoryStreamVariable,
                Expression.New(typeof(MemoryStream).GetConstructor(new Type[0]))),
            Expression.Call(
                Expression.New(
                    typeof(DataContractSerializer).GetConstructor(new Type[] { typeof(Type) }),
                    Expression.Constant(type)),
                typeof(DataContractSerializer).GetMethod("WriteObject", new Type[] { typeof(Stream), typeof(object) }),
                memoryStreamVariable,
                obj),
            Expression.Call(
                memoryStreamVariable,
                typeof(MemoryStream).GetMethod("Flush")),
            Expression.Call(
                memoryStreamVariable,
                typeof(MemoryStream).GetMethod("Seek"),
                Expression.Constant(0L),
                Expression.Constant(SeekOrigin.Begin)),
            Expression.Assign(
                streamReaderVariable,
                Expression.New(
                    typeof(StreamReader).GetConstructor(new Type[] { typeof(Stream) }),
                    memoryStreamVariable)),
            Expression.Assign(
                valueVariable,
                Expression.Call(
                    streamReaderVariable,
                    typeof(StreamReader).GetMethod("ReadToEnd"))),
            Expression.Call(
                streamReaderVariable,
                typeof(StreamReader).GetMethod("Dispose")),
            Expression.Call(
                memoryStreamVariable,
                typeof(MemoryStream).GetMethod("Dispose")),
            valueVariable);
    }
    
    protected MemberInitExpression GetGroupingExpression(Type type, Expression obj)
    {
        var keyProp = type.GetProperty("Key");
        return Expression.MemberInit(
            Expression.New(typeof(QueryResultRecord)),
            Expression.Bind(
                typeof(QueryResultRecord).GetProperty("Properties"),
                Expression.ListInit(
                    Expression.New(typeof(List<QueryResultProperty>).GetConstructor(new Type[0])),
                        GetPropertyExpression(keyProp, obj),
                        GetPropertyExpression("Values", typeof(IEnumerable<>).MakeGenericType(type.GetGenericArguments()[1]), obj))));
    }
    
    protected MemberInitExpression GetAnonymousType(Type type, Expression obj)
    {
        return Expression.MemberInit(
            Expression.New(typeof(QueryResultRecord)),
            Expression.Bind(
                typeof(QueryResultRecord).GetProperty("Properties"),
                Expression.ListInit(
                    Expression.New(typeof(List<QueryResultProperty>).GetConstructor(new Type[0])),
                    type.GetProperties().Select(p => GetPropertyExpression(p, obj)))));
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.StartNewFile("ValidationException.cs");
    WriteHeader(namespaceName, code, "System", "System.Collections.Generic", serverFxServiceInterfacesNamespace);
#>
public class ValidationException : Exception
{
    public ValidationException(IEnumerable<Error> errors)
    {
        _errors = errors;
    }
    
    private IEnumerable<Error> _errors;
    public IEnumerable<Error> Errors 
    { 
        get { return _errors; } 
    }
}
<#+
    WriteFooter(namespaceName);

    fileManager.Process();
}
#>
<#+// Copyright (c) Matthieu MEZIL.  All rights reserved.
#>
<#+// Copyright (c) Matthieu MEZIL.  All rights reserved.
#>

