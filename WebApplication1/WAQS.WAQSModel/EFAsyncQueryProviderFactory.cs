//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using WCFAsyncQueryableServices.DAL.Interfaces;

namespace WCFAsyncQueryableServices.DAL
{
    public class EFAsyncQueryProviderFactory : IAsyncQueryProviderFactory
    {
        public Task<object> ExecuteAsync(IQueryProvider queryProvider, Expression expression, CancellationToken cancellationToken)
        {
            var dbAsyncQueryProvider = queryProvider as IDbAsyncQueryProvider;
            if (dbAsyncQueryProvider == null)
                throw new InvalidOperationException();
            return dbAsyncQueryProvider.ExecuteAsync(expression, cancellationToken);
        }
    
        public Task<T> ExecuteAsync<T>(IQueryProvider queryProvider, Expression expression, CancellationToken cancellationToken)
        {
            var dbAsyncQueryProvider = queryProvider as IDbAsyncQueryProvider;
            if (dbAsyncQueryProvider == null)
                throw new InvalidOperationException();
            return dbAsyncQueryProvider.ExecuteAsync<T>(expression, cancellationToken);
        }
    
        private IAsyncEnumerableFactory _asyncEnumerableFactory;
        public IAsyncEnumerableFactory AsyncEnumerableFactory
        {
            get { return _asyncEnumerableFactory ?? (_asyncEnumerableFactory = new EFAsyncEnumerableFactory()); }
        }
    }
}
