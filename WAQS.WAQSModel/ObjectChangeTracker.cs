//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Linq;

namespace WCFAsyncQueryableServices.EntitiesTracking
{
    [DataContract(IsReference = true, Namespace = "http://WCFAsyncQueryableServices/EntityTracking")]
    public partial class ObjectChangeTracker
    {
    	private ObjectState _objectState = ObjectState.Detached;
    	[DataMember]
    	public ObjectState State
    	{
    		get { return _objectState; }
    		set
    		{
    			if (_objectState == value)
    				return;
    			if (_isDeserializing || _changeTrackingEnabled || value == ObjectState.Detached)
    			{
    				_objectState = value;
    				if (value == ObjectState.Detached)
    					IsDetaching = true;
    				OnObjectStateChanged(value);
    				IsDetaching = false;
    			}
    		}
    	}
    	public ObjectState? DetachedPreviousState { get; set; }
    
    	public void ClientContextDispose()
    	{
    		DetachedPreviousState = _objectState;
    		_objectState = ObjectState.Detached;
    	}
    		
    	protected virtual void OnObjectStateChanged(ObjectState newState)
    	{
    		EvaluateHasChanges();
    		if (ObjectStateChanged != null)
    			ObjectStateChanged(this, new ObjectStateChangedEventArgs { NewState = newState });
    	}
    	public event EventHandler<ObjectStateChangedEventArgs> ObjectStateChanged;
    	
    	private bool _changeTrackingEnabled;
    	public bool ChangeTrackingEnabled
    	{
    		get { return _changeTrackingEnabled && State != ObjectState.Detached; }
    		set { _changeTrackingEnabled = value; }
    	}
    		
    	public bool IsAttaching { get; set; }
    
    	public bool IsDetaching { get; private set; }
    	
    	private ObjectsRemovedFromCollectionProperties _objectsRemovedFromCollections;
    	[DataMember]
    	public ObjectsRemovedFromCollectionProperties ObjectsRemovedFromCollectionProperties
    	{
    		get
    		{
    			if (_objectsRemovedFromCollections == null)
    			{
    				_objectsRemovedFromCollections = new ObjectsRemovedFromCollectionProperties();
    				_objectsRemovedFromCollections.CollectionChanged += ObjectsCollectionChanged;
    			}
    
    			return _objectsRemovedFromCollections;
    		}
    		set
    		{
    			if (_objectsRemovedFromCollections != null)
    				_objectsRemovedFromCollections.CollectionChanged -= ObjectsCollectionChanged;
    			_objectsRemovedFromCollections = value;
    			if (_objectsRemovedFromCollections != null)
    				_objectsRemovedFromCollections.CollectionChanged += ObjectsCollectionChanged;
    		}
    	}
    
    	private void ObjectsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
    	{
    		EvaluateHasChanges();
    	}
    
    	private OriginalValuesDictionary _originalValues;
    	[DataMember]
    	public OriginalValuesDictionary OriginalValues
    	{
    		get
    		{
    			if (_originalValues == null)
    			{
    				_originalValues = new OriginalValuesDictionary();
    				_originalValues.CollectionChanged += ObjectsCollectionChanged;
    			}
    
    			return _originalValues;
    		}
    		set
    		{
    			if (_originalValues != null)
    				_originalValues.CollectionChanged -= ObjectsCollectionChanged;
    			_originalValues = value;
    			if (_originalValues != null)
    				_originalValues.CollectionChanged += ObjectsCollectionChanged;
    		}
    	}
    	
    	private List<string> _modifiedProperties;
    	[DataMember]
    	public List<string> ModifiedProperties
    	{
    		get { return _modifiedProperties ?? (_modifiedProperties = new List<string>()); }
    		set { _modifiedProperties = value; }
    	}
    
    	private List<string> _validationProperties;
    	public List<string> ValidationProperties
    	{
    		get { return _validationProperties ?? (_validationProperties = new List<string>()); }
    	}
    	
    	private ExtendedPropertiesDictionary _extendedProperties;
    	[DataMember]
    	public ExtendedPropertiesDictionary ExtendedProperties
    	{
    		get { return _extendedProperties ?? (_extendedProperties = new ExtendedPropertiesDictionary()); }
    		set { _extendedProperties = value; }
    	}
    	
    	private ObjectsAddedToCollectionProperties _objectsAddedToCollections;
    	[DataMember]
    	public ObjectsAddedToCollectionProperties ObjectsAddedToCollectionProperties
    	{
    		get
    		{
    			if (_objectsAddedToCollections == null)
    			{
    				_objectsAddedToCollections = new ObjectsAddedToCollectionProperties();
    				_objectsAddedToCollections.CollectionChanged += ObjectsCollectionChanged;
    			}
    
    			return _objectsAddedToCollections;
    		}
    		set
    		{
    			if (_objectsAddedToCollections != null)
    				_objectsAddedToCollections.CollectionChanged -= ObjectsCollectionChanged;
    			_objectsAddedToCollections = value;
    			if (_objectsAddedToCollections != null)
    				_objectsAddedToCollections.CollectionChanged += ObjectsCollectionChanged;
    		}
    	}
    	[DataMember]
    	public ObjectsAddedToCollectionProperties SerializedAdded {get; set; }
    	
    	private bool _isDeserializing;
    	
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		_isDeserializing = true;
    	}
    	
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		_isDeserializing = false;
    	}
    	
    	public void AcceptChanges(bool setUnchangedState = true)
    	{
    		OriginalValues.Clear();
    		ObjectsAddedToCollectionProperties.Clear();
    		ObjectsRemovedFromCollectionProperties.Clear();
    		ModifiedProperties.Clear();
    		ValidationProperties.Clear();
    		_objectState = ObjectState.Unchanged;
    		if (setUnchangedState)
    			OnObjectStateChanged(ObjectState.Unchanged);
    	}
    	
    	public void RecordOriginalValue(string propertyName, object value)
    	{
    		IObjectWithChangeTracker valueAsObjectWithChangeTracker = value as IObjectWithChangeTracker;
    		if (ChangeTrackingEnabled && _objectState != ObjectState.Added && (valueAsObjectWithChangeTracker == null || ! valueAsObjectWithChangeTracker.IsInitializingRelationships) && !OriginalValues.ContainsKey(propertyName))
    			OriginalValues[propertyName] = value;
    	}
    	
    	public void RecordAdditionToCollectionProperties(string propertyName, IObjectWithChangeTracker value)
    	{
    		if (ChangeTrackingEnabled && ! (value == null || value.IsInitializingRelationships))
    		{
    			if (ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName) && ObjectsRemovedFromCollectionProperties[propertyName].Contains(value))
    			{
    				ObjectsRemovedFromCollectionProperties[propertyName].Remove(value);
    				if (ObjectsRemovedFromCollectionProperties[propertyName].Count == 0)
    					ObjectsRemovedFromCollectionProperties.Remove(propertyName);
    				return;
    			}
    	
    			ObjectList addedObjectList;
    			if (! ObjectsAddedToCollectionProperties.TryGetValue(propertyName, out addedObjectList))
    				ObjectsAddedToCollectionProperties.Add(propertyName, new ObjectList {value});
    			else if (! addedObjectList.Contains(value))
    				addedObjectList.Add(value);
    		}
    	}
    	
    	public void RecordRemovalFromCollectionProperties(string propertyName, IObjectWithChangeTracker value)
    	{
    		if (value != null)
    		{
    			if (ObjectsAddedToCollectionProperties.ContainsKey(propertyName) && ObjectsAddedToCollectionProperties[propertyName].Contains(value))
    			{
    				ObjectsAddedToCollectionProperties[propertyName].Remove(value);
    				if (ObjectsAddedToCollectionProperties[propertyName].Count == 0)
    					ObjectsAddedToCollectionProperties.Remove(propertyName);
    				return;
    			}
    			if (ChangeTrackingEnabled && !(value == null || value.IsInitializingRelationships))
    			{
    				ObjectList removedObjectList;
    				if (! ObjectsRemovedFromCollectionProperties.TryGetValue(propertyName, out removedObjectList))
    					ObjectsRemovedFromCollectionProperties.Add(propertyName, new ObjectList {value});
    				else if (! removedObjectList.Contains(value))
    					removedObjectList.Add(value);
    			}
    		}
    	}
    
    	public bool Saving { get; set; }
    
    	private bool _hasChanges;
    	public bool HasChanges
    	{
    		get { return _hasChanges; }
    		set
    		{
    			if (_hasChanges != value)
    			{
    				_hasChanges = value;
    				OnHasChangesChanged(value);
    			}
    		}
    	}
    
    	protected virtual void OnHasChangesChanged(bool newValue)
    	{
    		if (HasChangesChanged != null)
    			HasChangesChanged(newValue);
    	}
    	public event Action<bool> HasChangesChanged;
    
    	private void EvaluateHasChanges()
    	{
    		HasChanges = ChangeTrackingEnabled && (State != ObjectState.Unchanged || ObjectsRemovedFromCollectionProperties.Count != 0 || OriginalValues.Count != 0 || ObjectsAddedToCollectionProperties.Count != 0);
    	}
    }
}
