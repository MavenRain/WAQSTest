//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Matthieu MEZIL.  All rights reserved.
// matthieu.mezil@live.fr

 
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace WCFAsyncQueryableServices.Entities
{
    [DataContract(IsReference = true, Namespace = "http://WCFAsyncQueryableServices/EntityTracking")]
    public class ObjectChangeTracker
    {
    	#region  Fields
    	private bool _isDeserializing;
    	#endregion
    	
    	#region Events
    	
    	public event EventHandler<ObjectStateChangingEventArgs> ObjectStateChanging;
    	
    	#endregion
    	
    	protected virtual void OnObjectStateChanging(ObjectState newState)
    	{
    		if (ObjectStateChanging != null)
    		{
    			ObjectStateChanging(this, new ObjectStateChangingEventArgs { NewState = newState });
    		}
    	}
    	
    	private ObjectState _objectState = ObjectState.Detached;
    	[DataMember]
    	public ObjectState State
    	{
    		get { return _objectState; }
    		set
    		{
    			if (_isDeserializing || _changeTrackingEnabled || EntitiesInitializer.FromQuery)
    			{
    				_objectState = value;
    				OnObjectStateChanging(value);
    			}
    		}
    	}
    	
    	private bool _changeTrackingEnabled;
    	public bool ChangeTrackingEnabled
    	{
    		get { return _changeTrackingEnabled && State != ObjectState.Detached; }
    		set { _changeTrackingEnabled = value; }
    	}
    	
    	private ObjectsRemovedFromCollectionProperties _objectsRemovedFromCollections = new ObjectsRemovedFromCollectionProperties();
    	[DataMember]
    	public ObjectsRemovedFromCollectionProperties ObjectsRemovedFromCollectionProperties
    	{
    		get { return _objectsRemovedFromCollections ?? (_objectsRemovedFromCollections = new ObjectsRemovedFromCollectionProperties()); }
    		set { _objectsRemovedFromCollections = value; }
    	}
    	private ObjectsRemovedFromCollectionProperties _serializedRemoved;
    	
    	private OriginalValuesDictionary _originalValues;
    	[DataMember]
    	public OriginalValuesDictionary OriginalValues
    	{
    		get { return _originalValues ?? (_originalValues = new OriginalValuesDictionary()); }
    		set { _originalValues = value; }
    	}
    	
    	private List<string> _modifiedProperties;
    	[DataMember]
    	public List<string> ModifiedProperties
    	{
    		get { return _modifiedProperties ?? (_modifiedProperties = new List<string>()); }
    		set
    		{
    			_modifiedProperties = value;
    		}
    	}
    	
    	private ExtendedPropertiesDictionary _extendedProperties;
    	[DataMember]
    	public ExtendedPropertiesDictionary ExtendedProperties
    	{
    		get { return _extendedProperties ?? (_extendedProperties = new ExtendedPropertiesDictionary()); }
    		set { _extendedProperties = value; }
    	}
    	
    	private ObjectsAddedToCollectionProperties _objectsAddedToCollections = new ObjectsAddedToCollectionProperties();
    	[DataMember]
    	public ObjectsAddedToCollectionProperties ObjectsAddedToCollectionProperties
    	{
    		get { return _objectsAddedToCollections ?? (_objectsAddedToCollections = new ObjectsAddedToCollectionProperties()); }
    		set { _objectsAddedToCollections = value; }
    	}
    	private ObjectsAddedToCollectionProperties _serializedAdded;
    	
    	private DbValuesDictionary _dbValues;
    	public DbValuesDictionary DbValues
    	{
    		get { return _dbValues ?? (_dbValues = new DbValuesDictionary()); }
    	}
    	
    	#region MethodsForChangeTrackingOnClient
    	
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		_isDeserializing = true;
    	}
    	
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		_isDeserializing = false;
    		_serializedAdded = new ObjectsAddedToCollectionProperties();
    		foreach (var added in ObjectsAddedToCollectionProperties)
    			_serializedAdded.Add(added.Key, new ObjectList(added.Value));
    		_serializedRemoved = new ObjectsRemovedFromCollectionProperties();
    		foreach (var removed in ObjectsRemovedFromCollectionProperties)
    			_serializedRemoved.Add(removed.Key, new ObjectList(removed.Value));
    	}
    	
    	public void AcceptChanges()
    	{
    		OnObjectStateChanging(ObjectState.Unchanged);
    		OriginalValues.Clear();
    		ObjectsAddedToCollectionProperties.Clear();
    		ObjectsRemovedFromCollectionProperties.Clear();
    		ModifiedProperties.Clear();
    		_objectState = ObjectState.Unchanged;
    	}
    	
    	public void RecordOriginalValue(string propertyName, object value)
    	{
    		if (_changeTrackingEnabled && _objectState != ObjectState.Added)
    		{
    			if (!OriginalValues.ContainsKey(propertyName))
    			{
    				OriginalValues[propertyName] = value;
    			}
    		}
    	}
    	
    	public void RecordAdditionToCollectionProperties(string propertyName, object value)
    	{
    		if (_changeTrackingEnabled)
    		{
    			ObjectList removedObjectList;
    			if (ObjectsRemovedFromCollectionProperties.TryGetValue(propertyName, out removedObjectList) && removedObjectList.Contains(value))
    			{
    				removedObjectList.Remove(value);
    				if (removedObjectList.Count == 0)
    					ObjectsRemovedFromCollectionProperties.Remove(propertyName);
    				ObjectList serializedRemovedObjectList;
    				if (_serializedRemoved == null || ! (_serializedRemoved.TryGetValue(propertyName, out serializedRemovedObjectList) && serializedRemovedObjectList.Contains(value)))
    					return;
    			}
    
    			ObjectList addedObjectList;
    			if (! ObjectsAddedToCollectionProperties.TryGetValue(propertyName, out addedObjectList))
    				ObjectsAddedToCollectionProperties.Add(propertyName, new ObjectList {value});
    			else if (! addedObjectList.Contains(value))
    				addedObjectList.Add(value);
    		}
    	}
    	
    	public void RecordRemovalFromCollectionProperties(string propertyName, object value)
    	{
    		if (_changeTrackingEnabled)
    		{
    			ObjectList addedObjectList;
    			if (ObjectsAddedToCollectionProperties.TryGetValue(propertyName, out addedObjectList) && addedObjectList.Contains(value))
    			{
    				ObjectsAddedToCollectionProperties[propertyName].Remove(value);
    				if (ObjectsAddedToCollectionProperties[propertyName].Count == 0)
    					ObjectsAddedToCollectionProperties.Remove(propertyName);
    				ObjectList serializedAddedObjectList;
    				if (_serializedAdded == null || ! (_serializedAdded.TryGetValue(propertyName, out serializedAddedObjectList) && serializedAddedObjectList.Contains(value)))
    					return;
    			}
    
    			ObjectList removedObjectList;
    			if (! ObjectsRemovedFromCollectionProperties.TryGetValue(propertyName, out removedObjectList))
    				ObjectsRemovedFromCollectionProperties.Add(propertyName, new ObjectList {value});
    			else if (! removedObjectList.Contains(value))
    				removedObjectList.Add(value);
    		}
    	}
    	#endregion
    }
}
